import { z } from 'zod'
import * as PrismaClient from '@prisma/client'

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

// PRISMA GENERATED ENUMS
//------------------------------------------------------

export const AccountScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.AccountScalarFieldEnum
)

export const BookingProductRoomScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.BookingProductRoomScalarFieldEnum
)

export const BookingProductScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.BookingProductScalarFieldEnum
)

export const BookingScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.BookingScalarFieldEnum
)

export const BookingTrevelerScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.BookingTrevelerScalarFieldEnum
)

export const CustomerScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.CustomerScalarFieldEnum
)

export const JsonNullValueFilterSchema = z.enum([
  'DbNull',
  'JsonNull',
  'AnyNull'
])

export const JsonNullValueInputSchema = z.enum(['JsonNull'])

export const QueryModeSchema = z.nativeEnum(PrismaClient.Prisma.QueryMode)

export const SortOrderSchema = z.nativeEnum(PrismaClient.Prisma.SortOrder)

export const TenantScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.TenantScalarFieldEnum
)

export const TransactionIsolationLevelSchema = z.nativeEnum(
  PrismaClient.Prisma.TransactionIsolationLevel
)

export const UserScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.UserScalarFieldEnum
)

// CUSTOM ENUMS
//------------------------------------------------------

export const BookingStatusSchema = z.nativeEnum(PrismaClient.BookingStatus)

export const ProductTypeSchema = z.nativeEnum(PrismaClient.ProductType)

export const RoomCategorySchema = z.nativeEnum(PrismaClient.RoomCategory)

export const HotelMealPlanSchema = z.nativeEnum(PrismaClient.HotelMealPlan)

export const StayTypeSchema = z.nativeEnum(PrismaClient.StayType)

/////////////////////////////////////////
// HELPER TYPES
/////////////////////////////////////////

// JSON
//------------------------------------------------------

type NullableJsonInput =
  | PrismaClient.Prisma.JsonValue
  | null
  | 'JsonNull'
  | 'DbNull'
  | PrismaClient.Prisma.NullTypes.DbNull
  | PrismaClient.Prisma.NullTypes.JsonNull

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return PrismaClient.Prisma.DbNull
  if (v === 'JsonNull') return PrismaClient.Prisma.JsonNull
  return v
}

export const JsonValue: z.ZodType<PrismaClient.Prisma.JsonValue> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(JsonValue)),
  z.lazy(() => z.record(JsonValue))
])

export const NullableJsonValue = z
  .union([JsonValue, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v))

export const InputJsonValue: z.ZodType<PrismaClient.Prisma.InputJsonValue> =
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => z.array(InputJsonValue.nullable())),
    z.lazy(() => z.record(InputJsonValue.nullable()))
  ])

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

// TENANT
//------------------------------------------------------

export const TenantSchema = z.object({
  // omitted: id: z.bigint(),
  name: z.string(),
  dobName: z.string().nullish(),
  taxId: z.string().nullish(),
  email: z.string().email(),
  phone: z.string().nullish(),
  mobilePhone: z.string().nullish(),
  contactPrefix: z.string().nullish(),
  contactFirstName: z.string().nullish(),
  contactMiddleName: z.string().nullish(),
  contactLastName: z.string().nullish(),
  brandUrl: z.string().nullish(),
  ownerUserId: z.string().nullish(),
  countryCode: z.string().nullish(),
  currencyCode: z.string().nullish(),
  locale: z.string().nullish(),
  isActive: z.boolean().nullish()
  // omitted: createdAt: z.date().nullish(),
  // omitted: updatedAt: z.date().nullish(),
})

// ACCOUNT
//------------------------------------------------------

export const AccountSchema = z.object({
  // omitted: id: z.bigint(),
  tenantId: z.bigint(),
  name: z.string(),
  dobName: z.string().nullish(),
  taxId: z.string().nullish(),
  email: z.string().email(),
  countryCode: z.string().nullish(),
  currencyCode: z.string().nullish(),
  locale: z.string().nullish(),
  isActive: z.boolean().nullish()
  // omitted: createdAt: z.date().nullish(),
  // omitted: updatedAt: z.date().nullish(),
})

// USER
//------------------------------------------------------

export const UserSchema = z.object({
  // omitted: id: z.bigint(),
  tenantId: z.bigint(),
  accountId: z.bigint(),
  firstName: z.string(),
  middleName: z.string(),
  lastName: z.string(),
  email: z.string().email(),
  mobilePhone: z.string().nullish(),
  adresses: InputJsonValue,
  gender: z.string(),
  birthDate: z.date()
  // omitted: createdAt: z.date().nullish(),
  // omitted: updatedAt: z.date().nullish(),
})

// CUSTOMER
//------------------------------------------------------

export const CustomerSchema = z.object({
  // omitted: id: z.bigint(),
  tenantId: z.bigint(),
  accountId: z.bigint(),
  ownerId: z.bigint(),
  prefix: z.string(),
  firstName: z.string(),
  middleName: z.string(),
  lastName: z.string(),
  sufix: z.string(),
  email: z.string().email(),
  countryCode: z.string().nullish(),
  currencyCode: z.string().nullish(),
  locale: z.string().nullish(),
  mobilePhone: z.string().nullish(),
  adresses: InputJsonValue,
  gender: z.string(),
  birthDate: z.date(),
  isActive: z.boolean().nullish()
  // omitted: createdAt: z.date().nullish(),
  // omitted: updatedAt: z.date().nullish(),
})

// BOOKING
//------------------------------------------------------

export const BookingSchema = z.object({
  status: BookingStatusSchema.nullish(),
  // omitted: id: z.bigint(),
  tenantId: z.bigint(),
  accountId: z.bigint(),
  customerId: z.bigint().nullish(),
  ownerId: z.bigint(),
  fullName: z.string().nullish(),
  email: z.string().email().nullish(),
  phone: z.string().nullish(),
  postalCode: z.string().nullish(),
  fromCity: z.string().nullish(),
  toCity: z.string().nullish(),
  travelDate: z.date().nullish(),
  travelPeriod: z.string().nullish(),
  adultsCount: z.number().int().nullish(),
  childrenCount: z.number().int().nullish(),
  seniorsCount: z.number().int().nullish(),
  requestDescription: z.string().nullish(),
  locatorCode: z.string().nullish(),
  totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  totalCost: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  paymentType: z.string().nullish(),
  paymentStatus: z.string().nullish(),
  paymentTime: z.date().nullish(),
  discountPercent: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  discountAmount: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  paymentAmount: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  voucherFilePath: z.string().nullish(),
  receiptFilePath: z.string().nullish(),
  invoiceFilePath: z.string().nullish(),
  isActive: z.boolean().nullish()
  // omitted: createdAt: z.date().nullish(),
  // omitted: updatedAt: z.date().nullish(),
})

// BOOKING TREVELER
//------------------------------------------------------

export const BookingTrevelerSchema = z.object({
  id: z.bigint(),
  tenantId: z.bigint(),
  accountId: z.bigint(),
  bookingId: z.bigint(),
  ownerId: z.bigint(),
  firstName: z.string(),
  lastName: z.string(),
  birthDate: z.date(),
  passportNumber: z.string(),
  passportIssueDate: z.date(),
  passportExpireDate: z.date(),
  email: z.string().email().nullish(),
  isActive: z.boolean().nullish()
  // omitted: createdAt: z.date().nullish(),
  // omitted: updatedAt: z.date().nullish(),
})

// BOOKING PRODUCT
//------------------------------------------------------

export const BookingProductSchema = z.object({
  productType: ProductTypeSchema,
  hotelMealPlan: HotelMealPlanSchema.nullish(),
  // omitted: id: z.bigint(),
  tenantId: z.bigint(),
  accountId: z.bigint(),
  bookingId: z.bigint(),
  ownerId: z.bigint(),
  supplierId: z.bigint().nullish(),
  description: z.string().nullish(),
  startDate: z.date(),
  endDate: z.date(),
  fromLocation: z.string().nullish(),
  toLocation: z.string(),
  termsAndConditions: z.string().nullish(),
  productCost: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  tenantMarkup: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  agencyMarkup: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  agentMarkup: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  federalTaxes: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  additionalFees: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  discountPercent: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  discount: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  paymentDueDate: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  paidDate: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  paymentAmount: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  hotelName: z.string().nullish(),
  hotelStarRating: z.number().int().nullish(),
  isActive: z.boolean().nullish()
  // omitted: createdAt: z.date().nullish(),
  // omitted: updatedAt: z.date().nullish(),
})

// BOOKING PRODUCT ROOM
//------------------------------------------------------

export const BookingProductRoomSchema = z.object({
  category: RoomCategorySchema,
  id: z.bigint(),
  bookingProductId: z.bigint(),
  adultsCount: z.number().int(),
  minorsCount: z.number().int(),
  ageOfMinors: z.number().int().array(),
  Price: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  isActive: z.boolean().nullish()
  // omitted: createdAt: z.date().nullish(),
  // omitted: updatedAt: z.date().nullish(),
})

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// TENANT
//------------------------------------------------------

export const TenantArgsSchema: z.ZodType<PrismaClient.Prisma.TenantArgs> = z
  .object({
    select: z.lazy(() => TenantSelectSchema).optional(),
    include: z.lazy(() => TenantIncludeSchema).optional()
  })
  .strict()

export const TenantIncludeSchema: z.ZodType<PrismaClient.Prisma.TenantInclude> =
  z
    .object({
      accounts: z
        .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
        .optional(),
      users: z
        .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
        .optional(),
      customers: z
        .union([z.boolean(), z.lazy(() => CustomerFindManyArgsSchema)])
        .optional(),
      bookings: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      bookingProducts: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      bookingTravelers: z
        .union([z.boolean(), z.lazy(() => BookingTrevelerFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => TenantCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

export const TenantCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.TenantCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => TenantCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const TenantCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.TenantCountOutputTypeSelect> =
  z
    .object({
      accounts: z.boolean().optional(),
      users: z.boolean().optional(),
      customers: z.boolean().optional(),
      bookings: z.boolean().optional(),
      bookingProducts: z.boolean().optional(),
      bookingTravelers: z.boolean().optional()
    })
    .strict()

export const TenantSelectSchema: z.ZodType<PrismaClient.Prisma.TenantSelect> = z
  .object({
    id: z.boolean().optional(),
    accounts: z
      .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
      .optional(),
    users: z
      .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
      .optional(),
    customers: z
      .union([z.boolean(), z.lazy(() => CustomerFindManyArgsSchema)])
      .optional(),
    bookings: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    bookingProducts: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    bookingTravelers: z
      .union([z.boolean(), z.lazy(() => BookingTrevelerFindManyArgsSchema)])
      .optional(),
    name: z.boolean().optional(),
    dobName: z.boolean().optional(),
    taxId: z.boolean().optional(),
    email: z.boolean().optional(),
    phone: z.boolean().optional(),
    mobilePhone: z.boolean().optional(),
    contactPrefix: z.boolean().optional(),
    contactFirstName: z.boolean().optional(),
    contactMiddleName: z.boolean().optional(),
    contactLastName: z.boolean().optional(),
    brandUrl: z.boolean().optional(),
    ownerUserId: z.boolean().optional(),
    countryCode: z.boolean().optional(),
    currencyCode: z.boolean().optional(),
    locale: z.boolean().optional(),
    isActive: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => TenantCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

// ACCOUNT
//------------------------------------------------------

export const AccountArgsSchema: z.ZodType<PrismaClient.Prisma.AccountArgs> = z
  .object({
    select: z.lazy(() => AccountSelectSchema).optional(),
    include: z.lazy(() => AccountIncludeSchema).optional()
  })
  .strict()

export const AccountIncludeSchema: z.ZodType<PrismaClient.Prisma.AccountInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      users: z
        .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
        .optional(),
      customers: z
        .union([z.boolean(), z.lazy(() => CustomerFindManyArgsSchema)])
        .optional(),
      bookings: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      bookingProducts: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      bookingProductsSupplied: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      bookingTravelers: z
        .union([z.boolean(), z.lazy(() => BookingTrevelerFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => AccountCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

export const AccountCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.AccountCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => AccountCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const AccountCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.AccountCountOutputTypeSelect> =
  z
    .object({
      users: z.boolean().optional(),
      customers: z.boolean().optional(),
      bookings: z.boolean().optional(),
      bookingProducts: z.boolean().optional(),
      bookingProductsSupplied: z.boolean().optional(),
      bookingTravelers: z.boolean().optional()
    })
    .strict()

export const AccountSelectSchema: z.ZodType<PrismaClient.Prisma.AccountSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      tenantId: z.boolean().optional(),
      users: z
        .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
        .optional(),
      customers: z
        .union([z.boolean(), z.lazy(() => CustomerFindManyArgsSchema)])
        .optional(),
      bookings: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      bookingProducts: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      bookingProductsSupplied: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      bookingTravelers: z
        .union([z.boolean(), z.lazy(() => BookingTrevelerFindManyArgsSchema)])
        .optional(),
      name: z.boolean().optional(),
      dobName: z.boolean().optional(),
      taxId: z.boolean().optional(),
      email: z.boolean().optional(),
      countryCode: z.boolean().optional(),
      currencyCode: z.boolean().optional(),
      locale: z.boolean().optional(),
      isActive: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      updatedAt: z.boolean().optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => AccountCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

// USER
//------------------------------------------------------

export const UserArgsSchema: z.ZodType<PrismaClient.Prisma.UserArgs> = z
  .object({
    select: z.lazy(() => UserSelectSchema).optional(),
    include: z.lazy(() => UserIncludeSchema).optional()
  })
  .strict()

export const UserIncludeSchema: z.ZodType<PrismaClient.Prisma.UserInclude> = z
  .object({
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    account: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional(),
    customers: z
      .union([z.boolean(), z.lazy(() => CustomerFindManyArgsSchema)])
      .optional(),
    bookings: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    bookingProducts: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    bookingTravelers: z
      .union([z.boolean(), z.lazy(() => BookingTrevelerFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

export const UserCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.UserCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const UserCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.UserCountOutputTypeSelect> =
  z
    .object({
      customers: z.boolean().optional(),
      bookings: z.boolean().optional(),
      bookingProducts: z.boolean().optional(),
      bookingTravelers: z.boolean().optional()
    })
    .strict()

export const UserSelectSchema: z.ZodType<PrismaClient.Prisma.UserSelect> = z
  .object({
    id: z.boolean().optional(),
    tenantId: z.boolean().optional(),
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    accountId: z.boolean().optional(),
    account: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional(),
    customers: z
      .union([z.boolean(), z.lazy(() => CustomerFindManyArgsSchema)])
      .optional(),
    bookings: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    bookingProducts: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    bookingTravelers: z
      .union([z.boolean(), z.lazy(() => BookingTrevelerFindManyArgsSchema)])
      .optional(),
    firstName: z.boolean().optional(),
    middleName: z.boolean().optional(),
    lastName: z.boolean().optional(),
    email: z.boolean().optional(),
    mobilePhone: z.boolean().optional(),
    adresses: z.boolean().optional(),
    gender: z.boolean().optional(),
    birthDate: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

// CUSTOMER
//------------------------------------------------------

export const CustomerArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerArgs> = z
  .object({
    select: z.lazy(() => CustomerSelectSchema).optional(),
    include: z.lazy(() => CustomerIncludeSchema).optional()
  })
  .strict()

export const CustomerIncludeSchema: z.ZodType<PrismaClient.Prisma.CustomerInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      owner: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
      bookings: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => CustomerCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

export const CustomerCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => CustomerCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const CustomerCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.CustomerCountOutputTypeSelect> =
  z
    .object({
      bookings: z.boolean().optional()
    })
    .strict()

export const CustomerSelectSchema: z.ZodType<PrismaClient.Prisma.CustomerSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      ownerId: z.boolean().optional(),
      owner: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
      bookings: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      prefix: z.boolean().optional(),
      firstName: z.boolean().optional(),
      middleName: z.boolean().optional(),
      lastName: z.boolean().optional(),
      sufix: z.boolean().optional(),
      email: z.boolean().optional(),
      countryCode: z.boolean().optional(),
      currencyCode: z.boolean().optional(),
      locale: z.boolean().optional(),
      mobilePhone: z.boolean().optional(),
      adresses: z.boolean().optional(),
      gender: z.boolean().optional(),
      birthDate: z.boolean().optional(),
      isActive: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      updatedAt: z.boolean().optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => CustomerCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

// BOOKING
//------------------------------------------------------

export const BookingArgsSchema: z.ZodType<PrismaClient.Prisma.BookingArgs> = z
  .object({
    select: z.lazy(() => BookingSelectSchema).optional(),
    include: z.lazy(() => BookingIncludeSchema).optional()
  })
  .strict()

export const BookingIncludeSchema: z.ZodType<PrismaClient.Prisma.BookingInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      customer: z
        .union([z.boolean(), z.lazy(() => CustomerArgsSchema)])
        .optional(),
      owner: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
      products: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      travelers: z
        .union([z.boolean(), z.lazy(() => BookingTrevelerFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => BookingCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

export const BookingCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.BookingCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => BookingCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const BookingCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.BookingCountOutputTypeSelect> =
  z
    .object({
      products: z.boolean().optional(),
      travelers: z.boolean().optional()
    })
    .strict()

export const BookingSelectSchema: z.ZodType<PrismaClient.Prisma.BookingSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      customerId: z.boolean().optional(),
      customer: z
        .union([z.boolean(), z.lazy(() => CustomerArgsSchema)])
        .optional(),
      ownerId: z.boolean().optional(),
      owner: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
      products: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      travelers: z
        .union([z.boolean(), z.lazy(() => BookingTrevelerFindManyArgsSchema)])
        .optional(),
      fullName: z.boolean().optional(),
      email: z.boolean().optional(),
      phone: z.boolean().optional(),
      postalCode: z.boolean().optional(),
      fromCity: z.boolean().optional(),
      toCity: z.boolean().optional(),
      travelDate: z.boolean().optional(),
      travelPeriod: z.boolean().optional(),
      adultsCount: z.boolean().optional(),
      childrenCount: z.boolean().optional(),
      seniorsCount: z.boolean().optional(),
      requestDescription: z.boolean().optional(),
      locatorCode: z.boolean().optional(),
      totalPrice: z.boolean().optional(),
      totalCost: z.boolean().optional(),
      paymentType: z.boolean().optional(),
      paymentStatus: z.boolean().optional(),
      paymentTime: z.boolean().optional(),
      discountPercent: z.boolean().optional(),
      discountAmount: z.boolean().optional(),
      paymentAmount: z.boolean().optional(),
      voucherFilePath: z.boolean().optional(),
      receiptFilePath: z.boolean().optional(),
      invoiceFilePath: z.boolean().optional(),
      status: z.boolean().optional(),
      isActive: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      updatedAt: z.boolean().optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => BookingCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

// BOOKING TREVELER
//------------------------------------------------------

export const BookingTrevelerArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerArgs> =
  z
    .object({
      select: z.lazy(() => BookingTrevelerSelectSchema).optional(),
      include: z.lazy(() => BookingTrevelerIncludeSchema).optional()
    })
    .strict()

export const BookingTrevelerIncludeSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      Booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      owner: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
    })
    .strict()

export const BookingTrevelerSelectSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      bookingId: z.boolean().optional(),
      Booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      ownerId: z.boolean().optional(),
      owner: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
      firstName: z.boolean().optional(),
      lastName: z.boolean().optional(),
      birthDate: z.boolean().optional(),
      passportNumber: z.boolean().optional(),
      passportIssueDate: z.boolean().optional(),
      passportExpireDate: z.boolean().optional(),
      email: z.boolean().optional(),
      isActive: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      updatedAt: z.boolean().optional()
    })
    .strict()

// BOOKING PRODUCT
//------------------------------------------------------

export const BookingProductArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductArgs> =
  z
    .object({
      select: z.lazy(() => BookingProductSelectSchema).optional(),
      include: z.lazy(() => BookingProductIncludeSchema).optional()
    })
    .strict()

export const BookingProductIncludeSchema: z.ZodType<PrismaClient.Prisma.BookingProductInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      Booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      owner: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
      supplier: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      rooms: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductRoomFindManyArgsSchema)
        ])
        .optional(),
      _count: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductCountOutputTypeArgsSchema)
        ])
        .optional()
    })
    .strict()

export const BookingProductCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => BookingProductCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const BookingProductCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.BookingProductCountOutputTypeSelect> =
  z
    .object({
      rooms: z.boolean().optional()
    })
    .strict()

export const BookingProductSelectSchema: z.ZodType<PrismaClient.Prisma.BookingProductSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      bookingId: z.boolean().optional(),
      Booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      ownerId: z.boolean().optional(),
      owner: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
      supplierId: z.boolean().optional(),
      supplier: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      rooms: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductRoomFindManyArgsSchema)
        ])
        .optional(),
      productType: z.boolean().optional(),
      description: z.boolean().optional(),
      startDate: z.boolean().optional(),
      endDate: z.boolean().optional(),
      fromLocation: z.boolean().optional(),
      toLocation: z.boolean().optional(),
      termsAndConditions: z.boolean().optional(),
      productCost: z.boolean().optional(),
      tenantMarkup: z.boolean().optional(),
      agencyMarkup: z.boolean().optional(),
      agentMarkup: z.boolean().optional(),
      localTaxes: z.boolean().optional(),
      federalTaxes: z.boolean().optional(),
      additionalFees: z.boolean().optional(),
      discountPercent: z.boolean().optional(),
      discount: z.boolean().optional(),
      finalPrice: z.boolean().optional(),
      paymentDueDate: z.boolean().optional(),
      paidDate: z.boolean().optional(),
      paymentAmount: z.boolean().optional(),
      hotelName: z.boolean().optional(),
      hotelStarRating: z.boolean().optional(),
      hotelMealPlan: z.boolean().optional(),
      isActive: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      updatedAt: z.boolean().optional(),
      _count: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductCountOutputTypeArgsSchema)
        ])
        .optional()
    })
    .strict()

// BOOKING PRODUCT ROOM
//------------------------------------------------------

export const BookingProductRoomArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomArgs> =
  z
    .object({
      select: z.lazy(() => BookingProductRoomSelectSchema).optional(),
      include: z.lazy(() => BookingProductRoomIncludeSchema).optional()
    })
    .strict()

export const BookingProductRoomIncludeSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomInclude> =
  z
    .object({
      bookingProduct: z
        .union([z.boolean(), z.lazy(() => BookingProductArgsSchema)])
        .optional()
    })
    .strict()

export const BookingProductRoomSelectSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomSelect> =
  z
    .object({
      id: z.boolean().optional(),
      bookingProductId: z.boolean().optional(),
      bookingProduct: z
        .union([z.boolean(), z.lazy(() => BookingProductArgsSchema)])
        .optional(),
      category: z.boolean().optional(),
      adultsCount: z.boolean().optional(),
      minorsCount: z.boolean().optional(),
      ageOfMinors: z.boolean().optional(),
      Price: z.boolean().optional(),
      isActive: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      updatedAt: z.boolean().optional()
    })
    .strict()

/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const TenantWhereInputSchema: z.ZodType<PrismaClient.Prisma.TenantWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => TenantWhereInputSchema),
          z.lazy(() => TenantWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => TenantWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => TenantWhereInputSchema),
          z.lazy(() => TenantWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
      users: z.lazy(() => UserListRelationFilterSchema).optional(),
      customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
      bookings: z.lazy(() => BookingListRelationFilterSchema).optional(),
      bookingProducts: z
        .lazy(() => BookingProductListRelationFilterSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerListRelationFilterSchema)
        .optional(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      dobName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      taxId: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactLastName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      brandUrl: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const TenantOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.TenantOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      accounts: z
        .lazy(() => AccountOrderByRelationAggregateInputSchema)
        .optional(),
      users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
      customers: z
        .lazy(() => CustomerOrderByRelationAggregateInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerOrderByRelationAggregateInputSchema)
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      brandUrl: z.lazy(() => SortOrderSchema).optional(),
      ownerUserId: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.TenantWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
  })
  .strict()

export const TenantOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.TenantOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      brandUrl: z.lazy(() => SortOrderSchema).optional(),
      ownerUserId: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => TenantCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => TenantAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => TenantMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => TenantMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => TenantSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const TenantScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.TenantScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => TenantScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      dobName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountWhereInputSchema: z.ZodType<PrismaClient.Prisma.AccountWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountWhereInputSchema),
          z.lazy(() => AccountWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => AccountWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountWhereInputSchema),
          z.lazy(() => AccountWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      users: z.lazy(() => UserListRelationFilterSchema).optional(),
      customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
      bookings: z.lazy(() => BookingListRelationFilterSchema).optional(),
      bookingProducts: z
        .lazy(() => BookingProductListRelationFilterSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductListRelationFilterSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerListRelationFilterSchema)
        .optional(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      dobName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      taxId: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const AccountOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.AccountOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
      customers: z
        .lazy(() => CustomerOrderByRelationAggregateInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerOrderByRelationAggregateInputSchema)
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
  })
  .strict()

export const AccountOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.AccountOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.AccountScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => AccountScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      dobName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      countryCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserWhereInputSchema: z.ZodType<PrismaClient.Prisma.UserWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserWhereInputSchema),
          z.lazy(() => UserWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => UserWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserWhereInputSchema),
          z.lazy(() => UserWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
      bookings: z.lazy(() => BookingListRelationFilterSchema).optional(),
      bookingProducts: z
        .lazy(() => BookingProductListRelationFilterSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerListRelationFilterSchema)
        .optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      middleName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const UserOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.UserOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      customers: z
        .lazy(() => CustomerOrderByRelationAggregateInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerOrderByRelationAggregateInputSchema)
        .optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId_accountId: z
      .lazy(() => UserTenantIdAccountIdCompoundUniqueInputSchema)
      .optional()
  })
  .strict()

export const UserOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.UserOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.UserScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema),
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => UserScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema),
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      middleName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerWhereInputSchema: z.ZodType<PrismaClient.Prisma.CustomerWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CustomerWhereInputSchema),
          z.lazy(() => CustomerWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => CustomerWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CustomerWhereInputSchema),
          z.lazy(() => CustomerWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      owner: z
        .union([
          z.lazy(() => UserRelationFilterSchema),
          z.lazy(() => UserWhereInputSchema)
        ])
        .optional(),
      bookings: z.lazy(() => BookingListRelationFilterSchema).optional(),
      prefix: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      middleName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      sufix: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.CustomerOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      owner: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
      bookings: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      prefix: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      sufix: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CustomerWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.CustomerWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId_accountId: z
      .lazy(() => CustomerTenantIdAccountIdCompoundUniqueInputSchema)
      .optional()
  })
  .strict()

export const CustomerOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.CustomerOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      prefix: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      sufix: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => CustomerCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => CustomerAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => CustomerMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => CustomerMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => CustomerSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const CustomerScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.CustomerScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => CustomerScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      prefix: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      middleName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      sufix: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      countryCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingWhereInputSchema),
          z.lazy(() => BookingWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingWhereInputSchema),
          z.lazy(() => BookingWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      customerId: z
        .union([z.lazy(() => BigIntNullableFilterSchema), z.bigint()])
        .optional()
        .nullable(),
      customer: z
        .union([
          z.lazy(() => CustomerRelationFilterSchema),
          z.lazy(() => CustomerWhereInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      owner: z
        .union([
          z.lazy(() => UserRelationFilterSchema),
          z.lazy(() => UserWhereInputSchema)
        ])
        .optional(),
      products: z.lazy(() => BookingProductListRelationFilterSchema).optional(),
      travelers: z
        .lazy(() => BookingTrevelerListRelationFilterSchema)
        .optional(),
      fullName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      postalCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fromCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      travelDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adultsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      childrenCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      requestDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentTime: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => EnumBookingStatusNullableFilterSchema),
          z.lazy(() => BookingStatusSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.BookingOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      owner: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
      products: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional(),
      travelers: z
        .lazy(() => BookingTrevelerOrderByRelationAggregateInputSchema)
        .optional(),
      fullName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId_accountId_customerId: z
      .lazy(() => BookingTenantIdAccountIdCustomerIdCompoundUniqueInputSchema)
      .optional()
  })
  .strict()

export const BookingOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.BookingOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      fullName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => BookingCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => BookingAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => BookingMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => BookingMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => BookingSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const BookingScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.BookingScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema),
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema),
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      customerId: z
        .union([
          z.lazy(() => BigIntNullableWithAggregatesFilterSchema),
          z.bigint()
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      fullName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => EnumBookingStatusNullableWithAggregatesFilterSchema),
          z.lazy(() => BookingStatusSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTrevelerWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTrevelerWhereInputSchema),
          z.lazy(() => BookingTrevelerWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTrevelerWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTrevelerWhereInputSchema),
          z.lazy(() => BookingTrevelerWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      Booking: z
        .union([
          z.lazy(() => BookingRelationFilterSchema),
          z.lazy(() => BookingWhereInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      owner: z
        .union([
          z.lazy(() => UserRelationFilterSchema),
          z.lazy(() => UserWhereInputSchema)
        ])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      passportExpireDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      email: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTrevelerOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      Booking: z.lazy(() => BookingOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      owner: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTrevelerWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTrevelerWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
  })
  .strict()

export const BookingTrevelerOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingTrevelerCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingTrevelerAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingTrevelerMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingTrevelerMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingTrevelerSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingTrevelerScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingTrevelerScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTrevelerScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingTrevelerScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      bookingId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      passportExpireDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      email: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductWhereInputSchema),
          z.lazy(() => BookingProductWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductWhereInputSchema),
          z.lazy(() => BookingProductWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      Booking: z
        .union([
          z.lazy(() => BookingRelationFilterSchema),
          z.lazy(() => BookingWhereInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      owner: z
        .union([
          z.lazy(() => UserRelationFilterSchema),
          z.lazy(() => UserWhereInputSchema)
        ])
        .optional(),
      supplierId: z
        .union([z.lazy(() => BigIntNullableFilterSchema), z.bigint()])
        .optional()
        .nullable(),
      supplier: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(() => BookingProductRoomListRelationFilterSchema)
        .optional(),
      productType: z
        .union([
          z.lazy(() => EnumProductTypeFilterSchema),
          z.lazy(() => ProductTypeSchema)
        ])
        .optional(),
      description: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      startDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      endDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      fromLocation: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => EnumHotelMealPlanNullableFilterSchema),
          z.lazy(() => HotelMealPlanSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      Booking: z.lazy(() => BookingOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      owner: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplier: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      rooms: z
        .lazy(() => BookingProductRoomOrderByRelationAggregateInputSchema)
        .optional(),
      productType: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId_accountId_bookingId: z
      .lazy(
        () => BookingProductTenantIdAccountIdBookingIdCompoundUniqueInputSchema
      )
      .optional()
  })
  .strict()

export const BookingProductOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      productType: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingProductCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingProductAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingProductMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingProductMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingProductSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingProductScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      bookingId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      supplierId: z
        .union([
          z.lazy(() => BigIntNullableWithAggregatesFilterSchema),
          z.bigint()
        ])
        .optional()
        .nullable(),
      productType: z
        .union([
          z.lazy(() => EnumProductTypeWithAggregatesFilterSchema),
          z.lazy(() => ProductTypeSchema)
        ])
        .optional(),
      description: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      endDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      fromLocation: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => EnumHotelMealPlanNullableWithAggregatesFilterSchema),
          z.lazy(() => HotelMealPlanSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomWhereInputSchema),
          z.lazy(() => BookingProductRoomWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomWhereInputSchema),
          z.lazy(() => BookingProductRoomWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      bookingProductId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      bookingProduct: z
        .union([
          z.lazy(() => BookingProductRelationFilterSchema),
          z.lazy(() => BookingProductWhereInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      Price: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      bookingProduct: z
        .lazy(() => BookingProductOrderByWithRelationInputSchema)
        .optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      Price: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
  })
  .strict()

export const BookingProductRoomOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      Price: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingProductRoomCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingProductRoomAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingProductRoomMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingProductRoomMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingProductRoomSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingProductRoomScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      bookingProductId: z
        .union([z.lazy(() => BigIntWithAggregatesFilterSchema), z.bigint()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryWithAggregatesFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      Price: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.TenantCreateInput, 'id' | 'createdAt' | 'updatedAt'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    accounts: z
      .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    users: z
      .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    name: z.string(),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    contactPrefix: z.string().optional().nullable(),
    contactFirstName: z.string().optional().nullable(),
    contactMiddleName: z.string().optional().nullable(),
    contactLastName: z.string().optional().nullable(),
    brandUrl: z.string().optional().nullable(),
    ownerUserId: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const TenantUncheckedCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.TenantUncheckedCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    accounts: z
      .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    users: z
      .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
      )
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
      )
      .optional(),
    name: z.string(),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    contactPrefix: z.string().optional().nullable(),
    contactFirstName: z.string().optional().nullable(),
    contactMiddleName: z.string().optional().nullable(),
    contactLastName: z.string().optional().nullable(),
    brandUrl: z.string().optional().nullable(),
    ownerUserId: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const TenantUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.TenantUpdateInput, 'id' | 'createdAt' | 'updatedAt'>
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    accounts: z
      .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    users: z
      .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactPrefix: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactFirstName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactMiddleName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactLastName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brandUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerUserId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const TenantUncheckedUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.TenantUncheckedUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    accounts: z
      .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    users: z
      .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
      )
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
      )
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactPrefix: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactFirstName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactMiddleName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactLastName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brandUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerUserId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const TenantCreateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.TenantCreateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    name: z.string(),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    contactPrefix: z.string().optional().nullable(),
    contactFirstName: z.string().optional().nullable(),
    contactMiddleName: z.string().optional().nullable(),
    contactLastName: z.string().optional().nullable(),
    brandUrl: z.string().optional().nullable(),
    ownerUserId: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const TenantUpdateManyMutationInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.TenantUpdateManyMutationInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactPrefix: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactFirstName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactMiddleName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactLastName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brandUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerUserId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const TenantUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.TenantUncheckedUpdateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactPrefix: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactFirstName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactMiddleName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactLastName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brandUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerUserId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const AccountCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountCreateInput, 'id' | 'createdAt' | 'updatedAt'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
    users: z
      .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    bookingProductsSupplied: z
      .lazy(() => BookingProductCreateNestedManyWithoutSupplierInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTrevelerCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    name: z.string(),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const AccountUncheckedCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.AccountUncheckedCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    users: z
      .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerUncheckedCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
      )
      .optional(),
    bookingProductsSupplied: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutSupplierInputSchema
      )
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTrevelerUncheckedCreateNestedManyWithoutAccountInputSchema
      )
      .optional(),
    name: z.string(),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const AccountUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUpdateInput, 'id' | 'createdAt' | 'updatedAt'>
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenant: z
      .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
      .optional(),
    users: z
      .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    bookingProductsSupplied: z
      .lazy(() => BookingProductUpdateManyWithoutSupplierNestedInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTrevelerUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const AccountUncheckedUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.AccountUncheckedUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    users: z
      .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerUncheckedUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
      )
      .optional(),
    bookingProductsSupplied: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutSupplierNestedInputSchema
      )
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInputSchema
      )
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const AccountCreateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.AccountCreateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    name: z.string(),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const AccountUpdateManyMutationInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.AccountUpdateManyMutationInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.AccountUncheckedUpdateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const UserCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserCreateInput, 'id' | 'createdAt' | 'updatedAt'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
    account: z.lazy(() => AccountCreateNestedOneWithoutUsersInputSchema),
    customers: z
      .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    email: z.string().email(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const UserUncheckedCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.UserUncheckedCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    customers: z
      .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
      )
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
      )
      .optional(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    email: z.string().email(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const UserUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUpdateInput, 'id' | 'createdAt' | 'updatedAt'>
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenant: z
      .lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema)
      .optional(),
    account: z
      .lazy(() => AccountUpdateOneRequiredWithoutUsersNestedInputSchema)
      .optional(),
    customers: z
      .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const UserUncheckedUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.UserUncheckedUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    customers: z
      .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
      )
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
      )
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const UserCreateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.UserCreateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    email: z.string().email(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const UserUpdateManyMutationInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.UserUpdateManyMutationInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const UserUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.UserUncheckedUpdateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const CustomerCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenant: z.lazy(() => TenantCreateNestedOneWithoutCustomersInputSchema),
    account: z.lazy(() => AccountCreateNestedOneWithoutCustomersInputSchema),
    owner: z.lazy(() => UserCreateNestedOneWithoutCustomersInputSchema),
    bookings: z
      .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    prefix: z.string(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    sufix: z.string(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const CustomerUncheckedCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerUncheckedCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    ownerId: z.bigint(),
    bookings: z
      .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    prefix: z.string(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    sufix: z.string(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const CustomerUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenant: z
      .lazy(() => TenantUpdateOneRequiredWithoutCustomersNestedInputSchema)
      .optional(),
    account: z
      .lazy(() => AccountUpdateOneRequiredWithoutCustomersNestedInputSchema)
      .optional(),
    owner: z
      .lazy(() => UserUpdateOneRequiredWithoutCustomersNestedInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    prefix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    sufix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const CustomerUncheckedUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerUncheckedUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    bookings: z
      .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    prefix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    sufix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const CustomerCreateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerCreateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    ownerId: z.bigint(),
    prefix: z.string(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    sufix: z.string(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const CustomerUpdateManyMutationInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerUpdateManyMutationInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    prefix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    sufix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const CustomerUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerUncheckedUpdateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    prefix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    sufix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingCreateInput, 'id' | 'createdAt' | 'updatedAt'>
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
    account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
    customer: z
      .lazy(() => CustomerCreateNestedOneWithoutBookingsInputSchema)
      .optional(),
    owner: z.lazy(() => UserCreateNestedOneWithoutBookingsInputSchema),
    products: z
      .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
      .optional(),
    travelers: z
      .lazy(() => BookingTrevelerCreateNestedManyWithoutBookingInputSchema)
      .optional(),
    fullName: z.string().optional().nullable(),
    email: z.string().email().optional().nullable(),
    phone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingUncheckedCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingUncheckedCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    customerId: z.bigint().optional().nullable(),
    ownerId: z.bigint(),
    products: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
      )
      .optional(),
    travelers: z
      .lazy(
        () => BookingTrevelerUncheckedCreateNestedManyWithoutBookingInputSchema
      )
      .optional(),
    fullName: z.string().optional().nullable(),
    email: z.string().email().optional().nullable(),
    phone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUpdateInput, 'id' | 'createdAt' | 'updatedAt'>
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenant: z
      .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
      .optional(),
    account: z
      .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
      .optional(),
    customer: z
      .lazy(() => CustomerUpdateOneWithoutBookingsNestedInputSchema)
      .optional(),
    owner: z
      .lazy(() => UserUpdateOneRequiredWithoutBookingsNestedInputSchema)
      .optional(),
    products: z
      .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
      .optional(),
    travelers: z
      .lazy(() => BookingTrevelerUpdateManyWithoutBookingNestedInputSchema)
      .optional(),
    fullName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingUncheckedUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingUncheckedUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    customerId: z
      .union([
        z.bigint(),
        z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    products: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
      )
      .optional(),
    travelers: z
      .lazy(
        () => BookingTrevelerUncheckedUpdateManyWithoutBookingNestedInputSchema
      )
      .optional(),
    fullName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingCreateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingCreateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    customerId: z.bigint().optional().nullable(),
    ownerId: z.bigint(),
    fullName: z.string().optional().nullable(),
    email: z.string().email().optional().nullable(),
    phone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingUpdateManyMutationInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingUpdateManyMutationInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    fullName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingUncheckedUpdateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    customerId: z
      .union([
        z.bigint(),
        z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    fullName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingTrevelerCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenant: z.lazy(
      () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
    ),
    account: z.lazy(
      () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
    ),
    Booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
    owner: z.lazy(() => UserCreateNestedOneWithoutBookingTravelersInputSchema),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string().email().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingTrevelerUncheckedCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerUncheckedCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string().email().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingTrevelerUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenant: z
      .lazy(
        () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
      )
      .optional(),
    account: z
      .lazy(
        () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
      )
      .optional(),
    Booking: z
      .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
      .optional(),
    owner: z
      .lazy(() => UserUpdateOneRequiredWithoutBookingTravelersNestedInputSchema)
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingTrevelerUncheckedUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerUncheckedUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    bookingId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingTrevelerCreateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerCreateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string().email().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingTrevelerUpdateManyMutationInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerUpdateManyMutationInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingTrevelerUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerUncheckedUpdateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    bookingId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenant: z.lazy(
      () => TenantCreateNestedOneWithoutBookingProductsInputSchema
    ),
    account: z.lazy(
      () => AccountCreateNestedOneWithoutBookingProductsInputSchema
    ),
    Booking: z.lazy(() => BookingCreateNestedOneWithoutProductsInputSchema),
    owner: z.lazy(() => UserCreateNestedOneWithoutBookingProductsInputSchema),
    supplier: z
      .lazy(
        () => AccountCreateNestedOneWithoutBookingProductsSuppliedInputSchema
      )
      .optional(),
    rooms: z
      .lazy(
        () => BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
      )
      .optional(),
    productType: z.lazy(() => ProductTypeSchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z
      .lazy(() => HotelMealPlanSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductUncheckedCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUncheckedCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    supplierId: z.bigint().optional().nullable(),
    rooms: z
      .lazy(
        () =>
          BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
      )
      .optional(),
    productType: z.lazy(() => ProductTypeSchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z
      .lazy(() => HotelMealPlanSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenant: z
      .lazy(
        () => TenantUpdateOneRequiredWithoutBookingProductsNestedInputSchema
      )
      .optional(),
    account: z
      .lazy(
        () => AccountUpdateOneRequiredWithoutBookingProductsNestedInputSchema
      )
      .optional(),
    Booking: z
      .lazy(() => BookingUpdateOneRequiredWithoutProductsNestedInputSchema)
      .optional(),
    owner: z
      .lazy(() => UserUpdateOneRequiredWithoutBookingProductsNestedInputSchema)
      .optional(),
    supplier: z
      .lazy(
        () => AccountUpdateOneWithoutBookingProductsSuppliedNestedInputSchema
      )
      .optional(),
    rooms: z
      .lazy(
        () => BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
      )
      .optional(),
    productType: z
      .union([
        z.lazy(() => ProductTypeSchema),
        z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.lazy(() => HotelMealPlanSchema),
        z.lazy(() => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductUncheckedUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUncheckedUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    bookingId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    supplierId: z
      .union([
        z.bigint(),
        z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    rooms: z
      .lazy(
        () =>
          BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
      )
      .optional(),
    productType: z
      .union([
        z.lazy(() => ProductTypeSchema),
        z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.lazy(() => HotelMealPlanSchema),
        z.lazy(() => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductCreateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductCreateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    supplierId: z.bigint().optional().nullable(),
    productType: z.lazy(() => ProductTypeSchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z
      .lazy(() => HotelMealPlanSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductUpdateManyMutationInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUpdateManyMutationInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    productType: z
      .union([
        z.lazy(() => ProductTypeSchema),
        z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.lazy(() => HotelMealPlanSchema),
        z.lazy(() => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUncheckedUpdateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    bookingId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    supplierId: z
      .union([
        z.bigint(),
        z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productType: z
      .union([
        z.lazy(() => ProductTypeSchema),
        z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.lazy(() => HotelMealPlanSchema),
        z.lazy(() => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductRoomCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    bookingProduct: z.lazy(
      () => BookingProductCreateNestedOneWithoutRoomsInputSchema
    ),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductRoomUncheckedCreateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUncheckedCreateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    bookingProductId: z.bigint(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductRoomUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingProduct: z
      .lazy(() => BookingProductUpdateOneRequiredWithoutRoomsNestedInputSchema)
      .optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductRoomUncheckedUpdateInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUncheckedUpdateInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingProductId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductRoomCreateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomCreateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    bookingProductId: z.bigint(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductRoomUpdateManyMutationInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUpdateManyMutationInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductRoomUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUncheckedUpdateManyInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingProductId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BigIntFilterSchema: z.ZodType<PrismaClient.Prisma.BigIntFilter> = z
  .object({
    equals: z.bigint().optional(),
    in: z.bigint().array().optional(),
    notIn: z.bigint().array().optional(),
    lt: z.bigint().optional(),
    lte: z.bigint().optional(),
    gt: z.bigint().optional(),
    gte: z.bigint().optional(),
    not: z
      .union([z.bigint(), z.lazy(() => NestedBigIntFilterSchema)])
      .optional()
  })
  .strict()

export const AccountListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.AccountListRelationFilter> =
  z
    .object({
      every: z.lazy(() => AccountWhereInputSchema).optional(),
      some: z.lazy(() => AccountWhereInputSchema).optional(),
      none: z.lazy(() => AccountWhereInputSchema).optional()
    })
    .strict()

export const UserListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.UserListRelationFilter> =
  z
    .object({
      every: z.lazy(() => UserWhereInputSchema).optional(),
      some: z.lazy(() => UserWhereInputSchema).optional(),
      none: z.lazy(() => UserWhereInputSchema).optional()
    })
    .strict()

export const CustomerListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.CustomerListRelationFilter> =
  z
    .object({
      every: z.lazy(() => CustomerWhereInputSchema).optional(),
      some: z.lazy(() => CustomerWhereInputSchema).optional(),
      none: z.lazy(() => CustomerWhereInputSchema).optional()
    })
    .strict()

export const BookingListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingWhereInputSchema).optional(),
      some: z.lazy(() => BookingWhereInputSchema).optional(),
      none: z.lazy(() => BookingWhereInputSchema).optional()
    })
    .strict()

export const BookingProductListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingProductListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingProductWhereInputSchema).optional(),
      some: z.lazy(() => BookingProductWhereInputSchema).optional(),
      none: z.lazy(() => BookingProductWhereInputSchema).optional()
    })
    .strict()

export const BookingTrevelerListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingTrevelerWhereInputSchema).optional(),
      some: z.lazy(() => BookingTrevelerWhereInputSchema).optional(),
      none: z.lazy(() => BookingTrevelerWhereInputSchema).optional()
    })
    .strict()

export const StringFilterSchema: z.ZodType<PrismaClient.Prisma.StringFilter> = z
  .object({
    equals: z.string().optional(),
    in: z.string().array().optional(),
    notIn: z.string().array().optional(),
    lt: z.string().optional(),
    lte: z.string().optional(),
    gt: z.string().optional(),
    gte: z.string().optional(),
    contains: z.string().optional(),
    startsWith: z.string().optional(),
    endsWith: z.string().optional(),
    mode: z.lazy(() => QueryModeSchema).optional(),
    not: z
      .union([z.string(), z.lazy(() => NestedStringFilterSchema)])
      .optional()
  })
  .strict()

export const StringNullableFilterSchema: z.ZodType<PrismaClient.Prisma.StringNullableFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const BoolNullableFilterSchema: z.ZodType<PrismaClient.Prisma.BoolNullableFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const DateTimeNullableFilterSchema: z.ZodType<PrismaClient.Prisma.DateTimeNullableFilter> =
  z
    .object({
      equals: z.date().optional().nullable(),
      in: z.date().array().optional().nullable(),
      notIn: z.date().array().optional().nullable(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([z.date(), z.lazy(() => NestedDateTimeNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CustomerOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.CustomerOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTrevelerOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      brandUrl: z.lazy(() => SortOrderSchema).optional(),
      ownerUserId: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      brandUrl: z.lazy(() => SortOrderSchema).optional(),
      ownerUserId: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      brandUrl: z.lazy(() => SortOrderSchema).optional(),
      ownerUserId: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BigIntWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.BigIntWithAggregatesFilter> =
  z
    .object({
      equals: z.bigint().optional(),
      in: z.bigint().array().optional(),
      notIn: z.bigint().array().optional(),
      lt: z.bigint().optional(),
      lte: z.bigint().optional(),
      gt: z.bigint().optional(),
      gte: z.bigint().optional(),
      not: z
        .union([
          z.bigint(),
          z.lazy(() => NestedBigIntWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
      _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
      _max: z.lazy(() => NestedBigIntFilterSchema).optional()
    })
    .strict()

export const StringWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.StringWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedStringFilterSchema).optional(),
      _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const StringNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.StringNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.BoolNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([
          z.boolean(),
          z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
    })
    .strict()

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.DateTimeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.date().optional().nullable(),
      in: z.date().array().optional().nullable(),
      notIn: z.date().array().optional().nullable(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([
          z.date(),
          z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
    })
    .strict()

export const TenantRelationFilterSchema: z.ZodType<PrismaClient.Prisma.TenantRelationFilter> =
  z
    .object({
      is: z.lazy(() => TenantWhereInputSchema).optional(),
      isNot: z.lazy(() => TenantWhereInputSchema).optional()
    })
    .strict()

export const AccountCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountRelationFilterSchema: z.ZodType<PrismaClient.Prisma.AccountRelationFilter> =
  z
    .object({
      is: z.lazy(() => AccountWhereInputSchema).optional(),
      isNot: z.lazy(() => AccountWhereInputSchema).optional()
    })
    .strict()

export const JsonFilterSchema: z.ZodType<PrismaClient.Prisma.JsonFilter> = z
  .object({
    equals: z
      .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
      .optional(),
    path: z.string().array().optional(),
    string_contains: z.string().optional(),
    string_starts_with: z.string().optional(),
    string_ends_with: z.string().optional(),
    array_contains: InputJsonValue.optional().nullable(),
    array_starts_with: InputJsonValue.optional().nullable(),
    array_ends_with: InputJsonValue.optional().nullable(),
    lt: InputJsonValue.optional(),
    lte: InputJsonValue.optional(),
    gt: InputJsonValue.optional(),
    gte: InputJsonValue.optional(),
    not: z
      .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
      .optional()
  })
  .strict()

export const DateTimeFilterSchema: z.ZodType<PrismaClient.Prisma.DateTimeFilter> =
  z
    .object({
      equals: z.date().optional(),
      in: z.date().array().optional(),
      notIn: z.date().array().optional(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([z.date(), z.lazy(() => NestedDateTimeFilterSchema)])
        .optional()
    })
    .strict()

export const UserTenantIdAccountIdCompoundUniqueInputSchema: z.ZodType<PrismaClient.Prisma.UserTenantIdAccountIdCompoundUniqueInput> =
  z
    .object({
      tenantId: z.bigint(),
      accountId: z.bigint()
    })
    .strict()

export const UserCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const JsonWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.JsonWithAggregatesFilter> =
  z
    .object({
      equals: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      path: z.string().array().optional(),
      string_contains: z.string().optional(),
      string_starts_with: z.string().optional(),
      string_ends_with: z.string().optional(),
      array_contains: InputJsonValue.optional().nullable(),
      array_starts_with: InputJsonValue.optional().nullable(),
      array_ends_with: InputJsonValue.optional().nullable(),
      lt: InputJsonValue.optional(),
      lte: InputJsonValue.optional(),
      gt: InputJsonValue.optional(),
      gte: InputJsonValue.optional(),
      not: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedJsonFilterSchema).optional(),
      _max: z.lazy(() => NestedJsonFilterSchema).optional()
    })
    .strict()

export const DateTimeWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.DateTimeWithAggregatesFilter> =
  z
    .object({
      equals: z.date().optional(),
      in: z.date().array().optional(),
      notIn: z.date().array().optional(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([
          z.date(),
          z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
    })
    .strict()

export const UserRelationFilterSchema: z.ZodType<PrismaClient.Prisma.UserRelationFilter> =
  z
    .object({
      is: z.lazy(() => UserWhereInputSchema).optional(),
      isNot: z.lazy(() => UserWhereInputSchema).optional()
    })
    .strict()

export const CustomerTenantIdAccountIdCompoundUniqueInputSchema: z.ZodType<PrismaClient.Prisma.CustomerTenantIdAccountIdCompoundUniqueInput> =
  z
    .object({
      tenantId: z.bigint(),
      accountId: z.bigint()
    })
    .strict()

export const CustomerCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      prefix: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      sufix: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CustomerAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.CustomerAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CustomerMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.CustomerMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      prefix: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      sufix: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CustomerMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.CustomerMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      prefix: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      middleName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      sufix: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CustomerSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.CustomerSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BigIntNullableFilterSchema: z.ZodType<PrismaClient.Prisma.BigIntNullableFilter> =
  z
    .object({
      equals: z.bigint().optional().nullable(),
      in: z.bigint().array().optional().nullable(),
      notIn: z.bigint().array().optional().nullable(),
      lt: z.bigint().optional(),
      lte: z.bigint().optional(),
      gt: z.bigint().optional(),
      gte: z.bigint().optional(),
      not: z
        .union([z.bigint(), z.lazy(() => NestedBigIntNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerRelationFilterSchema: z.ZodType<PrismaClient.Prisma.CustomerRelationFilter> =
  z
    .object({
      is: z
        .lazy(() => CustomerWhereInputSchema)
        .optional()
        .nullable(),
      isNot: z
        .lazy(() => CustomerWhereInputSchema)
        .optional()
        .nullable()
    })
    .strict()

export const IntNullableFilterSchema: z.ZodType<PrismaClient.Prisma.IntNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const DecimalNullableFilterSchema: z.ZodType<PrismaClient.Prisma.DecimalNullableFilter> =
  z
    .object({
      equals: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      in: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      lt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      lte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      not: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NestedDecimalNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const EnumBookingStatusNullableFilterSchema: z.ZodType<PrismaClient.Prisma.EnumBookingStatusNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => NestedEnumBookingStatusNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTenantIdAccountIdCustomerIdCompoundUniqueInputSchema: z.ZodType<PrismaClient.Prisma.BookingTenantIdAccountIdCustomerIdCompoundUniqueInput> =
  z
    .object({
      tenantId: z.bigint(),
      accountId: z.bigint(),
      customerId: z.bigint()
    })
    .strict()

export const BookingCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      fullName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      fullName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      fullName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BigIntNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.BigIntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.bigint().optional().nullable(),
      in: z.bigint().array().optional().nullable(),
      notIn: z.bigint().array().optional().nullable(),
      lt: z.bigint().optional(),
      lte: z.bigint().optional(),
      gt: z.bigint().optional(),
      gte: z.bigint().optional(),
      not: z
        .union([
          z.bigint(),
          z.lazy(() => NestedBigIntNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBigIntNullableFilterSchema).optional()
    })
    .strict()

export const IntNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.IntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
    })
    .strict()

export const DecimalNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.DecimalNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      in: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      lt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      lte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      not: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
    })
    .strict()

export const EnumBookingStatusNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumBookingStatusNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NestedEnumBookingStatusNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumBookingStatusNullableFilterSchema)
        .optional(),
      _max: z.lazy(() => NestedEnumBookingStatusNullableFilterSchema).optional()
    })
    .strict()

export const BookingRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingRelationFilter> =
  z
    .object({
      is: z.lazy(() => BookingWhereInputSchema).optional(),
      isNot: z.lazy(() => BookingWhereInputSchema).optional()
    })
    .strict()

export const BookingTrevelerCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTrevelerAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTrevelerMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTrevelerMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTrevelerSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingProductRoomWhereInputSchema).optional(),
      some: z.lazy(() => BookingProductRoomWhereInputSchema).optional(),
      none: z.lazy(() => BookingProductRoomWhereInputSchema).optional()
    })
    .strict()

export const EnumProductTypeFilterSchema: z.ZodType<PrismaClient.Prisma.EnumProductTypeFilter> =
  z
    .object({
      equals: z.lazy(() => ProductTypeSchema).optional(),
      in: z
        .lazy(() => ProductTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => NestedEnumProductTypeFilterSchema)
        ])
        .optional()
    })
    .strict()

export const EnumHotelMealPlanNullableFilterSchema: z.ZodType<PrismaClient.Prisma.EnumHotelMealPlanNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => HotelMealPlanSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => HotelMealPlanSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(() => NestedEnumHotelMealPlanNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductTenantIdAccountIdBookingIdCompoundUniqueInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductTenantIdAccountIdBookingIdCompoundUniqueInput> =
  z
    .object({
      tenantId: z.bigint(),
      accountId: z.bigint(),
      bookingId: z.bigint()
    })
    .strict()

export const BookingProductCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      productType: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      productType: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      productType: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumProductTypeWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumProductTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => ProductTypeSchema).optional(),
      in: z
        .lazy(() => ProductTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => NestedEnumProductTypeWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumProductTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumProductTypeFilterSchema).optional()
    })
    .strict()

export const EnumHotelMealPlanNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumHotelMealPlanNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => HotelMealPlanSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => HotelMealPlanSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NestedEnumHotelMealPlanNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumHotelMealPlanNullableFilterSchema)
        .optional(),
      _max: z.lazy(() => NestedEnumHotelMealPlanNullableFilterSchema).optional()
    })
    .strict()

export const BookingProductRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingProductRelationFilter> =
  z
    .object({
      is: z.lazy(() => BookingProductWhereInputSchema).optional(),
      isNot: z.lazy(() => BookingProductWhereInputSchema).optional()
    })
    .strict()

export const EnumRoomCategoryFilterSchema: z.ZodType<PrismaClient.Prisma.EnumRoomCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const IntFilterSchema: z.ZodType<PrismaClient.Prisma.IntFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
  })
  .strict()

export const IntNullableListFilterSchema: z.ZodType<PrismaClient.Prisma.IntNullableListFilter> =
  z
    .object({
      equals: z.number().array().optional().nullable(),
      has: z.number().optional().nullable(),
      hasEvery: z.number().array().optional(),
      hasSome: z.number().array().optional(),
      isEmpty: z.boolean().optional()
    })
    .strict()

export const BookingProductRoomCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      Price: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      Price: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      Price: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      Price: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      updatedAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      Price: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumRoomCategoryWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumRoomCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional()
    })
    .strict()

export const IntWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.IntWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedIntFilterSchema).optional(),
      _max: z.lazy(() => NestedIntFilterSchema).optional()
    })
    .strict()

export const AccountCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const CustomerCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutTenantInputSchema),
          z.lazy(() => CustomerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CustomerCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => CustomerCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => CustomerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const CustomerUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutTenantInputSchema),
          z.lazy(() => CustomerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CustomerCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => CustomerCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => CustomerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BigIntFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.BigIntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.bigint().optional(),
      increment: z.bigint().optional(),
      decrement: z.bigint().optional(),
      multiply: z.bigint().optional(),
      divide: z.bigint().optional()
    })
    .strict()

export const AccountUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const CustomerUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutTenantInputSchema),
          z.lazy(() => CustomerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CustomerCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => CustomerCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => CustomerUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => CustomerUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => CustomerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => CustomerUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => CustomerUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => CustomerUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => CustomerUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => CustomerScalarWhereInputSchema),
          z.lazy(() => CustomerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTrevelerUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereInputSchema),
          z.lazy(() => BookingTrevelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const StringFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.StringFieldUpdateOperationsInput> =
  z
    .object({
      set: z.string().optional()
    })
    .strict()

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableStringFieldUpdateOperationsInput> =
  z
    .object({
      set: z.string().optional().nullable()
    })
    .strict()

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableBoolFieldUpdateOperationsInput> =
  z
    .object({
      set: z.boolean().optional().nullable()
    })
    .strict()

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableDateTimeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.date().optional().nullable()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutTenantInputSchema),
          z.lazy(() => CustomerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CustomerCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => CustomerCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => CustomerUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => CustomerUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => CustomerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => CustomerUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => CustomerUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => CustomerUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => CustomerUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => CustomerScalarWhereInputSchema),
          z.lazy(() => CustomerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTrevelerUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereInputSchema),
          z.lazy(() => BookingTrevelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutAccountsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutAccountsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const CustomerCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutAccountInputSchema),
          z.lazy(() => CustomerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CustomerCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => CustomerCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => CustomerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedManyWithoutSupplierInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutSupplierInputSchema),
          z.lazy(() => BookingProductCreateWithoutSupplierInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutSupplierInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutSupplierInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManySupplierInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const CustomerUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutAccountInputSchema),
          z.lazy(() => CustomerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CustomerCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => CustomerCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => CustomerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateNestedManyWithoutSupplierInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutSupplierInputSchema),
          z.lazy(() => BookingProductCreateWithoutSupplierInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutSupplierInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutSupplierInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManySupplierInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutAccountsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutAccountsInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutAccountsInputSchema).optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutAccountsInputSchema)
        ])
        .optional()
    })
    .strict()

export const CustomerUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutAccountInputSchema),
          z.lazy(() => CustomerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CustomerCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => CustomerCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => CustomerUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => CustomerUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => CustomerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => CustomerUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => CustomerUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => CustomerUpdateManyWithWhereWithoutAccountInputSchema),
          z
            .lazy(() => CustomerUpdateManyWithWhereWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => CustomerScalarWhereInputSchema),
          z.lazy(() => CustomerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutSupplierNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithoutSupplierNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutSupplierInputSchema),
          z.lazy(() => BookingProductCreateWithoutSupplierInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutSupplierInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutSupplierInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutSupplierInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductUpsertWithWhereUniqueWithoutSupplierInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManySupplierInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutSupplierInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductUpdateWithWhereUniqueWithoutSupplierInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutSupplierInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutSupplierInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTrevelerUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTrevelerUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTrevelerUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereInputSchema),
          z.lazy(() => BookingTrevelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const CustomerUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutAccountInputSchema),
          z.lazy(() => CustomerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CustomerCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => CustomerCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => CustomerUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => CustomerUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => CustomerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => CustomerWhereUniqueInputSchema),
          z.lazy(() => CustomerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => CustomerUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => CustomerUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => CustomerUpdateManyWithWhereWithoutAccountInputSchema),
          z
            .lazy(() => CustomerUpdateManyWithWhereWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => CustomerScalarWhereInputSchema),
          z.lazy(() => CustomerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutSupplierNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutSupplierNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutSupplierInputSchema),
          z.lazy(() => BookingProductCreateWithoutSupplierInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutSupplierInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutSupplierInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutSupplierInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductUpsertWithWhereUniqueWithoutSupplierInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManySupplierInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutSupplierInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductUpdateWithWhereUniqueWithoutSupplierInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutSupplierInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutSupplierInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTrevelerUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTrevelerUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTrevelerUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereInputSchema),
          z.lazy(() => BookingTrevelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutUsersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutUsersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutUsersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutUsersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutUsersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutUsersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutUsersInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutUsersInputSchema).optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneRequiredWithoutUsersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutUsersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutUsersInputSchema)
        .optional(),
      upsert: z.lazy(() => AccountUpsertWithoutUsersInputSchema).optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutUsersInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutUsersInputSchema)
        ])
        .optional()
    })
    .strict()

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.DateTimeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.date().optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutCustomersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutCustomersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutCustomersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutCustomersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutCustomersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutCustomersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutCustomersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutCustomersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const UserCreateNestedOneWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateNestedOneWithoutCustomersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutCustomersInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutCustomersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutCustomersInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutCustomersNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutCustomersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutCustomersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutCustomersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutCustomersInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutCustomersInputSchema).optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutCustomersInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutCustomersInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutCustomersNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneRequiredWithoutCustomersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutCustomersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutCustomersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutCustomersInputSchema)
        .optional(),
      upsert: z.lazy(() => AccountUpsertWithoutCustomersInputSchema).optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutCustomersInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutCustomersInputSchema)
        ])
        .optional()
    })
    .strict()

export const UserUpdateOneRequiredWithoutCustomersNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateOneRequiredWithoutCustomersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutCustomersInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutCustomersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutCustomersInputSchema)
        .optional(),
      upsert: z.lazy(() => UserUpsertWithoutCustomersInputSchema).optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithoutCustomersInputSchema),
          z.lazy(() => UserUncheckedUpdateWithoutCustomersInputSchema)
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutBookingsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutBookingsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const CustomerCreateNestedOneWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateNestedOneWithoutBookingsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutBookingsInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CustomerCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
    })
    .strict()

export const UserCreateNestedOneWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateNestedOneWithoutBookingsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutBookingsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerCreateNestedManyWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUncheckedCreateNestedManyWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutBookingsNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutBookingsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutBookingsInputSchema).optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutBookingsNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneRequiredWithoutBookingsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      upsert: z.lazy(() => AccountUpsertWithoutBookingsInputSchema).optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingsInputSchema)
        ])
        .optional()
    })
    .strict()

export const CustomerUpdateOneWithoutBookingsNestedInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateOneWithoutBookingsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CustomerCreateWithoutBookingsInputSchema),
          z.lazy(() => CustomerUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CustomerCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      upsert: z.lazy(() => CustomerUpsertWithoutBookingsInputSchema).optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => CustomerUpdateWithoutBookingsInputSchema),
          z.lazy(() => CustomerUncheckedUpdateWithoutBookingsInputSchema)
        ])
        .optional()
    })
    .strict()

export const UserUpdateOneRequiredWithoutBookingsNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateOneRequiredWithoutBookingsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutBookingsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      upsert: z.lazy(() => UserUpsertWithoutBookingsInputSchema).optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithoutBookingsInputSchema),
          z.lazy(() => UserUncheckedUpdateWithoutBookingsInputSchema)
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutBookingNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUpdateManyWithoutBookingNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTrevelerUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTrevelerUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTrevelerUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereInputSchema),
          z.lazy(() => BookingTrevelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableIntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional().nullable(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional()
    })
    .strict()

export const NullableDecimalFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableDecimalFieldUpdateOperationsInput> =
  z
    .object({
      set: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      increment: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      decrement: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      multiply: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      divide: z.instanceof(PrismaClient.Prisma.Decimal).optional()
    })
    .strict()

export const NullableEnumBookingStatusFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableEnumBookingStatusFieldUpdateOperationsInput> =
  z
    .object({
      set: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable()
    })
    .strict()

export const NullableBigIntFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableBigIntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.bigint().optional().nullable(),
      increment: z.bigint().optional(),
      decrement: z.bigint().optional(),
      multiply: z.bigint().optional(),
      divide: z.bigint().optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTrevelerUncheckedUpdateManyWithoutBookingNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTrevelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTrevelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTrevelerUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTrevelerUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTrevelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
          z.lazy(() => BookingTrevelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTrevelerUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTrevelerUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingTrevelerUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereInputSchema),
          z.lazy(() => BookingTrevelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutBookingTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutBookingTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingCreateNestedOneWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedOneWithoutTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional()
    })
    .strict()

export const UserCreateNestedOneWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateNestedOneWithoutBookingTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutBookingTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => TenantUpsertWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneRequiredWithoutBookingTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const BookingUpdateOneRequiredWithoutTravelersNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateOneRequiredWithoutTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutTravelersInputSchema)
        .optional(),
      upsert: z.lazy(() => BookingUpsertWithoutTravelersInputSchema).optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedUpdateWithoutTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const UserUpdateOneRequiredWithoutBookingTravelersNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateOneRequiredWithoutBookingTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => UserUpsertWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithoutBookingTravelersInputSchema),
          z.lazy(() => UserUncheckedUpdateWithoutBookingTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutBookingProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutBookingProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingCreateNestedOneWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedOneWithoutProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutProductsInputSchema)
        .optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional()
    })
    .strict()

export const UserCreateNestedOneWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateNestedOneWithoutBookingProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutBookingProductsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingProductsSuppliedInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutBookingProductsSuppliedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingProductsSuppliedInputSchema),
          z.lazy(
            () =>
              AccountUncheckedCreateWithoutBookingProductsSuppliedInputSchema
          )
        ])
        .optional(),
      connectOrCreate: z
        .lazy(
          () => AccountCreateOrConnectWithoutBookingProductsSuppliedInputSchema
        )
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateNestedManyWithoutBookingProductInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutBookingProductsNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutBookingProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => TenantUpsertWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutBookingProductsNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneRequiredWithoutBookingProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const BookingUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateOneRequiredWithoutProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutProductsInputSchema)
        .optional(),
      upsert: z.lazy(() => BookingUpsertWithoutProductsInputSchema).optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedUpdateWithoutProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const UserUpdateOneRequiredWithoutBookingProductsNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateOneRequiredWithoutBookingProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutBookingProductsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => UserUpsertWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithoutBookingProductsInputSchema),
          z.lazy(() => UserUncheckedUpdateWithoutBookingProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneWithoutBookingProductsSuppliedNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneWithoutBookingProductsSuppliedNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingProductsSuppliedInputSchema),
          z.lazy(
            () =>
              AccountUncheckedCreateWithoutBookingProductsSuppliedInputSchema
          )
        ])
        .optional(),
      connectOrCreate: z
        .lazy(
          () => AccountCreateOrConnectWithoutBookingProductsSuppliedInputSchema
        )
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutBookingProductsSuppliedInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingProductsSuppliedInputSchema),
          z.lazy(
            () =>
              AccountUncheckedUpdateWithoutBookingProductsSuppliedInputSchema
          )
        ])
        .optional()
    })
    .strict()

export const BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateManyWithoutBookingProductNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const EnumProductTypeFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.EnumProductTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => ProductTypeSchema).optional()
    })
    .strict()

export const NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableEnumHotelMealPlanFieldUpdateOperationsInput> =
  z
    .object({
      set: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedOneWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedOneWithoutRoomsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingProductCreateOrConnectWithoutRoomsInputSchema)
        .optional(),
      connect: z.lazy(() => BookingProductWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingProductRoomCreateageOfMinorsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateageOfMinorsInput> =
  z
    .object({
      set: z.number().array()
    })
    .strict()

export const BookingProductUpdateOneRequiredWithoutRoomsNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateOneRequiredWithoutRoomsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingProductCreateOrConnectWithoutRoomsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => BookingProductUpsertWithoutRoomsInputSchema)
        .optional(),
      connect: z.lazy(() => BookingProductWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingProductUpdateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedUpdateWithoutRoomsInputSchema)
        ])
        .optional()
    })
    .strict()

export const EnumRoomCategoryFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.EnumRoomCategoryFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => RoomCategorySchema).optional()
    })
    .strict()

export const IntFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.IntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional()
    })
    .strict()

export const BookingProductRoomUpdateageOfMinorsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateageOfMinorsInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional()
    })
    .strict()

export const NestedBigIntFilterSchema: z.ZodType<PrismaClient.Prisma.NestedBigIntFilter> =
  z
    .object({
      equals: z.bigint().optional(),
      in: z.bigint().array().optional(),
      notIn: z.bigint().array().optional(),
      lt: z.bigint().optional(),
      lte: z.bigint().optional(),
      gt: z.bigint().optional(),
      gte: z.bigint().optional(),
      not: z
        .union([z.bigint(), z.lazy(() => NestedBigIntFilterSchema)])
        .optional()
    })
    .strict()

export const NestedStringFilterSchema: z.ZodType<PrismaClient.Prisma.NestedStringFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringFilterSchema)])
        .optional()
    })
    .strict()

export const NestedStringNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedStringNullableFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedBoolNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedBoolNullableFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedDateTimeNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDateTimeNullableFilter> =
  z
    .object({
      equals: z.date().optional().nullable(),
      in: z.date().array().optional().nullable(),
      notIn: z.date().array().optional().nullable(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([z.date(), z.lazy(() => NestedDateTimeNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedBigIntWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedBigIntWithAggregatesFilter> =
  z
    .object({
      equals: z.bigint().optional(),
      in: z.bigint().array().optional(),
      notIn: z.bigint().array().optional(),
      lt: z.bigint().optional(),
      lte: z.bigint().optional(),
      gt: z.bigint().optional(),
      gte: z.bigint().optional(),
      not: z
        .union([
          z.bigint(),
          z.lazy(() => NestedBigIntWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
      _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
      _max: z.lazy(() => NestedBigIntFilterSchema).optional()
    })
    .strict()

export const NestedIntFilterSchema: z.ZodType<PrismaClient.Prisma.NestedIntFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
    })
    .strict()

export const NestedFloatFilterSchema: z.ZodType<PrismaClient.Prisma.NestedFloatFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedFloatFilterSchema)])
        .optional()
    })
    .strict()

export const NestedStringWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedStringWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedStringFilterSchema).optional(),
      _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedStringNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const NestedIntNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedIntNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedBoolNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([
          z.boolean(),
          z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
    })
    .strict()

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDateTimeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.date().optional().nullable(),
      in: z.date().array().optional().nullable(),
      notIn: z.date().array().optional().nullable(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([
          z.date(),
          z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
    })
    .strict()

export const NestedDateTimeFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDateTimeFilter> =
  z
    .object({
      equals: z.date().optional(),
      in: z.date().array().optional(),
      notIn: z.date().array().optional(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([z.date(), z.lazy(() => NestedDateTimeFilterSchema)])
        .optional()
    })
    .strict()

export const NestedJsonFilterSchema: z.ZodType<PrismaClient.Prisma.NestedJsonFilter> =
  z
    .object({
      equals: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      path: z.string().array().optional(),
      string_contains: z.string().optional(),
      string_starts_with: z.string().optional(),
      string_ends_with: z.string().optional(),
      array_contains: InputJsonValue.optional().nullable(),
      array_starts_with: InputJsonValue.optional().nullable(),
      array_ends_with: InputJsonValue.optional().nullable(),
      lt: InputJsonValue.optional(),
      lte: InputJsonValue.optional(),
      gt: InputJsonValue.optional(),
      gte: InputJsonValue.optional(),
      not: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional()
    })
    .strict()

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDateTimeWithAggregatesFilter> =
  z
    .object({
      equals: z.date().optional(),
      in: z.date().array().optional(),
      notIn: z.date().array().optional(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([
          z.date(),
          z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
    })
    .strict()

export const NestedBigIntNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedBigIntNullableFilter> =
  z
    .object({
      equals: z.bigint().optional().nullable(),
      in: z.bigint().array().optional().nullable(),
      notIn: z.bigint().array().optional().nullable(),
      lt: z.bigint().optional(),
      lte: z.bigint().optional(),
      gt: z.bigint().optional(),
      gte: z.bigint().optional(),
      not: z
        .union([z.bigint(), z.lazy(() => NestedBigIntNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedDecimalNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDecimalNullableFilter> =
  z
    .object({
      equals: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      in: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      lt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      lte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      not: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NestedDecimalNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedEnumBookingStatusNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumBookingStatusNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => NestedEnumBookingStatusNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedBigIntNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedBigIntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.bigint().optional().nullable(),
      in: z.bigint().array().optional().nullable(),
      notIn: z.bigint().array().optional().nullable(),
      lt: z.bigint().optional(),
      lte: z.bigint().optional(),
      gt: z.bigint().optional(),
      gte: z.bigint().optional(),
      not: z
        .union([
          z.bigint(),
          z.lazy(() => NestedBigIntNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBigIntNullableFilterSchema).optional()
    })
    .strict()

export const NestedFloatNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedFloatNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedFloatNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedIntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
    })
    .strict()

export const NestedDecimalNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDecimalNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      in: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      lt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      lte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      not: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
    })
    .strict()

export const NestedEnumBookingStatusNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumBookingStatusNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NestedEnumBookingStatusNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumBookingStatusNullableFilterSchema)
        .optional(),
      _max: z.lazy(() => NestedEnumBookingStatusNullableFilterSchema).optional()
    })
    .strict()

export const NestedEnumProductTypeFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumProductTypeFilter> =
  z
    .object({
      equals: z.lazy(() => ProductTypeSchema).optional(),
      in: z
        .lazy(() => ProductTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => NestedEnumProductTypeFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedEnumHotelMealPlanNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumHotelMealPlanNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => HotelMealPlanSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => HotelMealPlanSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(() => NestedEnumHotelMealPlanNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedEnumProductTypeWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumProductTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => ProductTypeSchema).optional(),
      in: z
        .lazy(() => ProductTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => NestedEnumProductTypeWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumProductTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumProductTypeFilterSchema).optional()
    })
    .strict()

export const NestedEnumHotelMealPlanNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumHotelMealPlanNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => HotelMealPlanSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => HotelMealPlanSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NestedEnumHotelMealPlanNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumHotelMealPlanNullableFilterSchema)
        .optional(),
      _max: z.lazy(() => NestedEnumHotelMealPlanNullableFilterSchema).optional()
    })
    .strict()

export const NestedEnumRoomCategoryFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumRoomCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedEnumRoomCategoryWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumRoomCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional()
    })
    .strict()

export const NestedIntWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedIntWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedIntFilterSchema).optional(),
      _max: z.lazy(() => NestedIntFilterSchema).optional()
    })
    .strict()

export const AccountCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductCreateNestedManyWithoutSupplierInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedCreateNestedManyWithoutSupplierInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.AccountCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => AccountCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const UserCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      account: z.lazy(() => AccountCreateNestedOneWithoutUsersInputSchema),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      accountId: z.bigint(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.UserCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => UserCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const CustomerCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      account: z.lazy(() => AccountCreateNestedOneWithoutCustomersInputSchema),
      owner: z.lazy(() => UserCreateNestedOneWithoutCustomersInputSchema),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      prefix: z.string(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      sufix: z.string(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const CustomerUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      accountId: z.bigint(),
      ownerId: z.bigint(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      prefix: z.string(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      sufix: z.string(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const CustomerCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => CustomerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CustomerCreateWithoutTenantInputSchema),
        z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const CustomerCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => CustomerCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z
        .lazy(() => CustomerCreateNestedOneWithoutBookingsInputSchema)
        .optional(),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingsInputSchema),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      travelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      fullName: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      accountId: z.bigint(),
      customerId: z.bigint().optional().nullable(),
      ownerId: z.bigint(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      travelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      fullName: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingProductsInputSchema
      ),
      Booking: z.lazy(() => BookingCreateNestedOneWithoutProductsInputSchema),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingProductsInputSchema),
      supplier: z
        .lazy(
          () => AccountCreateNestedOneWithoutBookingProductsSuppliedInputSchema
        )
        .optional(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      accountId: z.bigint(),
      bookingId: z.bigint(),
      ownerId: z.bigint(),
      supplierId: z.bigint().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingTrevelerCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      Booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
      owner: z.lazy(
        () => UserCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingTrevelerUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.bigint().optional(),
      accountId: z.bigint(),
      bookingId: z.bigint(),
      ownerId: z.bigint(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingTrevelerCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema),
        z.lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTrevelerCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const AccountUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => AccountUpdateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateManyMutationInputSchema),
        z.lazy(() => AccountUncheckedUpdateManyWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const AccountScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.AccountScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => AccountScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      dobName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      taxId: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const UserUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => UserUpdateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateManyMutationInputSchema),
        z.lazy(() => UserUncheckedUpdateManyWithoutUsersInputSchema)
      ])
    })
    .strict()

export const UserScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.UserScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => UserScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      middleName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => CustomerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => CustomerUpdateWithoutTenantInputSchema),
        z.lazy(() => CustomerUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => CustomerCreateWithoutTenantInputSchema),
        z.lazy(() => CustomerUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const CustomerUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => CustomerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => CustomerUpdateWithoutTenantInputSchema),
        z.lazy(() => CustomerUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const CustomerUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => CustomerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => CustomerUpdateManyMutationInputSchema),
        z.lazy(() => CustomerUncheckedUpdateManyWithoutCustomersInputSchema)
      ])
    })
    .strict()

export const CustomerScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.CustomerScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CustomerScalarWhereInputSchema),
          z.lazy(() => CustomerScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => CustomerScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CustomerScalarWhereInputSchema),
          z.lazy(() => CustomerScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      prefix: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      middleName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      sufix: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateManyMutationInputSchema),
        z.lazy(() => BookingUncheckedUpdateManyWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const BookingScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      customerId: z
        .union([z.lazy(() => BigIntNullableFilterSchema), z.bigint()])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      fullName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      postalCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fromCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      travelDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adultsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      childrenCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      requestDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentTime: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => EnumBookingStatusNullableFilterSchema),
          z.lazy(() => BookingStatusSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema
        )
      ])
    })
    .strict()

export const BookingProductScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      bookingId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      supplierId: z
        .union([z.lazy(() => BigIntNullableFilterSchema), z.bigint()])
        .optional()
        .nullable(),
      productType: z
        .union([
          z.lazy(() => EnumProductTypeFilterSchema),
          z.lazy(() => ProductTypeSchema)
        ])
        .optional(),
      description: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      startDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      endDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      fromLocation: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => EnumHotelMealPlanNullableFilterSchema),
          z.lazy(() => HotelMealPlanSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTrevelerUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTrevelerUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingTrevelerUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTrevelerCreateWithoutTenantInputSchema),
        z.lazy(() => BookingTrevelerUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTrevelerUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingTrevelerUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTrevelerUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutBookingTravelersInputSchema
        )
      ])
    })
    .strict()

export const BookingTrevelerScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereInputSchema),
          z.lazy(() => BookingTrevelerScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTrevelerScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTrevelerScalarWhereInputSchema),
          z.lazy(() => BookingTrevelerScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      tenantId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      accountId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      bookingId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      passportExpireDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      email: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutAccountsInput> =
  z
    .object({
      id: z.bigint().optional(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantUncheckedCreateWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutAccountsInput> =
  z
    .object({
      id: z.bigint().optional(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantCreateOrConnectWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutAccountsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const CustomerCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateWithoutAccountInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutCustomersInputSchema),
      owner: z.lazy(() => UserCreateNestedOneWithoutCustomersInputSchema),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      prefix: z.string(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      sufix: z.string(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const CustomerUncheckedCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      ownerId: z.bigint(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      prefix: z.string(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      sufix: z.string(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const CustomerCreateOrConnectWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => CustomerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CustomerCreateWithoutAccountInputSchema),
        z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const CustomerCreateManyAccountInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => CustomerCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutAccountInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      customer: z
        .lazy(() => CustomerCreateNestedOneWithoutBookingsInputSchema)
        .optional(),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingsInputSchema),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      travelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      fullName: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingUncheckedCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      customerId: z.bigint().optional().nullable(),
      ownerId: z.bigint(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      travelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      fullName: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingCreateOrConnectWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingCreateManyAccountInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutAccountInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingProductsInputSchema
      ),
      Booking: z.lazy(() => BookingCreateNestedOneWithoutProductsInputSchema),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingProductsInputSchema),
      supplier: z
        .lazy(
          () => AccountCreateNestedOneWithoutBookingProductsSuppliedInputSchema
        )
        .optional(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      bookingId: z.bigint(),
      ownerId: z.bigint(),
      supplierId: z.bigint().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyAccountInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutSupplierInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingProductsInputSchema
      ),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingProductsInputSchema
      ),
      Booking: z.lazy(() => BookingCreateNestedOneWithoutProductsInputSchema),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingProductsInputSchema),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutSupplierInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      bookingId: z.bigint(),
      ownerId: z.bigint(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutSupplierInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutSupplierInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManySupplierInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateManySupplierInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManySupplierInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingTrevelerCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateWithoutAccountInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      Booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
      owner: z.lazy(
        () => UserCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingTrevelerUncheckedCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      bookingId: z.bigint(),
      ownerId: z.bigint(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingTrevelerCreateOrConnectWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema),
        z.lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerCreateManyAccountInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTrevelerCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutAccountsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutAccountsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutAccountsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutAccountsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => CustomerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => CustomerUpdateWithoutAccountInputSchema),
        z.lazy(() => CustomerUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => CustomerCreateWithoutAccountInputSchema),
        z.lazy(() => CustomerUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const CustomerUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => CustomerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => CustomerUpdateWithoutAccountInputSchema),
        z.lazy(() => CustomerUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const CustomerUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => CustomerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => CustomerUpdateManyMutationInputSchema),
        z.lazy(() => CustomerUncheckedUpdateManyWithoutCustomersInputSchema)
      ])
    })
    .strict()

export const BookingUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateManyMutationInputSchema),
        z.lazy(() => BookingUncheckedUpdateManyWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema
        )
      ])
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithWhereUniqueWithoutSupplierInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutSupplierInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutSupplierInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutSupplierInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutSupplierInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithWhereUniqueWithoutSupplierInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutSupplierInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutSupplierInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithWhereWithoutSupplierInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutBookingProductsSuppliedInputSchema
        )
      ])
    })
    .strict()

export const BookingTrevelerUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTrevelerUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingTrevelerUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTrevelerCreateWithoutAccountInputSchema),
        z.lazy(() => BookingTrevelerUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTrevelerUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingTrevelerUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTrevelerUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutBookingTravelersInputSchema
        )
      ])
    })
    .strict()

export const TenantCreateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutUsersInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantUncheckedCreateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutUsersInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantCreateOrConnectWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutUsersInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutUsersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductCreateNestedManyWithoutSupplierInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountUncheckedCreateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutUsersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedCreateNestedManyWithoutSupplierInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountCreateOrConnectWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutUsersInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutUsersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutUsersInputSchema)
      ])
    })
    .strict()

export const TenantUpsertWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutUsersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutUsersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantUncheckedUpdateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutUsersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUpsertWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutUsersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutUsersInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutUsersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutUsersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutUsersInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutUsersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductUpdateManyWithoutSupplierNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutUsersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutSupplierNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutCustomersInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantUncheckedCreateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutCustomersInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantCreateOrConnectWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutCustomersInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutCustomersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutCustomersInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutCustomersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductCreateNestedManyWithoutSupplierInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountUncheckedCreateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutCustomersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedCreateNestedManyWithoutSupplierInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountCreateOrConnectWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutCustomersInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutCustomersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutCustomersInputSchema)
      ])
    })
    .strict()

export const UserCreateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateWithoutCustomersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutUsersInputSchema),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateWithoutCustomersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateOrConnectWithoutCustomersInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutCustomersInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutCustomersInputSchema)
      ])
    })
    .strict()

export const TenantUpsertWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutCustomersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutCustomersInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutCustomersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutCustomersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutCustomersInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutCustomersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutCustomersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUpsertWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutCustomersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutCustomersInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutCustomersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutCustomersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutCustomersInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutCustomersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductUpdateManyWithoutSupplierNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutCustomersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutSupplierNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUpsertWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.UserUpsertWithoutCustomersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => UserUpdateWithoutCustomersInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutCustomersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutCustomersInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutCustomersInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithoutCustomersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateWithoutCustomersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutBookingsInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutBookingsInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutBookingsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutBookingsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductCreateNestedManyWithoutSupplierInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutBookingsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedCreateNestedManyWithoutSupplierInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutBookingsInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const CustomerCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateWithoutBookingsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutCustomersInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutCustomersInputSchema),
      owner: z.lazy(() => UserCreateNestedOneWithoutCustomersInputSchema),
      prefix: z.string(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      sufix: z.string(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const CustomerUncheckedCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedCreateWithoutBookingsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      ownerId: z.bigint(),
      prefix: z.string(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      sufix: z.string(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const CustomerCreateOrConnectWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.CustomerCreateOrConnectWithoutBookingsInput> =
  z
    .object({
      where: z.lazy(() => CustomerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CustomerCreateWithoutBookingsInputSchema),
        z.lazy(() => CustomerUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const UserCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateWithoutBookingsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutUsersInputSchema),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateWithoutBookingsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateOrConnectWithoutBookingsInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutBookingsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutBookingInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingProductsInputSchema
      ),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingProductsInputSchema
      ),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingProductsInputSchema),
      supplier: z
        .lazy(
          () => AccountCreateNestedOneWithoutBookingProductsSuppliedInputSchema
        )
        .optional(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutBookingInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      ownerId: z.bigint(),
      supplierId: z.bigint().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyBookingInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateManyBookingInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyBookingInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingTrevelerCreateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateWithoutBookingInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      owner: z.lazy(
        () => UserCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingTrevelerUncheckedCreateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedCreateWithoutBookingInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      ownerId: z.bigint(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingTrevelerCreateOrConnectWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateOrConnectWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema),
        z.lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerCreateManyBookingInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerCreateManyBookingInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTrevelerCreateManyBookingInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutBookingsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUpsertWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutBookingsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductUpdateManyWithoutSupplierNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutSupplierNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerUpsertWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpsertWithoutBookingsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => CustomerUpdateWithoutBookingsInputSchema),
        z.lazy(() => CustomerUncheckedUpdateWithoutBookingsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => CustomerCreateWithoutBookingsInputSchema),
        z.lazy(() => CustomerUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const CustomerUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutCustomersNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutCustomersNestedInputSchema)
        .optional(),
      owner: z
        .lazy(() => UserUpdateOneRequiredWithoutCustomersNestedInputSchema)
        .optional(),
      prefix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      sufix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerUncheckedUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      prefix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      sufix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUpsertWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.UserUpsertWithoutBookingsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => UserUpdateWithoutBookingsInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutBookingsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutBookingsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutBookingInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithWhereWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingProductUncheckedUpdateManyWithoutProductsInputSchema
        )
      ])
    })
    .strict()

export const BookingTrevelerUpsertWithWhereUniqueWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpsertWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTrevelerUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingTrevelerUncheckedUpdateWithoutBookingInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTrevelerCreateWithoutBookingInputSchema),
        z.lazy(() => BookingTrevelerUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerUpdateWithWhereUniqueWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTrevelerUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingTrevelerUncheckedUpdateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTrevelerUpdateManyWithWhereWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateManyWithWhereWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTrevelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTrevelerUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTravelersInputSchema
        )
      ])
    })
    .strict()

export const TenantCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutBookingTravelersInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductCreateNestedManyWithoutSupplierInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedCreateNestedManyWithoutSupplierInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutBookingTravelersInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const BookingCreateWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutTravelersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z
        .lazy(() => CustomerCreateNestedOneWithoutBookingsInputSchema)
        .optional(),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingsInputSchema),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      fullName: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingUncheckedCreateWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutTravelersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      customerId: z.bigint().optional().nullable(),
      ownerId: z.bigint(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      fullName: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingCreateOrConnectWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutTravelersInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
      ])
    })
    .strict()

export const UserCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutUsersInputSchema),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateOrConnectWithoutBookingTravelersInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const TenantUpsertWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutBookingTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUpsertWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutBookingTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductUpdateManyWithoutSupplierNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutSupplierNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUpsertWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithoutTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingUpdateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutTravelersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => CustomerUpdateOneWithoutBookingsNestedInputSchema)
        .optional(),
      owner: z
        .lazy(() => UserUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      fullName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUncheckedUpdateWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutTravelersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerId: z
        .union([
          z.bigint(),
          z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      fullName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUpsertWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.UserUpsertWithoutBookingTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => UserUpdateWithoutBookingTravelersInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutBookingTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.bigint().optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      brandUrl: z.string().optional().nullable(),
      ownerUserId: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutBookingProductsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductCreateNestedManyWithoutSupplierInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedCreateNestedManyWithoutSupplierInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutBookingProductsInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const BookingCreateWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutProductsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z
        .lazy(() => CustomerCreateNestedOneWithoutBookingsInputSchema)
        .optional(),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingsInputSchema),
      travelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      fullName: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingUncheckedCreateWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutProductsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      customerId: z.bigint().optional().nullable(),
      ownerId: z.bigint(),
      travelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      fullName: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingCreateOrConnectWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutProductsInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
      ])
    })
    .strict()

export const UserCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutUsersInputSchema),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      firstName: z.string(),
      middleName: z.string(),
      lastName: z.string(),
      email: z.string(),
      mobilePhone: z.string().optional().nullable(),
      adresses: z.union([
        z.lazy(() => JsonNullValueInputSchema),
        InputJsonValue
      ]),
      gender: z.string(),
      birthDate: z.date(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateOrConnectWithoutBookingProductsInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutBookingProductsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingProductsSuppliedInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutBookingProductsSuppliedInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingProductsSuppliedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutBookingProductsSuppliedInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      email: z.string(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingProductsSuppliedInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutBookingProductsSuppliedInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingProductsSuppliedInputSchema),
        z.lazy(
          () => AccountUncheckedCreateWithoutBookingProductsSuppliedInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomCreateWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateWithoutBookingProductInput> =
  z
    .object({
      id: z.bigint().optional(),
      category: z.lazy(() => RoomCategorySchema),
      adultsCount: z.number(),
      minorsCount: z.number(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      Price: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUncheckedCreateWithoutBookingProductInput> =
  z
    .object({
      id: z.bigint().optional(),
      category: z.lazy(() => RoomCategorySchema),
      adultsCount: z.number(),
      minorsCount: z.number(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      Price: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateOrConnectWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductRoomCreateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomCreateManyBookingProductInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateManyBookingProductInputEnvelope> =
  z
    .object({
      data: z
        .lazy(() => BookingProductRoomCreateManyBookingProductInputSchema)
        .array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutBookingProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brandUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerUserId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUpsertWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutBookingProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductUpdateManyWithoutSupplierNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutSupplierNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUpsertWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithoutProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingUpdateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutProductsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => CustomerUpdateOneWithoutBookingsNestedInputSchema)
        .optional(),
      owner: z
        .lazy(() => UserUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      travelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      fullName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUncheckedUpdateWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutProductsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerId: z
        .union([
          z.bigint(),
          z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      travelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      fullName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUpsertWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.UserUpsertWithoutBookingProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => UserUpdateWithoutBookingProductsInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutBookingProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutBookingProductsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUpsertWithoutBookingProductsSuppliedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutBookingProductsSuppliedInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingProductsSuppliedInputSchema),
        z.lazy(
          () => AccountUncheckedUpdateWithoutBookingProductsSuppliedInputSchema
        )
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingProductsSuppliedInputSchema),
        z.lazy(
          () => AccountUncheckedCreateWithoutBookingProductsSuppliedInputSchema
        )
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingProductsSuppliedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutBookingProductsSuppliedInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingProductsSuppliedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutBookingProductsSuppliedInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductRoomUpdateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema
        )
      ]),
      create: z.union([
        z.lazy(() => BookingProductRoomCreateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductRoomUpdateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateManyWithWhereWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductRoomUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingProductRoomUncheckedUpdateManyWithoutRoomsInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => BigIntFilterSchema), z.bigint()]).optional(),
      bookingProductId: z
        .union([z.lazy(() => BigIntFilterSchema), z.bigint()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      Price: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      updatedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductCreateWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutRoomsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingProductsInputSchema
      ),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingProductsInputSchema
      ),
      Booking: z.lazy(() => BookingCreateNestedOneWithoutProductsInputSchema),
      owner: z.lazy(() => UserCreateNestedOneWithoutBookingProductsInputSchema),
      supplier: z
        .lazy(
          () => AccountCreateNestedOneWithoutBookingProductsSuppliedInputSchema
        )
        .optional(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutRoomsInput> =
  z
    .object({
      id: z.bigint().optional(),
      tenantId: z.bigint(),
      accountId: z.bigint(),
      bookingId: z.bigint(),
      ownerId: z.bigint(),
      supplierId: z.bigint().optional().nullable(),
      productType: z.lazy(() => ProductTypeSchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z
        .lazy(() => HotelMealPlanSchema)
        .optional()
        .nullable(),
      isActive: z.boolean().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      updatedAt: z.date().optional().nullable()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutRoomsInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
      ])
    })
    .strict()

export const BookingProductUpsertWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithoutRoomsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutRoomsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutRoomsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      Booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutProductsNestedInputSchema)
        .optional(),
      owner: z
        .lazy(
          () => UserUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      supplier: z
        .lazy(
          () => AccountUpdateOneWithoutBookingProductsSuppliedNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutRoomsInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      supplierId: z
        .union([
          z.bigint(),
          z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountCreateManyTenantInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.AccountCreateManyTenantInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    name: z.string(),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const UserCreateManyTenantInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.UserCreateManyTenantInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    accountId: z.bigint(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    email: z.string().email(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const CustomerCreateManyTenantInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerCreateManyTenantInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    accountId: z.bigint(),
    ownerId: z.bigint(),
    prefix: z.string(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    sufix: z.string(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingCreateManyTenantInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingCreateManyTenantInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    accountId: z.bigint(),
    customerId: z.bigint().optional().nullable(),
    ownerId: z.bigint(),
    fullName: z.string().optional().nullable(),
    email: z.string().email().optional().nullable(),
    phone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().optional().nullable(),
    childrenCount: z.number().optional().nullable(),
    seniorsCount: z.number().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductCreateManyTenantInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductCreateManyTenantInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    accountId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    supplierId: z.bigint().optional().nullable(),
    productType: z.lazy(() => ProductTypeSchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z
      .lazy(() => HotelMealPlanSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingTrevelerCreateManyTenantInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerCreateManyTenantInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    accountId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string().email().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const AccountUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProductsSupplied: z
        .lazy(() => BookingProductUpdateManyWithoutSupplierNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProductsSupplied: z
        .lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutSupplierNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutAccountsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.AccountUncheckedUpdateManyWithoutAccountsInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const UserUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutUsersNestedInputSchema)
        .optional(),
      customers: z
        .lazy(() => CustomerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customers: z
        .lazy(() => CustomerUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTrevelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.UserUncheckedUpdateManyWithoutUsersInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const CustomerUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutCustomersNestedInputSchema)
        .optional(),
      owner: z
        .lazy(() => UserUpdateOneRequiredWithoutCustomersNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      prefix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      sufix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      prefix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      sufix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerUncheckedUpdateManyWithoutCustomersInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerUncheckedUpdateManyWithoutCustomersInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    prefix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    middleName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    sufix: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => CustomerUpdateOneWithoutBookingsNestedInputSchema)
        .optional(),
      owner: z
        .lazy(() => UserUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      travelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      fullName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerId: z
        .union([
          z.bigint(),
          z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      travelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      fullName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutBookingsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingUncheckedUpdateManyWithoutBookingsInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    customerId: z
      .union([
        z.bigint(),
        z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    fullName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      Booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutProductsNestedInputSchema)
        .optional(),
      owner: z
        .lazy(
          () => UserUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      supplier: z
        .lazy(
          () => AccountUpdateOneWithoutBookingProductsSuppliedNestedInputSchema
        )
        .optional(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      supplierId: z
        .union([
          z.bigint(),
          z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutBookingProductsInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    bookingId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    supplierId: z
      .union([
        z.bigint(),
        z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productType: z
      .union([
        z.lazy(() => ProductTypeSchema),
        z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.lazy(() => HotelMealPlanSchema),
        z.lazy(() => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingTrevelerUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      Booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
        .optional(),
      owner: z
        .lazy(
          () => UserUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTrevelerUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTrevelerUncheckedUpdateManyWithoutBookingTravelersInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerUncheckedUpdateManyWithoutBookingTravelersInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    bookingId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const CustomerCreateManyAccountInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.CustomerCreateManyAccountInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    ownerId: z.bigint(),
    prefix: z.string(),
    firstName: z.string(),
    middleName: z.string(),
    lastName: z.string(),
    sufix: z.string(),
    email: z.string().email(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    adresses: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
    gender: z.string(),
    birthDate: z.date(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingCreateManyAccountInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingCreateManyAccountInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    customerId: z.bigint().optional().nullable(),
    ownerId: z.bigint(),
    fullName: z.string().optional().nullable(),
    email: z.string().email().optional().nullable(),
    phone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().optional().nullable(),
    childrenCount: z.number().optional().nullable(),
    seniorsCount: z.number().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductCreateManyAccountInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductCreateManyAccountInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    supplierId: z.bigint().optional().nullable(),
    productType: z.lazy(() => ProductTypeSchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z
      .lazy(() => HotelMealPlanSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductCreateManySupplierInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductCreateManySupplierInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    productType: z.lazy(() => ProductTypeSchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z
      .lazy(() => HotelMealPlanSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingTrevelerCreateManyAccountInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerCreateManyAccountInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    bookingId: z.bigint(),
    ownerId: z.bigint(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string().email().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const CustomerUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutCustomersNestedInputSchema)
        .optional(),
      owner: z
        .lazy(() => UserUpdateOneRequiredWithoutCustomersNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      prefix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      sufix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const CustomerUncheckedUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.CustomerUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      prefix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      middleName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      sufix: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => CustomerUpdateOneWithoutBookingsNestedInputSchema)
        .optional(),
      owner: z
        .lazy(() => UserUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      travelers: z
        .lazy(() => BookingTrevelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      fullName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUncheckedUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerId: z
        .union([
          z.bigint(),
          z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      travelers: z
        .lazy(
          () =>
            BookingTrevelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      fullName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      Booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutProductsNestedInputSchema)
        .optional(),
      owner: z
        .lazy(
          () => UserUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      supplier: z
        .lazy(
          () => AccountUpdateOneWithoutBookingProductsSuppliedNestedInputSchema
        )
        .optional(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      supplierId: z
        .union([
          z.bigint(),
          z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUpdateWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutSupplierInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      Booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutProductsNestedInputSchema)
        .optional(),
      owner: z
        .lazy(
          () => UserUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutSupplierInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutSupplierInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutBookingProductsSuppliedInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutBookingProductsSuppliedInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    bookingId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    productType: z
      .union([
        z.lazy(() => ProductTypeSchema),
        z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.lazy(() => HotelMealPlanSchema),
        z.lazy(() => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingTrevelerUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      Booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
        .optional(),
      owner: z
        .lazy(
          () => UserUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTrevelerUncheckedUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductCreateManyBookingInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductCreateManyBookingInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    ownerId: z.bigint(),
    supplierId: z.bigint().optional().nullable(),
    productType: z.lazy(() => ProductTypeSchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paidDate: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z
      .lazy(() => HotelMealPlanSchema)
      .optional()
      .nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingTrevelerCreateManyBookingInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerCreateManyBookingInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    tenantId: z.bigint(),
    accountId: z.bigint(),
    ownerId: z.bigint(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string().email().optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductUpdateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutBookingInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      owner: z
        .lazy(
          () => UserUpdateOneRequiredWithoutBookingProductsNestedInputSchema
        )
        .optional(),
      supplier: z
        .lazy(
          () => AccountUpdateOneWithoutBookingProductsSuppliedNestedInputSchema
        )
        .optional(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutBookingInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      supplierId: z
        .union([
          z.bigint(),
          z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional(),
      productType: z
        .union([
          z.lazy(() => ProductTypeSchema),
          z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => HotelMealPlanSchema),
          z.lazy(
            () => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutProductsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutProductsInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    supplierId: z
      .union([
        z.bigint(),
        z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productType: z
      .union([
        z.lazy(() => ProductTypeSchema),
        z.lazy(() => EnumProductTypeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.lazy(() => HotelMealPlanSchema),
        z.lazy(() => NullableEnumHotelMealPlanFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingTrevelerUpdateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUpdateWithoutBookingInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      owner: z
        .lazy(
          () => UserUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTrevelerUncheckedUpdateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerUncheckedUpdateWithoutBookingInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      tenantId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      accountId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      ownerId: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTrevelerUncheckedUpdateManyWithoutTravelersInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTrevelerUncheckedUpdateManyWithoutTravelersInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    ownerId: z
      .union([z.bigint(), z.lazy(() => BigIntFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

export const BookingProductRoomCreateManyBookingProductInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomCreateManyBookingProductInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.bigint().optional(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    isActive: z.boolean().optional().nullable()
    // omitted: createdAt: z.date().optional().nullable(),
    // omitted: updatedAt: z.date().optional().nullable(),
  })
  .strict()

export const BookingProductRoomUpdateWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateWithoutBookingProductInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      Price: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUncheckedUpdateWithoutBookingProductInput> =
  z
    .object({
      id: z
        .union([
          z.bigint(),
          z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      Price: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      updatedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateManyWithoutRoomsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUncheckedUpdateManyWithoutRoomsInput,
    'id' | 'createdAt' | 'updatedAt'
  >
> = z
  .object({
    // omitted: id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    Price: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
    // omitted: createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
    // omitted: updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  })
  .strict()

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const TenantFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindFirstArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: TenantScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const TenantFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindFirstOrThrowArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: TenantScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const TenantFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindManyArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: TenantScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const TenantAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.TenantAggregateArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const TenantGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.TenantGroupByArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithAggregationInputSchema.array(),
          TenantOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: TenantScalarFieldEnumSchema.array(),
      having: TenantScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const TenantFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindUniqueArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const TenantFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindUniqueOrThrowArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const AccountFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindFirstArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindFirstOrThrowArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindManyArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.AccountAggregateArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const AccountGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.AccountGroupByArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithAggregationInputSchema.array(),
          AccountOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: AccountScalarFieldEnumSchema.array(),
      having: AccountScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const AccountFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindUniqueArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema
    })
    .strict()

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindUniqueOrThrowArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema
    })
    .strict()

export const UserFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindFirstArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: UserScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const UserFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindFirstOrThrowArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: UserScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const UserFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindManyArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: UserScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const UserAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.UserAggregateArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const UserGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.UserGroupByArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithAggregationInputSchema.array(),
          UserOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: UserScalarFieldEnumSchema.array(),
      having: UserScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const UserFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindUniqueArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereUniqueInputSchema
    })
    .strict()

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindUniqueOrThrowArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereUniqueInputSchema
    })
    .strict()

export const CustomerFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerFindFirstArgs> =
  z
    .object({
      select: CustomerSelectSchema.optional(),
      include: CustomerIncludeSchema.optional(),
      where: CustomerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CustomerOrderByWithRelationInputSchema.array(),
          CustomerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: CustomerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: CustomerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const CustomerFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerFindFirstOrThrowArgs> =
  z
    .object({
      select: CustomerSelectSchema.optional(),
      include: CustomerIncludeSchema.optional(),
      where: CustomerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CustomerOrderByWithRelationInputSchema.array(),
          CustomerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: CustomerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: CustomerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const CustomerFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerFindManyArgs> =
  z
    .object({
      select: CustomerSelectSchema.optional(),
      include: CustomerIncludeSchema.optional(),
      where: CustomerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CustomerOrderByWithRelationInputSchema.array(),
          CustomerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: CustomerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: CustomerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const CustomerAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerAggregateArgs> =
  z
    .object({
      select: CustomerSelectSchema.optional(),
      include: CustomerIncludeSchema.optional(),
      where: CustomerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CustomerOrderByWithRelationInputSchema.array(),
          CustomerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: CustomerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const CustomerGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerGroupByArgs> =
  z
    .object({
      select: CustomerSelectSchema.optional(),
      include: CustomerIncludeSchema.optional(),
      where: CustomerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CustomerOrderByWithAggregationInputSchema.array(),
          CustomerOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: CustomerScalarFieldEnumSchema.array(),
      having: CustomerScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const CustomerFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerFindUniqueArgs> =
  z
    .object({
      select: CustomerSelectSchema.optional(),
      include: CustomerIncludeSchema.optional(),
      where: CustomerWhereUniqueInputSchema
    })
    .strict()

export const CustomerFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerFindUniqueOrThrowArgs> =
  z
    .object({
      select: CustomerSelectSchema.optional(),
      include: CustomerIncludeSchema.optional(),
      where: CustomerWhereUniqueInputSchema
    })
    .strict()

export const BookingFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindFirstArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindManyArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.BookingAggregateArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.BookingGroupByArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithAggregationInputSchema.array(),
          BookingOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingScalarFieldEnumSchema.array(),
      having: BookingScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindUniqueArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereUniqueInputSchema
    })
    .strict()

export const BookingFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereUniqueInputSchema
    })
    .strict()

export const BookingTrevelerFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerFindFirstArgs> =
  z
    .object({
      select: BookingTrevelerSelectSchema.optional(),
      include: BookingTrevelerIncludeSchema.optional(),
      where: BookingTrevelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTrevelerOrderByWithRelationInputSchema.array(),
          BookingTrevelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTrevelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTrevelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTrevelerFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingTrevelerSelectSchema.optional(),
      include: BookingTrevelerIncludeSchema.optional(),
      where: BookingTrevelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTrevelerOrderByWithRelationInputSchema.array(),
          BookingTrevelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTrevelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTrevelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTrevelerFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerFindManyArgs> =
  z
    .object({
      select: BookingTrevelerSelectSchema.optional(),
      include: BookingTrevelerIncludeSchema.optional(),
      where: BookingTrevelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTrevelerOrderByWithRelationInputSchema.array(),
          BookingTrevelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTrevelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTrevelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTrevelerAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerAggregateArgs> =
  z
    .object({
      select: BookingTrevelerSelectSchema.optional(),
      include: BookingTrevelerIncludeSchema.optional(),
      where: BookingTrevelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTrevelerOrderByWithRelationInputSchema.array(),
          BookingTrevelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTrevelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingTrevelerGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerGroupByArgs> =
  z
    .object({
      select: BookingTrevelerSelectSchema.optional(),
      include: BookingTrevelerIncludeSchema.optional(),
      where: BookingTrevelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTrevelerOrderByWithAggregationInputSchema.array(),
          BookingTrevelerOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingTrevelerScalarFieldEnumSchema.array(),
      having: BookingTrevelerScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingTrevelerFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerFindUniqueArgs> =
  z
    .object({
      select: BookingTrevelerSelectSchema.optional(),
      include: BookingTrevelerIncludeSchema.optional(),
      where: BookingTrevelerWhereUniqueInputSchema
    })
    .strict()

export const BookingTrevelerFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingTrevelerSelectSchema.optional(),
      include: BookingTrevelerIncludeSchema.optional(),
      where: BookingTrevelerWhereUniqueInputSchema
    })
    .strict()

export const BookingProductFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindFirstArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindManyArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductAggregateArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductGroupByArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithAggregationInputSchema.array(),
          BookingProductOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingProductScalarFieldEnumSchema.array(),
      having: BookingProductScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindUniqueArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindFirstArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindManyArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomAggregateArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductRoomGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomGroupByArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithAggregationInputSchema.array(),
          BookingProductRoomOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingProductRoomScalarFieldEnumSchema.array(),
      having: BookingProductRoomScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductRoomFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindUniqueArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const TenantCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.TenantCreateArgs, 'data'> & {
    data:
      | z.infer<typeof TenantCreateInputSchema>
      | z.infer<typeof TenantUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    data: z.union([TenantCreateInputSchema, TenantUncheckedCreateInputSchema])
  })
  .strict()

export const TenantUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.TenantUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof TenantCreateInputSchema>
      | z.infer<typeof TenantUncheckedCreateInputSchema>
    update:
      | z.infer<typeof TenantUpdateInputSchema>
      | z.infer<typeof TenantUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    where: TenantWhereUniqueInputSchema,
    create: z.union([
      TenantCreateInputSchema,
      TenantUncheckedCreateInputSchema
    ]),
    update: z.union([TenantUpdateInputSchema, TenantUncheckedUpdateInputSchema])
  })
  .strict()

export const TenantCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.TenantCreateManyArgs, 'data'> & {
    data: z.infer<typeof TenantCreateManyInputSchema>[]
  }
> = z
  .object({
    data: TenantCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const TenantDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.TenantDeleteArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const TenantUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.TenantUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof TenantUpdateInputSchema>
      | z.infer<typeof TenantUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    data: z.union([TenantUpdateInputSchema, TenantUncheckedUpdateInputSchema]),
    where: TenantWhereUniqueInputSchema
  })
  .strict()

export const TenantUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.TenantUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof TenantUpdateManyMutationInputSchema>
      | z.infer<typeof TenantUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      TenantUpdateManyMutationInputSchema,
      TenantUncheckedUpdateManyInputSchema
    ]),
    where: TenantWhereInputSchema.optional()
  })
  .strict()

export const TenantDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.TenantDeleteManyArgs> =
  z
    .object({
      where: TenantWhereInputSchema.optional()
    })
    .strict()

export const AccountCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountCreateArgs, 'data'> & {
    data:
      | z.infer<typeof AccountCreateInputSchema>
      | z.infer<typeof AccountUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    data: z.union([AccountCreateInputSchema, AccountUncheckedCreateInputSchema])
  })
  .strict()

export const AccountUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof AccountCreateInputSchema>
      | z.infer<typeof AccountUncheckedCreateInputSchema>
    update:
      | z.infer<typeof AccountUpdateInputSchema>
      | z.infer<typeof AccountUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    where: AccountWhereUniqueInputSchema,
    create: z.union([
      AccountCreateInputSchema,
      AccountUncheckedCreateInputSchema
    ]),
    update: z.union([
      AccountUpdateInputSchema,
      AccountUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const AccountCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountCreateManyArgs, 'data'> & {
    data: z.infer<typeof AccountCreateManyInputSchema>[]
  }
> = z
  .object({
    data: AccountCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const AccountDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.AccountDeleteArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema
    })
    .strict()

export const AccountUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof AccountUpdateInputSchema>
      | z.infer<typeof AccountUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    data: z.union([
      AccountUpdateInputSchema,
      AccountUncheckedUpdateInputSchema
    ]),
    where: AccountWhereUniqueInputSchema
  })
  .strict()

export const AccountUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof AccountUpdateManyMutationInputSchema>
      | z.infer<typeof AccountUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      AccountUpdateManyMutationInputSchema,
      AccountUncheckedUpdateManyInputSchema
    ]),
    where: AccountWhereInputSchema.optional()
  })
  .strict()

export const AccountDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.AccountDeleteManyArgs> =
  z
    .object({
      where: AccountWhereInputSchema.optional()
    })
    .strict()

export const UserCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserCreateArgs, 'data'> & {
    data:
      | z.infer<typeof UserCreateInputSchema>
      | z.infer<typeof UserUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    data: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema])
  })
  .strict()

export const UserUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof UserCreateInputSchema>
      | z.infer<typeof UserUncheckedCreateInputSchema>
    update:
      | z.infer<typeof UserUpdateInputSchema>
      | z.infer<typeof UserUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereUniqueInputSchema,
    create: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema]),
    update: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema])
  })
  .strict()

export const UserCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserCreateManyArgs, 'data'> & {
    data: z.infer<typeof UserCreateManyInputSchema>[]
  }
> = z
  .object({
    data: UserCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const UserDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.UserDeleteArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereUniqueInputSchema
    })
    .strict()

export const UserUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof UserUpdateInputSchema>
      | z.infer<typeof UserUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    data: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema]),
    where: UserWhereUniqueInputSchema
  })
  .strict()

export const UserUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof UserUpdateManyMutationInputSchema>
      | z.infer<typeof UserUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      UserUpdateManyMutationInputSchema,
      UserUncheckedUpdateManyInputSchema
    ]),
    where: UserWhereInputSchema.optional()
  })
  .strict()

export const UserDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.UserDeleteManyArgs> =
  z
    .object({
      where: UserWhereInputSchema.optional()
    })
    .strict()

export const CustomerCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.CustomerCreateArgs, 'data'> & {
    data:
      | z.infer<typeof CustomerCreateInputSchema>
      | z.infer<typeof CustomerUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: CustomerSelectSchema.optional(),
    include: CustomerIncludeSchema.optional(),
    data: z.union([
      CustomerCreateInputSchema,
      CustomerUncheckedCreateInputSchema
    ])
  })
  .strict()

export const CustomerUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.CustomerUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof CustomerCreateInputSchema>
      | z.infer<typeof CustomerUncheckedCreateInputSchema>
    update:
      | z.infer<typeof CustomerUpdateInputSchema>
      | z.infer<typeof CustomerUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: CustomerSelectSchema.optional(),
    include: CustomerIncludeSchema.optional(),
    where: CustomerWhereUniqueInputSchema,
    create: z.union([
      CustomerCreateInputSchema,
      CustomerUncheckedCreateInputSchema
    ]),
    update: z.union([
      CustomerUpdateInputSchema,
      CustomerUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const CustomerCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.CustomerCreateManyArgs, 'data'> & {
    data: z.infer<typeof CustomerCreateManyInputSchema>[]
  }
> = z
  .object({
    data: CustomerCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const CustomerDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerDeleteArgs> =
  z
    .object({
      select: CustomerSelectSchema.optional(),
      include: CustomerIncludeSchema.optional(),
      where: CustomerWhereUniqueInputSchema
    })
    .strict()

export const CustomerUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.CustomerUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof CustomerUpdateInputSchema>
      | z.infer<typeof CustomerUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: CustomerSelectSchema.optional(),
    include: CustomerIncludeSchema.optional(),
    data: z.union([
      CustomerUpdateInputSchema,
      CustomerUncheckedUpdateInputSchema
    ]),
    where: CustomerWhereUniqueInputSchema
  })
  .strict()

export const CustomerUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.CustomerUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof CustomerUpdateManyMutationInputSchema>
      | z.infer<typeof CustomerUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      CustomerUpdateManyMutationInputSchema,
      CustomerUncheckedUpdateManyInputSchema
    ]),
    where: CustomerWhereInputSchema.optional()
  })
  .strict()

export const CustomerDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.CustomerDeleteManyArgs> =
  z
    .object({
      where: CustomerWhereInputSchema.optional()
    })
    .strict()

export const BookingCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingCreateInputSchema>
      | z.infer<typeof BookingUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    data: z.union([BookingCreateInputSchema, BookingUncheckedCreateInputSchema])
  })
  .strict()

export const BookingUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingCreateInputSchema>
      | z.infer<typeof BookingUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingUpdateInputSchema>
      | z.infer<typeof BookingUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    where: BookingWhereUniqueInputSchema,
    create: z.union([
      BookingCreateInputSchema,
      BookingUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingUpdateInputSchema,
      BookingUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.BookingDeleteArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereUniqueInputSchema
    })
    .strict()

export const BookingUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingUpdateInputSchema>
      | z.infer<typeof BookingUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    data: z.union([
      BookingUpdateInputSchema,
      BookingUncheckedUpdateInputSchema
    ]),
    where: BookingWhereUniqueInputSchema
  })
  .strict()

export const BookingUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingUpdateManyMutationInputSchema>
      | z.infer<typeof BookingUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingUpdateManyMutationInputSchema,
      BookingUncheckedUpdateManyInputSchema
    ]),
    where: BookingWhereInputSchema.optional()
  })
  .strict()

export const BookingDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingDeleteManyArgs> =
  z
    .object({
      where: BookingWhereInputSchema.optional()
    })
    .strict()

export const BookingTrevelerCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTrevelerCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTrevelerCreateInputSchema>
      | z.infer<typeof BookingTrevelerUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingTrevelerSelectSchema.optional(),
    include: BookingTrevelerIncludeSchema.optional(),
    data: z.union([
      BookingTrevelerCreateInputSchema,
      BookingTrevelerUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingTrevelerUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTrevelerUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingTrevelerCreateInputSchema>
      | z.infer<typeof BookingTrevelerUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingTrevelerUpdateInputSchema>
      | z.infer<typeof BookingTrevelerUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingTrevelerSelectSchema.optional(),
    include: BookingTrevelerIncludeSchema.optional(),
    where: BookingTrevelerWhereUniqueInputSchema,
    create: z.union([
      BookingTrevelerCreateInputSchema,
      BookingTrevelerUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingTrevelerUpdateInputSchema,
      BookingTrevelerUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingTrevelerCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTrevelerCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingTrevelerCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingTrevelerCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingTrevelerDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerDeleteArgs> =
  z
    .object({
      select: BookingTrevelerSelectSchema.optional(),
      include: BookingTrevelerIncludeSchema.optional(),
      where: BookingTrevelerWhereUniqueInputSchema
    })
    .strict()

export const BookingTrevelerUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTrevelerUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTrevelerUpdateInputSchema>
      | z.infer<typeof BookingTrevelerUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingTrevelerSelectSchema.optional(),
    include: BookingTrevelerIncludeSchema.optional(),
    data: z.union([
      BookingTrevelerUpdateInputSchema,
      BookingTrevelerUncheckedUpdateInputSchema
    ]),
    where: BookingTrevelerWhereUniqueInputSchema
  })
  .strict()

export const BookingTrevelerUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTrevelerUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTrevelerUpdateManyMutationInputSchema>
      | z.infer<typeof BookingTrevelerUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingTrevelerUpdateManyMutationInputSchema,
      BookingTrevelerUncheckedUpdateManyInputSchema
    ]),
    where: BookingTrevelerWhereInputSchema.optional()
  })
  .strict()

export const BookingTrevelerDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTrevelerDeleteManyArgs> =
  z
    .object({
      where: BookingTrevelerWhereInputSchema.optional()
    })
    .strict()

export const BookingProductCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductCreateInputSchema>
      | z.infer<typeof BookingProductUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    data: z.union([
      BookingProductCreateInputSchema,
      BookingProductUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingProductUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingProductCreateInputSchema>
      | z.infer<typeof BookingProductUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingProductUpdateInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    where: BookingProductWhereUniqueInputSchema,
    create: z.union([
      BookingProductCreateInputSchema,
      BookingProductUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingProductUpdateInputSchema,
      BookingProductUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingProductCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingProductCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingProductCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingProductDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductDeleteArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductUpdateInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    data: z.union([
      BookingProductUpdateInputSchema,
      BookingProductUncheckedUpdateInputSchema
    ]),
    where: BookingProductWhereUniqueInputSchema
  })
  .strict()

export const BookingProductUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductUpdateManyMutationInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingProductUpdateManyMutationInputSchema,
      BookingProductUncheckedUpdateManyInputSchema
    ]),
    where: BookingProductWhereInputSchema.optional()
  })
  .strict()

export const BookingProductDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductDeleteManyArgs> =
  z
    .object({
      where: BookingProductWhereInputSchema.optional()
    })
    .strict()

export const BookingProductRoomCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomCreateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    data: z.union([
      BookingProductRoomCreateInputSchema,
      BookingProductRoomUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingProductRoomUpsertArgsSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUpsertArgs,
    'create' | 'update'
  > & {
    create:
      | z.infer<typeof BookingProductRoomCreateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingProductRoomUpdateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    where: BookingProductRoomWhereUniqueInputSchema,
    create: z.union([
      BookingProductRoomCreateInputSchema,
      BookingProductRoomUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingProductRoomUpdateInputSchema,
      BookingProductRoomUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingProductRoomCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingProductRoomCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingProductRoomCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingProductRoomDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomDeleteArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomUpdateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    data: z.union([
      BookingProductRoomUpdateInputSchema,
      BookingProductRoomUncheckedUpdateInputSchema
    ]),
    where: BookingProductRoomWhereUniqueInputSchema
  })
  .strict()

export const BookingProductRoomUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomUpdateManyMutationInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingProductRoomUpdateManyMutationInputSchema,
      BookingProductRoomUncheckedUpdateManyInputSchema
    ]),
    where: BookingProductRoomWhereInputSchema.optional()
  })
  .strict()

export const BookingProductRoomDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomDeleteManyArgs> =
  z
    .object({
      where: BookingProductRoomWhereInputSchema.optional()
    })
    .strict()
