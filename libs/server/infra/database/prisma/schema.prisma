generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                = "zod-prisma-types"
  output                  = "../../../../../libs/common/schemas/src"
  useInstanceOfForDecimal = true
}

enum BookingStatus {
  WAITING_FOR_SERVICE
  WAITING_FOR_CUSTOMER
  PAID
  QUOTE_SEND
  CANCELED
}

enum ProductType {
  ACCOMODATION
  FLIGHT
  CAR
  PACKAGE
  EXCURSION
  CRUISE
  TRANSFER
  TOUR
  TICKET
  EXCHANGE
  INSURANCE
  CONSULTANCY
  HOLIDAY_PROPERTY
  RECEPTIVE
}

enum RoomCategory {
  SUITE_MASTER
  SUITE_PREMIUM
  SUITE_JUNIOR
}

enum HotelMealPlan {
  BREAKFAST
  HALF_BOARD
  FULL_BOARD
  ALL_INCLUSIVE
  ALL_INCLUSIVE_PREMIUM
}

enum StayType {
  HOTEL
  RESORT
  LODGE
  HOUSE
  APARTMENT
}

model Tenant {
  /// @zod.custom.omit([model, input])
  id                BigInt            @id @default(autoincrement())
  accounts          Account[]         @relation("accounts")
  users             User[]            @relation("users")
  customers         Customer[]        @relation("customers")
  bookings          Booking[]         @relation("bookings")
  bookingProducts   BookingProduct[]  @relation("bookingProducts")
  bookingTravelers  BookingTreveler[] @relation("bookingTravelers")
  name              String            @db.VarChar(64)
  dobName           String?           @db.VarChar(64)
  taxId             String?           @db.VarChar(30)
  /// @zod.string.email()
  email             String            @db.VarChar(64)
  phone             String?           @db.VarChar(32)
  mobilePhone       String?           @db.VarChar(64)
  contactPrefix     String?           @db.VarChar(6)
  contactFirstName  String?           @db.VarChar(32)
  contactMiddleName String?           @db.VarChar(32)
  contactLastName   String?           @db.VarChar(32)
  brandUrl          String?
  ownerUserId       String?
  countryCode       String?           @db.VarChar(2)
  currencyCode      String?           @db.VarChar(3)
  locale            String?           @db.VarChar(6)
  isActive          Boolean?          @default(true)
  /// @zod.custom.omit([model, input])
  createdAt         DateTime?         @default(now())
  /// @zod.custom.omit([model, input])
  updatedAt         DateTime?         @updatedAt
}

model Account {
  /// @zod.custom.omit([model, input])
  id                      BigInt            @id @default(autoincrement())
  tenant                  Tenant            @relation(fields: [tenantId], references: [id], name: "accounts")
  tenantId                BigInt
  users                   User[]            @relation("users")
  customers               Customer[]        @relation("customers")
  bookings                Booking[]         @relation("bookings")
  bookingProducts         BookingProduct[]  @relation("bookingProducts")
  bookingProductsSupplied BookingProduct[]  @relation("bookingProductsSupplied")
  bookingTravelers        BookingTreveler[] @relation("bookingTravelers")
  name                    String            @db.VarChar(64)
  dobName                 String?           @db.VarChar(64)
  taxId                   String?           @db.VarChar(30)
  /// @zod.string.email()
  email                   String            @db.VarChar(64)
  countryCode             String?           @db.VarChar(2)
  currencyCode            String?           @db.VarChar(3)
  locale                  String?           @db.VarChar(6)
  isActive                Boolean?          @default(true)
  /// @zod.custom.omit([model, input])
  createdAt               DateTime?         @default(now())
  /// @zod.custom.omit([model, input])
  updatedAt               DateTime?         @updatedAt
}

model User {
  /// @zod.custom.omit([model, input])
  id               BigInt            @id @default(autoincrement())
  tenantId         BigInt
  tenant           Tenant            @relation(fields: [tenantId], references: [id], name: "users")
  accountId        BigInt
  account          Account           @relation(fields: [accountId], references: [id], name: "users")
  customers        Customer[]        @relation("customers")
  bookings         Booking[]         @relation("bookings")
  bookingProducts  BookingProduct[]  @relation("bookingProducts")
  bookingTravelers BookingTreveler[] @relation("bookingTravelers")
  firstName        String            @db.VarChar(32)
  middleName       String            @db.VarChar(32)
  lastName         String            @db.VarChar(32)
  /// @zod.string.email()
  email            String            @db.VarChar(64)
  mobilePhone      String?           @db.VarChar(32)
  adresses         Json
  gender           String            @db.VarChar(10)
  birthDate        DateTime
  /// @zod.custom.omit([model, input])
  createdAt        DateTime?         @default(now())
  /// @zod.custom.omit([model, input])
  updatedAt        DateTime?         @updatedAt

  @@unique([tenantId, accountId])
}

model Customer {
  /// @zod.custom.omit([model, input])
  id           BigInt    @id @default(autoincrement())
  tenantId     BigInt
  tenant       Tenant    @relation(fields: [tenantId], references: [id], name: "customers")
  accountId    BigInt
  account      Account   @relation(fields: [accountId], references: [id], name: "customers")
  ownerId      BigInt
  owner        User      @relation(fields: [ownerId], references: [id], name: "customers")
  bookings     Booking[] @relation("bookings")
  prefix       String    @db.VarChar(5)
  firstName    String    @db.VarChar(32)
  middleName   String    @db.VarChar(32)
  lastName     String    @db.VarChar(32)
  sufix        String    @db.VarChar(32)
  /// @zod.string.email()
  email        String    @db.VarChar(64)
  countryCode  String?   @db.VarChar(2)
  currencyCode String?   @db.VarChar(3)
  locale       String?   @db.VarChar(6)
  mobilePhone  String?   @db.VarChar(32)
  adresses     Json
  gender       String    @db.VarChar(10)
  birthDate    DateTime
  isActive     Boolean?  @default(true)
  /// @zod.custom.omit([model, input])
  createdAt    DateTime? @default(now())
  /// @zod.custom.omit([model, input])
  updatedAt    DateTime? @updatedAt

  @@unique([tenantId, accountId])
}

model Booking {
  /// @zod.custom.omit([model, input])
  id                 BigInt            @id @default(autoincrement())
  tenantId           BigInt
  tenant             Tenant            @relation(fields: [tenantId], references: [id], name: "bookings")
  accountId          BigInt
  account            Account           @relation(fields: [accountId], references: [id], name: "bookings")
  customerId         BigInt?
  customer           Customer?         @relation(fields: [customerId], references: [id], name: "bookings")
  ownerId            BigInt
  owner              User              @relation(fields: [ownerId], references: [id], name: "bookings")
  products           BookingProduct[]  @relation("products")
  travelers          BookingTreveler[] @relation("travelers")
  fullName           String?           @db.VarChar(128)
  /// @zod.string.email()
  email              String?           @db.VarChar(64)
  phone              String?           @db.VarChar(32)
  postalCode         String?           @db.VarChar(32)
  fromCity           String?           @db.VarChar(64)
  toCity             String?           @db.VarChar(64)
  travelDate         DateTime?
  travelPeriod       String?           @db.VarChar(128)
  adultsCount        Int?
  childrenCount      Int?
  seniorsCount       Int?
  requestDescription String?
  locatorCode        String?
  totalPrice         Decimal?          @db.Money
  totalCost          Decimal?          @db.Money
  paymentType        String?           @db.VarChar(10)
  paymentStatus      String?           @db.VarChar(10)
  paymentTime        DateTime?
  discountPercent    Decimal?
  discountAmount     Decimal?          @db.Money
  paymentAmount      Decimal?          @db.Money
  voucherFilePath    String?
  receiptFilePath    String?
  invoiceFilePath    String?
  status             BookingStatus?    @default(WAITING_FOR_SERVICE)
  isActive           Boolean?          @default(true)
  /// @zod.custom.omit([model, input])
  createdAt          DateTime?         @default(now())
  /// @zod.custom.omit([model, input])
  updatedAt          DateTime?         @updatedAt

  @@unique([tenantId, accountId, customerId])
}

model BookingTreveler {
  id                 BigInt    @id @default(autoincrement())
  tenantId           BigInt
  tenant             Tenant    @relation(fields: [tenantId], references: [id], name: "bookingTravelers")
  accountId          BigInt
  account            Account   @relation(fields: [accountId], references: [id], name: "bookingTravelers")
  bookingId          BigInt
  Booking            Booking   @relation(fields: [bookingId], references: [id], name: "travelers")
  ownerId            BigInt
  owner              User      @relation(fields: [ownerId], references: [id], name: "bookingTravelers")
  firstName          String    @db.VarChar(64)
  lastName           String    @db.VarChar(64)
  birthDate          DateTime
  passportNumber     String    @db.VarChar(64)
  passportIssueDate  DateTime
  passportExpireDate DateTime
  /// @zod.string.email()
  email              String?   @db.VarChar(64)
  isActive           Boolean?  @default(true)
  /// @zod.custom.omit([model, input])
  createdAt          DateTime? @default(now())
  /// @zod.custom.omit([model, input])
  updatedAt          DateTime? @updatedAt
}

model BookingProduct {
  /// @zod.custom.omit([model, input])
  id                 BigInt               @id @default(autoincrement())
  tenantId           BigInt
  tenant             Tenant               @relation(fields: [tenantId], references: [id], name: "bookingProducts")
  accountId          BigInt
  account            Account              @relation(fields: [accountId], references: [id], name: "bookingProducts")
  bookingId          BigInt
  Booking            Booking              @relation(fields: [bookingId], references: [id], name: "products")
  ownerId            BigInt
  owner              User                 @relation(fields: [ownerId], references: [id], name: "bookingProducts")
  supplierId         BigInt?
  supplier           Account?             @relation(fields: [supplierId], references: [id], name: "bookingProductsSupplied")
  rooms              BookingProductRoom[] @relation("rooms")
  productType        ProductType
  description        String?
  startDate          DateTime
  endDate            DateTime
  fromLocation       String?              @db.VarChar(64)
  toLocation         String               @db.VarChar(64)
  termsAndConditions String?
  productCost        Decimal?             @db.Money
  tenantMarkup       Decimal?             @db.Money
  agencyMarkup       Decimal?             @db.Money
  agentMarkup        Decimal?             @db.Money
  localTaxes         Decimal?             @db.Money
  federalTaxes       Decimal?             @db.Money
  additionalFees     Decimal?             @db.Money
  discountPercent    Decimal?             @db.Money
  discount           Decimal?             @db.Money
  finalPrice         Decimal?             @db.Money
  paymentDueDate     Decimal?             @db.Money
  paidDate           Decimal?             @db.Money
  paymentAmount      Decimal?             @db.Money
  hotelName          String?              @db.VarChar(128)
  hotelStarRating    Int?
  hotelMealPlan      HotelMealPlan?
  stayType           StayType
  isActive           Boolean?             @default(true)
  /// @zod.custom.omit([model, input])
  createdAt          DateTime?            @default(now())
  /// @zod.custom.omit([model, input])
  updatedAt          DateTime?            @updatedAt

  @@unique([tenantId, accountId, bookingId])
}

model BookingProductRoom {
  id               BigInt         @id @default(autoincrement())
  bookingProductId BigInt
  bookingProduct   BookingProduct @relation(fields: [bookingProductId], references: [id], name: "rooms")
  category         RoomCategory
  adultsCount      Int
  minorsCount      Int
  ageOfMinors      Int[]
  Price            Decimal?       @db.Money
  isActive         Boolean?       @default(true)
  /// @zod.custom.omit([model, input])
  createdAt        DateTime?      @default(now())
  /// @zod.custom.omit([model, input])
  updatedAt        DateTime?      @updatedAt
}
