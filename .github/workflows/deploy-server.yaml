name: Deploy Server

on:
  push:
    branches:
      - development

env:
  AWS_REGION: sa-east-1
  WEB_ECR_REPOSITORY: 060454264788.dkr.ecr.sa-east-1.amazonaws.com/v10-eng-dev-frontend-node
  WEB_ECS_SERVICE: frontend-node
  WEB_ECS_CLUSTER: v10-eng-cluster
  WEB_ECS_TASK_DEFINITION: v10-eng-dev-frontend-node
  WEB_CONTAINER_NAME: frontend-node
  SERVER_ECR_REPOSITORY: 060454264788.dkr.ecr.sa-east-1.amazonaws.com/v10-eng-dev-backend-ts
  SERVER_ECS_SERVICE: backend-ts
  SERVER_ECS_CLUSTER: v10-eng-cluster
  SERVER_ECS_TASK_DEFINITION: v10-eng-dev-backend-ts
  SERVER_CONTAINER_NAME: backend-ts
  NEXT_PUBLIC_API_URL: http://backend.dev.viagem10.com
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
  NODE_ENV: test

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Grant Permissions build-server.sh
        run: chmod +x build-server.sh

      - name: Build Server
        run: ./build-server.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::060454264788:role/github-actions
          aws-region: sa-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push SERVER to Amazon ECR
        env:
          SERVER_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVER_ECR_REPOSITORY: v10-eng-dev-backend-ts
          SERVER_IMAGE_TAG: ${{ github.sha }}
          ACCOUNT_ID: ${{ secrets.DEV_ACCOUNT_ID }}
        run: |
          docker build -t $SERVER_ECR_REGISTRY/$SERVER_ECR_REPOSITORY:$SERVER_IMAGE_TAG -f apps/server/Dockerfile .
          docker push $SERVER_ECR_REGISTRY/$SERVER_ECR_REPOSITORY:$SERVER_IMAGE_TAG
          docker build -t $SERVER_ECR_REGISTRY/$SERVER_ECR_REPOSITORY:latest -f apps/server/Dockerfile .
          docker push $SERVER_ECR_REGISTRY/$SERVER_ECR_REPOSITORY:latest

      - name: Fill in the new image ID in the Amazon ECS task definition for SERVER
        id: task-def-server
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-backend-task-definition.json
          container-name: ${{ env.SERVER_CONTAINER_NAME }}
          image: ${{ env.SERVER_ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition for SERVER
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.10
        with:
          task-definition: ${{ steps.task-def-server.outputs.task-definition }}
          service: ${{ env.SERVER_ECS_SERVICE }}
          cluster: ${{ env.SERVER_ECS_CLUSTER }}
          wait-for-service-stability: true
