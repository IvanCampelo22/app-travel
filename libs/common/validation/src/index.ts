import { z } from 'zod'
import * as PrismaClient from '@prisma/client'

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

// PRISMA GENERATED ENUMS
//------------------------------------------------------

export const AccountScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.AccountScalarFieldEnum
)

export const BookingProductRoomScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.BookingProductRoomScalarFieldEnum
)

export const BookingProductScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.BookingProductScalarFieldEnum
)

export const BookingScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.BookingScalarFieldEnum
)

export const BookingTravelerScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.BookingTravelerScalarFieldEnum
)

export const JsonNullValueFilterSchema = z.enum([
  'DbNull',
  'JsonNull',
  'AnyNull'
])

export const NullableJsonNullValueInputSchema = z
  .enum(['DbNull', 'JsonNull'])
  .transform((v) => transformJsonNull(v))

export const QueryModeSchema = z.nativeEnum(PrismaClient.Prisma.QueryMode)

export const SortOrderSchema = z.nativeEnum(PrismaClient.Prisma.SortOrder)

export const TenantScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.TenantScalarFieldEnum
)

export const TransactionIsolationLevelSchema = z.nativeEnum(
  PrismaClient.Prisma.TransactionIsolationLevel
)

export const UserScalarFieldEnumSchema = z.nativeEnum(
  PrismaClient.Prisma.UserScalarFieldEnum
)

// CUSTOM ENUMS
//------------------------------------------------------

export const AccountCategorySchema = z.nativeEnum(PrismaClient.AccountCategory)

export const BookingStatusSchema = z.nativeEnum(PrismaClient.BookingStatus)

export const ProductCategorySchema = z.nativeEnum(PrismaClient.ProductCategory)

export const AccommodationTypeSchema = z.nativeEnum(
  PrismaClient.AccommodationType
)

export const RoomCategorySchema = z.nativeEnum(PrismaClient.RoomCategory)

/////////////////////////////////////////
// HELPER TYPES
/////////////////////////////////////////

// JSON
//------------------------------------------------------

type NullableJsonInput =
  | PrismaClient.Prisma.JsonValue
  | null
  | 'JsonNull'
  | 'DbNull'
  | PrismaClient.Prisma.NullTypes.DbNull
  | PrismaClient.Prisma.NullTypes.JsonNull

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return PrismaClient.Prisma.DbNull
  if (v === 'JsonNull') return PrismaClient.Prisma.JsonNull
  return v
}

export const JsonValue: z.ZodType<PrismaClient.Prisma.JsonValue> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(JsonValue)),
  z.lazy(() => z.record(JsonValue))
])

export const NullableJsonValue = z
  .union([JsonValue, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v))

export const InputJsonValue: z.ZodType<PrismaClient.Prisma.InputJsonValue> =
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => z.array(InputJsonValue.nullable())),
    z.lazy(() => z.record(InputJsonValue.nullable()))
  ])

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

// TENANT
//------------------------------------------------------

export const TenantSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  dobName: z.string().nullish(),
  taxId: z.string().nullish(),
  brand: z.string().nullish(),
  contactPrefix: z.string().nullish(),
  contactFirstName: z.string().nullish(),
  contactMiddleName: z.string().nullish(),
  contactLastName: z.string().nullish(),
  contactSuffix: z.string().nullish(),
  jobTitle: z.string().nullish(),
  email: z.string().email(),
  phone: z.string().nullish(),
  mobilePhone: z.string().nullish(),
  fax: z.string().nullish(),
  billingAdresses: NullableJsonValue.optional(),
  shippingAdresses: NullableJsonValue.optional(),
  termsAndConditions: z.string().nullish(),
  privacyPolicy: z.string().nullish(),
  bankName: z.string().nullish(),
  branch: z.string().nullish(),
  bankAccount: z.string().nullish(),
  notes: z.string().nullish(),
  countryCode: z.string().nullish(),
  currencyCode: z.string().nullish(),
  locale: z.string().nullish(),
  timeZone: z.string().nullish(),
  referralSource: z.string().nullish(),
  domain: z.string().nullish(),
  siteConfig: z.string().nullish(),
  createdAt: z.date().nullish(),
  createdBy: z.string().nullish(),
  modifiedAt: z.date(),
  modifiedBy: z.string().nullish(),
  isActive: z.boolean().nullish(),
  isMaster: z.boolean().nullish()
})

// USER
//------------------------------------------------------

export const UserSchema = z.object({
  // omitted: id: z.number(),
  tenantId: z.number().int().nullish(),
  accountId: z.number().int().nullish(),
  firstName: z.string(),
  lastName: z.string(),
  companyName: z.string().nullish(),
  jobTitle: z.string().nullish(),
  department: z.string().nullish(),
  managerName: z.string().nullish(),
  email: z.string().email(),
  phone: z.string().nullish(),
  mobilePhone: z.string().nullish(),
  fax: z.string().nullish(),
  adresses: NullableJsonValue.optional(),
  gender: z.string().nullish(),
  birthDate: z.date().nullish(),
  createdAt: z.date().nullish(),
  createdBy: z.string().nullish(),
  modifiedAt: z.date().nullish(),
  modifiedBy: z.string().nullish(),
  isActive: z.boolean().nullish(),
  isMaster: z.boolean().nullish()
})

// ACCOUNT
//------------------------------------------------------

export const AccountSchema = z.object({
  category: AccountCategorySchema,
  // omitted: id: z.number(),
  tenantId: z.number().int(),
  parentId: z.number().int().nullish(),
  ownerId: z.number().int(),
  name: z.string(),
  dobName: z.string().nullish(),
  taxId: z.string().nullish(),
  ssn: z.string().nullish(),
  brand: z.string().nullish(),
  email: z.string().email(),
  phone: z.string().nullish(),
  mobilePhone: z.string().nullish(),
  fax: z.string().nullish(),
  billingAdresses: NullableJsonValue.optional(),
  shippingAdresses: NullableJsonValue.optional(),
  termsAndConditions: z.string().nullish(),
  privacyPolicy: z.string().nullish(),
  bankName: z.string().nullish(),
  branch: z.string().nullish(),
  bankAccount: z.string().nullish(),
  notes: z.string().nullish(),
  countryCode: z.string().nullish(),
  currencyCode: z.string().nullish(),
  locale: z.string().nullish(),
  timeZone: z.string().nullish(),
  referralSource: z.string().nullish(),
  domain: z.string().nullish(),
  siteConfig: z.string().nullish(),
  createdAt: z.date().nullish(),
  createdBy: z.string().nullish(),
  modifiedAt: z.date(),
  modifiedBy: z.string().nullish(),
  isActive: z.boolean().nullish()
})

// BOOKING
//------------------------------------------------------

export const BookingSchema = z.object({
  status: BookingStatusSchema,
  // omitted: id: z.number(),
  tenantId: z.number().int(),
  accountId: z.number().int(),
  customerId: z.number().int(),
  ownerId: z.number().int(),
  customerName: z.string(),
  customerEmail: z.string().email().nullish(),
  customerPhone: z.string().nullish(),
  postalCode: z.string().nullish(),
  fromCity: z.string().nullish(),
  toCity: z.string().nullish(),
  travelDate: z.date().nullish(),
  travelPeriod: z.string().nullish(),
  adultsCount: z.number().int().nullish(),
  childrenCount: z.number().int().nullish(),
  seniorsCount: z.number().int().nullish(),
  requestDescription: z.string().nullish(),
  locatorCode: z.string().nullish(),
  totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  totalCost: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  paymentType: z.string().nullish(),
  paymentStatus: z.string().nullish(),
  paymentDateTime: z.date().nullish(),
  discountPercent: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  discountAmount: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  paymentAmount: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  voucherFilePath: z.string().nullish(),
  receiptFilePath: z.string().nullish(),
  invoiceFilePath: z.string().nullish(),
  createdAt: z.date().nullish(),
  createdBy: z.string().nullish(),
  modifiedAt: z.date(),
  modifiedBy: z.string().nullish(),
  isActive: z.boolean().nullish()
})

// BOOKING TRAVELER
//------------------------------------------------------

export const BookingTravelerSchema = z.object({
  // omitted: id: z.number(),
  tenantId: z.number().int(),
  bookingId: z.number().int(),
  accountId: z.number().int(),
  ownerId: z.number().int(),
  firstName: z.string(),
  lastName: z.string(),
  birthDate: z.date(),
  passportNumber: z.string(),
  passportIssueDate: z.date(),
  passportExpireDate: z.date(),
  email: z.string().email(),
  phone: z.string().nullish(),
  createdAt: z.date().nullish(),
  createdBy: z.string().nullish(),
  modifiedAt: z.date(),
  modifiedBy: z.string().nullish(),
  isActive: z.boolean().nullish()
})

// BOOKING PRODUCT
//------------------------------------------------------

export const BookingProductSchema = z.object({
  category: ProductCategorySchema,
  accommodationType: AccommodationTypeSchema.nullish(),
  // omitted: id: z.number(),
  tenantId: z.number().int(),
  bookingId: z.number().int(),
  accountId: z.number().int(),
  supplierId: z.number().int().nullish(),
  supplierName: z.string().nullish(),
  ownerId: z.number().int(),
  description: z.string().nullish(),
  startDate: z.date(),
  endDate: z.date(),
  fromLocation: z.string().nullish(),
  toLocation: z.string(),
  termsAndConditions: z.string().nullish(),
  locatorCode: z.string().nullish(),
  productCost: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  tenantMarkup: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  agencyMarkup: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  agentMarkup: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  stateTaxes: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  federalTaxes: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  additionalFees: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  discountPercent: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  discount: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  paymentDueDate: z.date().nullish(),
  paidDate: z.date().nullish(),
  paymentAmount: z.instanceof(PrismaClient.Prisma.Decimal).nullish(),
  voucherFilePath: z.string().nullish(),
  receiptFilePath: z.string().nullish(),
  invoiceFilePath: z.string().nullish(),
  status: z.string().nullish(),
  hotelName: z.string().nullish(),
  hotelStarRating: z.number().int().nullish(),
  hotelMealPlan: z.string().nullish(),
  bookingGroupId: z.number().int().nullish(),
  paymentType: z.string().nullish(),
  paymentDescription: z.string().nullish(),
  creditCardType: z.string().nullish(),
  creditCardLastFourDigits: z.number().int().nullish(),
  creditCardAuthorizationCode: z.string().nullish(),
  createdAt: z.date().nullish(),
  createdBy: z.string().nullish(),
  modifiedAt: z.date(),
  modifiedBy: z.string().nullish(),
  isActive: z.boolean().nullish()
})

// BOOKING PRODUCT ROOM
//------------------------------------------------------

export const BookingProductRoomSchema = z.object({
  category: RoomCategorySchema,
  // omitted: id: z.number(),
  bookingProductId: z.number().int(),
  adultsCount: z.number().int(),
  minorsCount: z.number().int(),
  ageOfMinors: z.number().int().array(),
  createdAt: z.date().nullish(),
  createdBy: z.string().nullish(),
  modifiedAt: z.date(),
  modifiedBy: z.string().nullish(),
  isActive: z.boolean().nullish()
})

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// TENANT
//------------------------------------------------------

export const TenantArgsSchema: z.ZodType<PrismaClient.Prisma.TenantArgs> = z
  .object({
    select: z.lazy(() => TenantSelectSchema).optional(),
    include: z.lazy(() => TenantIncludeSchema).optional()
  })
  .strict()

export const TenantIncludeSchema: z.ZodType<PrismaClient.Prisma.TenantInclude> =
  z
    .object({
      users: z
        .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
        .optional(),
      accounts: z
        .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
        .optional(),
      bookings: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      bookingTravelers: z
        .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
        .optional(),
      bookingProducts: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => TenantCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

export const TenantCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.TenantCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => TenantCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const TenantCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.TenantCountOutputTypeSelect> =
  z
    .object({
      users: z.boolean().optional(),
      accounts: z.boolean().optional(),
      bookings: z.boolean().optional(),
      bookingTravelers: z.boolean().optional(),
      bookingProducts: z.boolean().optional()
    })
    .strict()

export const TenantSelectSchema: z.ZodType<PrismaClient.Prisma.TenantSelect> = z
  .object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    dobName: z.boolean().optional(),
    taxId: z.boolean().optional(),
    brand: z.boolean().optional(),
    contactPrefix: z.boolean().optional(),
    contactFirstName: z.boolean().optional(),
    contactMiddleName: z.boolean().optional(),
    contactLastName: z.boolean().optional(),
    contactSuffix: z.boolean().optional(),
    jobTitle: z.boolean().optional(),
    email: z.boolean().optional(),
    phone: z.boolean().optional(),
    mobilePhone: z.boolean().optional(),
    fax: z.boolean().optional(),
    billingAdresses: z.boolean().optional(),
    shippingAdresses: z.boolean().optional(),
    termsAndConditions: z.boolean().optional(),
    privacyPolicy: z.boolean().optional(),
    bankName: z.boolean().optional(),
    branch: z.boolean().optional(),
    bankAccount: z.boolean().optional(),
    notes: z.boolean().optional(),
    countryCode: z.boolean().optional(),
    currencyCode: z.boolean().optional(),
    locale: z.boolean().optional(),
    timeZone: z.boolean().optional(),
    referralSource: z.boolean().optional(),
    domain: z.boolean().optional(),
    siteConfig: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    createdBy: z.boolean().optional(),
    modifiedAt: z.boolean().optional(),
    modifiedBy: z.boolean().optional(),
    isActive: z.boolean().optional(),
    isMaster: z.boolean().optional(),
    users: z
      .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
      .optional(),
    accounts: z
      .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
      .optional(),
    bookings: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    bookingTravelers: z
      .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
      .optional(),
    bookingProducts: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => TenantCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

// USER
//------------------------------------------------------

export const UserArgsSchema: z.ZodType<PrismaClient.Prisma.UserArgs> = z
  .object({
    select: z.lazy(() => UserSelectSchema).optional(),
    include: z.lazy(() => UserIncludeSchema).optional()
  })
  .strict()

export const UserIncludeSchema: z.ZodType<PrismaClient.Prisma.UserInclude> = z
  .object({
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    account: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional()
  })
  .strict()

export const UserSelectSchema: z.ZodType<PrismaClient.Prisma.UserSelect> = z
  .object({
    id: z.boolean().optional(),
    tenantId: z.boolean().optional(),
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    accountId: z.boolean().optional(),
    account: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional(),
    firstName: z.boolean().optional(),
    lastName: z.boolean().optional(),
    companyName: z.boolean().optional(),
    jobTitle: z.boolean().optional(),
    department: z.boolean().optional(),
    managerName: z.boolean().optional(),
    email: z.boolean().optional(),
    phone: z.boolean().optional(),
    mobilePhone: z.boolean().optional(),
    fax: z.boolean().optional(),
    adresses: z.boolean().optional(),
    gender: z.boolean().optional(),
    birthDate: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    createdBy: z.boolean().optional(),
    modifiedAt: z.boolean().optional(),
    modifiedBy: z.boolean().optional(),
    isActive: z.boolean().optional(),
    isMaster: z.boolean().optional()
  })
  .strict()

// ACCOUNT
//------------------------------------------------------

export const AccountArgsSchema: z.ZodType<PrismaClient.Prisma.AccountArgs> = z
  .object({
    select: z.lazy(() => AccountSelectSchema).optional(),
    include: z.lazy(() => AccountIncludeSchema).optional()
  })
  .strict()

export const AccountIncludeSchema: z.ZodType<PrismaClient.Prisma.AccountInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      parent: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      childAccounts: z
        .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
        .optional(),
      accountUsers: z
        .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
        .optional(),
      bookings: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      purchasing: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      bookingTravelers: z
        .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
        .optional(),
      bookingProducts: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => AccountCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

export const AccountCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.AccountCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => AccountCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const AccountCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.AccountCountOutputTypeSelect> =
  z
    .object({
      childAccounts: z.boolean().optional(),
      accountUsers: z.boolean().optional(),
      bookings: z.boolean().optional(),
      purchasing: z.boolean().optional(),
      bookingTravelers: z.boolean().optional(),
      bookingProducts: z.boolean().optional()
    })
    .strict()

export const AccountSelectSchema: z.ZodType<PrismaClient.Prisma.AccountSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      parentId: z.boolean().optional(),
      parent: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      ownerId: z.boolean().optional(),
      childAccounts: z
        .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
        .optional(),
      accountUsers: z
        .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
        .optional(),
      name: z.boolean().optional(),
      category: z.boolean().optional(),
      dobName: z.boolean().optional(),
      taxId: z.boolean().optional(),
      ssn: z.boolean().optional(),
      brand: z.boolean().optional(),
      email: z.boolean().optional(),
      phone: z.boolean().optional(),
      mobilePhone: z.boolean().optional(),
      fax: z.boolean().optional(),
      billingAdresses: z.boolean().optional(),
      shippingAdresses: z.boolean().optional(),
      termsAndConditions: z.boolean().optional(),
      privacyPolicy: z.boolean().optional(),
      bankName: z.boolean().optional(),
      branch: z.boolean().optional(),
      bankAccount: z.boolean().optional(),
      notes: z.boolean().optional(),
      countryCode: z.boolean().optional(),
      currencyCode: z.boolean().optional(),
      locale: z.boolean().optional(),
      timeZone: z.boolean().optional(),
      referralSource: z.boolean().optional(),
      domain: z.boolean().optional(),
      siteConfig: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      createdBy: z.boolean().optional(),
      modifiedAt: z.boolean().optional(),
      modifiedBy: z.boolean().optional(),
      isActive: z.boolean().optional(),
      bookings: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      purchasing: z
        .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
        .optional(),
      bookingTravelers: z
        .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
        .optional(),
      bookingProducts: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => AccountCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

// BOOKING
//------------------------------------------------------

export const BookingArgsSchema: z.ZodType<PrismaClient.Prisma.BookingArgs> = z
  .object({
    select: z.lazy(() => BookingSelectSchema).optional(),
    include: z.lazy(() => BookingIncludeSchema).optional()
  })
  .strict()

export const BookingIncludeSchema: z.ZodType<PrismaClient.Prisma.BookingInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      customer: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      travelers: z
        .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
        .optional(),
      products: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => BookingCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

export const BookingCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.BookingCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => BookingCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const BookingCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.BookingCountOutputTypeSelect> =
  z
    .object({
      travelers: z.boolean().optional(),
      products: z.boolean().optional()
    })
    .strict()

export const BookingSelectSchema: z.ZodType<PrismaClient.Prisma.BookingSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      customerId: z.boolean().optional(),
      customer: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      ownerId: z.boolean().optional(),
      customerName: z.boolean().optional(),
      customerEmail: z.boolean().optional(),
      customerPhone: z.boolean().optional(),
      postalCode: z.boolean().optional(),
      fromCity: z.boolean().optional(),
      toCity: z.boolean().optional(),
      travelDate: z.boolean().optional(),
      travelPeriod: z.boolean().optional(),
      adultsCount: z.boolean().optional(),
      childrenCount: z.boolean().optional(),
      seniorsCount: z.boolean().optional(),
      requestDescription: z.boolean().optional(),
      status: z.boolean().optional(),
      locatorCode: z.boolean().optional(),
      totalPrice: z.boolean().optional(),
      totalCost: z.boolean().optional(),
      paymentType: z.boolean().optional(),
      paymentStatus: z.boolean().optional(),
      paymentDateTime: z.boolean().optional(),
      discountPercent: z.boolean().optional(),
      discountAmount: z.boolean().optional(),
      paymentAmount: z.boolean().optional(),
      voucherFilePath: z.boolean().optional(),
      receiptFilePath: z.boolean().optional(),
      invoiceFilePath: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      createdBy: z.boolean().optional(),
      modifiedAt: z.boolean().optional(),
      modifiedBy: z.boolean().optional(),
      isActive: z.boolean().optional(),
      travelers: z
        .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
        .optional(),
      products: z
        .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([z.boolean(), z.lazy(() => BookingCountOutputTypeArgsSchema)])
        .optional()
    })
    .strict()

// BOOKING TRAVELER
//------------------------------------------------------

export const BookingTravelerArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerArgs> =
  z
    .object({
      select: z.lazy(() => BookingTravelerSelectSchema).optional(),
      include: z.lazy(() => BookingTravelerIncludeSchema).optional()
    })
    .strict()

export const BookingTravelerIncludeSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional()
    })
    .strict()

export const BookingTravelerSelectSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      bookingId: z.boolean().optional(),
      booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      ownerId: z.boolean().optional(),
      firstName: z.boolean().optional(),
      lastName: z.boolean().optional(),
      birthDate: z.boolean().optional(),
      passportNumber: z.boolean().optional(),
      passportIssueDate: z.boolean().optional(),
      passportExpireDate: z.boolean().optional(),
      email: z.boolean().optional(),
      phone: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      createdBy: z.boolean().optional(),
      modifiedAt: z.boolean().optional(),
      modifiedBy: z.boolean().optional(),
      isActive: z.boolean().optional()
    })
    .strict()

// BOOKING PRODUCT
//------------------------------------------------------

export const BookingProductArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductArgs> =
  z
    .object({
      select: z.lazy(() => BookingProductSelectSchema).optional(),
      include: z.lazy(() => BookingProductIncludeSchema).optional()
    })
    .strict()

export const BookingProductIncludeSchema: z.ZodType<PrismaClient.Prisma.BookingProductInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      rooms: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductRoomFindManyArgsSchema)
        ])
        .optional(),
      _count: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductCountOutputTypeArgsSchema)
        ])
        .optional()
    })
    .strict()

export const BookingProductCountOutputTypeArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => BookingProductCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const BookingProductCountOutputTypeSelectSchema: z.ZodType<PrismaClient.Prisma.BookingProductCountOutputTypeSelect> =
  z
    .object({
      rooms: z.boolean().optional()
    })
    .strict()

export const BookingProductSelectSchema: z.ZodType<PrismaClient.Prisma.BookingProductSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      bookingId: z.boolean().optional(),
      booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      supplierId: z.boolean().optional(),
      supplierName: z.boolean().optional(),
      ownerId: z.boolean().optional(),
      category: z.boolean().optional(),
      description: z.boolean().optional(),
      startDate: z.boolean().optional(),
      endDate: z.boolean().optional(),
      fromLocation: z.boolean().optional(),
      toLocation: z.boolean().optional(),
      termsAndConditions: z.boolean().optional(),
      locatorCode: z.boolean().optional(),
      productCost: z.boolean().optional(),
      tenantMarkup: z.boolean().optional(),
      agencyMarkup: z.boolean().optional(),
      agentMarkup: z.boolean().optional(),
      localTaxes: z.boolean().optional(),
      stateTaxes: z.boolean().optional(),
      federalTaxes: z.boolean().optional(),
      additionalFees: z.boolean().optional(),
      discountPercent: z.boolean().optional(),
      discount: z.boolean().optional(),
      finalPrice: z.boolean().optional(),
      paymentDueDate: z.boolean().optional(),
      paidDate: z.boolean().optional(),
      paymentAmount: z.boolean().optional(),
      voucherFilePath: z.boolean().optional(),
      receiptFilePath: z.boolean().optional(),
      invoiceFilePath: z.boolean().optional(),
      status: z.boolean().optional(),
      hotelName: z.boolean().optional(),
      hotelStarRating: z.boolean().optional(),
      hotelMealPlan: z.boolean().optional(),
      accommodationType: z.boolean().optional(),
      bookingGroupId: z.boolean().optional(),
      paymentType: z.boolean().optional(),
      paymentDescription: z.boolean().optional(),
      creditCardType: z.boolean().optional(),
      creditCardLastFourDigits: z.boolean().optional(),
      creditCardAuthorizationCode: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      createdBy: z.boolean().optional(),
      modifiedAt: z.boolean().optional(),
      modifiedBy: z.boolean().optional(),
      isActive: z.boolean().optional(),
      rooms: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductRoomFindManyArgsSchema)
        ])
        .optional(),
      _count: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductCountOutputTypeArgsSchema)
        ])
        .optional()
    })
    .strict()

// BOOKING PRODUCT ROOM
//------------------------------------------------------

export const BookingProductRoomArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomArgs> =
  z
    .object({
      select: z.lazy(() => BookingProductRoomSelectSchema).optional(),
      include: z.lazy(() => BookingProductRoomIncludeSchema).optional()
    })
    .strict()

export const BookingProductRoomIncludeSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomInclude> =
  z
    .object({
      bookingProduct: z
        .union([z.boolean(), z.lazy(() => BookingProductArgsSchema)])
        .optional()
    })
    .strict()

export const BookingProductRoomSelectSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomSelect> =
  z
    .object({
      id: z.boolean().optional(),
      bookingProductId: z.boolean().optional(),
      bookingProduct: z
        .union([z.boolean(), z.lazy(() => BookingProductArgsSchema)])
        .optional(),
      category: z.boolean().optional(),
      adultsCount: z.boolean().optional(),
      minorsCount: z.boolean().optional(),
      ageOfMinors: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      createdBy: z.boolean().optional(),
      modifiedAt: z.boolean().optional(),
      modifiedBy: z.boolean().optional(),
      isActive: z.boolean().optional()
    })
    .strict()

/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const TenantWhereInputSchema: z.ZodType<PrismaClient.Prisma.TenantWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => TenantWhereInputSchema),
          z.lazy(() => TenantWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => TenantWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => TenantWhereInputSchema),
          z.lazy(() => TenantWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      dobName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      taxId: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      brand: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactLastName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      jobTitle: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fax: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      billingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      shippingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      bankName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      branch: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      bankAccount: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      notes: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      timeZone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      referralSource: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      domain: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      siteConfig: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      isMaster: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      users: z.lazy(() => UserListRelationFilterSchema).optional(),
      accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
      bookings: z.lazy(() => BookingListRelationFilterSchema).optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerListRelationFilterSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductListRelationFilterSchema)
        .optional()
    })
    .strict()

export const TenantOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.TenantOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional(),
      users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
      accounts: z
        .lazy(() => AccountOrderByRelationAggregateInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerOrderByRelationAggregateInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional()
    })
    .strict()

export const TenantWhereUniqueInputSchema: z.ZodType<PrismaClient.Prisma.TenantWhereUniqueInput> =
  z
    .object({
      id: z.number().int().optional()
    })
    .strict()

export const TenantOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.TenantOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => TenantCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => TenantAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => TenantMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => TenantMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => TenantSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const TenantScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.TenantScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => TenantScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      dobName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .lazy(() => JsonNullableWithAggregatesFilterSchema)
        .optional(),
      shippingAdresses: z
        .lazy(() => JsonNullableWithAggregatesFilterSchema)
        .optional(),
      termsAndConditions: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserWhereInputSchema: z.ZodType<PrismaClient.Prisma.UserWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserWhereInputSchema),
          z.lazy(() => UserWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => UserWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserWhereInputSchema),
          z.lazy(() => UserWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional()
        .nullable(),
      accountId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional()
        .nullable(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      companyName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      jobTitle: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      department: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      managerName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fax: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      birthDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      isMaster: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const UserOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.UserOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
  })
  .strict()

export const UserOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.UserOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.UserScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema),
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => UserScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema),
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      accountId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      firstName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      companyName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
      gender: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountWhereInputSchema: z.ZodType<PrismaClient.Prisma.AccountWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountWhereInputSchema),
          z.lazy(() => AccountWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => AccountWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountWhereInputSchema),
          z.lazy(() => AccountWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      parentId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      parent: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      childAccounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
      accountUsers: z.lazy(() => UserListRelationFilterSchema).optional(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      category: z
        .union([
          z.lazy(() => EnumAccountCategoryFilterSchema),
          z.lazy(() => AccountCategorySchema)
        ])
        .optional(),
      dobName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      taxId: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      ssn: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      brand: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fax: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      billingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      shippingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      bankName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      branch: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      bankAccount: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      notes: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      timeZone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      referralSource: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      domain: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      siteConfig: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      bookings: z.lazy(() => BookingListRelationFilterSchema).optional(),
      purchasing: z.lazy(() => BookingListRelationFilterSchema).optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerListRelationFilterSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductListRelationFilterSchema)
        .optional()
    })
    .strict()

export const AccountOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.AccountOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      parent: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      childAccounts: z
        .lazy(() => AccountOrderByRelationAggregateInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserOrderByRelationAggregateInputSchema)
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      bookings: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerOrderByRelationAggregateInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional()
    })
    .strict()

export const AccountWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
  })
  .strict()

export const AccountOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.AccountOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.AccountScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => AccountScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      parentId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumAccountCategoryWithAggregatesFilterSchema),
          z.lazy(() => AccountCategorySchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .lazy(() => JsonNullableWithAggregatesFilterSchema)
        .optional(),
      shippingAdresses: z
        .lazy(() => JsonNullableWithAggregatesFilterSchema)
        .optional(),
      termsAndConditions: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingWhereInputSchema),
          z.lazy(() => BookingWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingWhereInputSchema),
          z.lazy(() => BookingWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      customerId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      customer: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      customerName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      customerEmail: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      customerPhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      postalCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fromCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      travelDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adultsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      childrenCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      requestDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => EnumBookingStatusFilterSchema),
          z.lazy(() => BookingStatusSchema)
        ])
        .optional(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerListRelationFilterSchema)
        .optional(),
      products: z.lazy(() => BookingProductListRelationFilterSchema).optional()
    })
    .strict()

export const BookingOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.BookingOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      customer: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      travelers: z
        .lazy(() => BookingTravelerOrderByRelationAggregateInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
  })
  .strict()

export const BookingOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.BookingOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => BookingCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => BookingAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => BookingMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => BookingMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => BookingSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const BookingScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.BookingScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema),
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema),
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      customerId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      customerName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      customerEmail: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => EnumBookingStatusWithAggregatesFilterSchema),
          z.lazy(() => BookingStatusSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTravelerWhereInputSchema),
          z.lazy(() => BookingTravelerWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTravelerWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTravelerWhereInputSchema),
          z.lazy(() => BookingTravelerWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      booking: z
        .union([
          z.lazy(() => BookingRelationFilterSchema),
          z.lazy(() => BookingWhereInputSchema)
        ])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      passportExpireDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      booking: z.lazy(() => BookingOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
  })
  .strict()

export const BookingTravelerOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingTravelerCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingTravelerAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingTravelerMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingTravelerMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingTravelerSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingTravelerScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      bookingId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      passportExpireDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductWhereInputSchema),
          z.lazy(() => BookingProductWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductWhereInputSchema),
          z.lazy(() => BookingProductWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional()
        .nullable(),
      bookingId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      booking: z
        .union([
          z.lazy(() => BookingRelationFilterSchema),
          z.lazy(() => BookingWhereInputSchema)
        ])
        .optional()
        .nullable(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional()
        .nullable(),
      supplierId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      supplierName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      category: z
        .union([
          z.lazy(() => EnumProductCategoryFilterSchema),
          z.lazy(() => ProductCategorySchema)
        ])
        .optional(),
      description: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      startDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      endDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      fromLocation: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      paidDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => EnumAccommodationTypeNullableFilterSchema),
          z.lazy(() => AccommodationTypeSchema)
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      creditCardType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      rooms: z.lazy(() => BookingProductRoomListRelationFilterSchema).optional()
    })
    .strict()

export const BookingProductOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      booking: z.lazy(() => BookingOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      rooms: z
        .lazy(() => BookingProductRoomOrderByRelationAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingProductWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
  })
  .strict()

export const BookingProductOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingProductCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingProductAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingProductMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingProductMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingProductSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingProductScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      bookingId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      supplierId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumProductCategoryWithAggregatesFilterSchema),
          z.lazy(() => ProductCategorySchema)
        ])
        .optional(),
      description: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      endDate: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      fromLocation: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => EnumAccommodationTypeNullableWithAggregatesFilterSchema),
          z.lazy(() => AccommodationTypeSchema)
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomWhereInputSchema),
          z.lazy(() => BookingProductRoomWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomWhereInputSchema),
          z.lazy(() => BookingProductRoomWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      bookingProductId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      bookingProduct: z
        .union([
          z.lazy(() => BookingProductRelationFilterSchema),
          z.lazy(() => BookingProductWhereInputSchema)
        ])
        .optional()
        .nullable(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomOrderByWithRelationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      bookingProduct: z
        .lazy(() => BookingProductOrderByWithRelationInputSchema)
        .optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomWhereUniqueInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomWhereUniqueInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
  })
  .strict()

export const BookingProductRoomOrderByWithAggregationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingProductRoomCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingProductRoomAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingProductRoomMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingProductRoomMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingProductRoomSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingProductRoomScalarWhereWithAggregatesInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      bookingProductId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryWithAggregatesFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateInput> =
  z
    .object({
      id: z.number().int().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantUpdateInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateManyInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateManyInput> =
  z
    .object({
      id: z.number().int().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const TenantUpdateManyMutationInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateManyMutationInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantUncheckedUpdateManyInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserCreateInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutUsersInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutAccountUsersInputSchema)
        .optional(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.date().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int().optional().nullable(),
    accountId: z.number().int().optional().nullable(),
    firstName: z.string(),
    lastName: z.string(),
    companyName: z.string().optional().nullable(),
    jobTitle: z.string().optional().nullable(),
    department: z.string().optional().nullable(),
    managerName: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z.string().optional().nullable(),
    birthDate: z.date().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isMaster: z.boolean().optional().nullable()
  })
  .strict()

export const UserUpdateInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutUsersNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutAccountUsersNestedInputSchema)
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const UserCreateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int().optional().nullable(),
    accountId: z.number().int().optional().nullable(),
    firstName: z.string(),
    lastName: z.string(),
    companyName: z.string().optional().nullable(),
    jobTitle: z.string().optional().nullable(),
    department: z.string().optional().nullable(),
    managerName: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z.string().optional().nullable(),
    birthDate: z.date().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isMaster: z.boolean().optional().nullable()
  })
  .strict()

export const UserUpdateManyMutationInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateManyMutationInput> =
  z
    .object({
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const AccountCreateInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number().int(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    parentId: z.number().int().optional().nullable(),
    ownerId: z.number().int(),
    childAccounts: z
      .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
      .optional(),
    accountUsers: z
      .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    name: z.string(),
    category: z.lazy(() => AccountCategorySchema),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    ssn: z.string().optional().nullable(),
    brand: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z.string().optional().nullable(),
    privacyPolicy: z.string().optional().nullable(),
    bankName: z.string().optional().nullable(),
    branch: z.string().optional().nullable(),
    bankAccount: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    timeZone: z.string().optional().nullable(),
    referralSource: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    siteConfig: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    bookings: z
      .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    purchasing: z
      .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
      )
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
      )
      .optional()
  })
  .strict()

export const AccountUpdateInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    parentId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    childAccounts: z
      .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
      .optional(),
    accountUsers: z
      .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bookings: z
      .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    purchasing: z
      .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
      )
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
      )
      .optional()
  })
  .strict()

export const AccountCreateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    parentId: z.number().int().optional().nullable(),
    ownerId: z.number().int(),
    name: z.string(),
    category: z.lazy(() => AccountCategorySchema),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    ssn: z.string().optional().nullable(),
    brand: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z.string().optional().nullable(),
    privacyPolicy: z.string().optional().nullable(),
    bankName: z.string().optional().nullable(),
    branch: z.string().optional().nullable(),
    bankAccount: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    timeZone: z.string().optional().nullable(),
    referralSource: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    siteConfig: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const AccountUpdateManyMutationInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateManyMutationInput> =
  z
    .object({
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    parentId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingCreateInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z.lazy(
        () => AccountCreateNestedOneWithoutPurchasingInputSchema
      ),
      ownerId: z.number().int(),
      customerName: z.string(),
      customerEmail: z.string().email().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().int().optional().nullable(),
      childrenCount: z.number().int().optional().nullable(),
      seniorsCount: z.number().int().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    customerId: z.number().int(),
    ownerId: z.number().int(),
    customerName: z.string(),
    customerEmail: z.string().email().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z.lazy(() => BookingStatusSchema).optional(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    travelers: z
      .lazy(
        () => BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
      )
      .optional(),
    products: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
      )
      .optional()
  })
  .strict()

export const BookingUpdateInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneRequiredWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string().email(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelers: z
      .lazy(
        () => BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
      )
      .optional(),
    products: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
      )
      .optional()
  })
  .strict()

export const BookingCreateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    customerId: z.number().int(),
    ownerId: z.number().int(),
    customerName: z.string(),
    customerEmail: z.string().email().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z.lazy(() => BookingStatusSchema).optional(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingUpdateManyMutationInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyMutationInput> =
  z
    .object({
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string().email(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingTravelerCreateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateInput> =
  z
    .object({
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      ownerId: z.number().int(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerUncheckedCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    accountId: z.number().int(),
    ownerId: z.number().int(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string(),
    phone: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingTravelerUpdateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateInput> =
  z
    .object({
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingTravelerCreateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    accountId: z.number().int(),
    ownerId: z.number().int(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string(),
    phone: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingTravelerUpdateManyMutationInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateManyMutationInput> =
  z
    .object({
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductCreateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingCreateNestedOneWithoutProductsInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number().int(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    accountId: z.number().int(),
    supplierId: z.number().optional().nullable(),
    supplierName: z.string().optional().nullable(),
    ownerId: z.number().int(),
    category: z.lazy(() => ProductCategorySchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    stateTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z.date().optional().nullable(),
    paidDate: z.date().optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z.string().optional().nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z.string().optional().nullable(),
    accommodationType: z
      .lazy(() => AccommodationTypeSchema)
      .optional()
      .nullable(),
    bookingGroupId: z.number().optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentDescription: z.string().optional().nullable(),
    creditCardType: z.string().optional().nullable(),
    creditCardLastFourDigits: z.number().optional().nullable(),
    creditCardAuthorizationCode: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    rooms: z
      .lazy(
        () =>
          BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
      )
      .optional()
  })
  .strict()

export const BookingProductUpdateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneWithoutProductsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    supplierId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    supplierName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    category: z
      .union([
        z.lazy(() => ProductCategorySchema),
        z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    stateTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accommodationType: z
      .union([
        z.lazy(() => AccommodationTypeSchema),
        z.lazy(
          () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
        )
      ])
      .optional()
      .nullable(),
    bookingGroupId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardLastFourDigits: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardAuthorizationCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    rooms: z
      .lazy(
        () =>
          BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
      )
      .optional()
  })
  .strict()

export const BookingProductCreateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    accountId: z.number().int(),
    supplierId: z.number().optional().nullable(),
    supplierName: z.string().optional().nullable(),
    ownerId: z.number().int(),
    category: z.lazy(() => ProductCategorySchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    stateTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z.date().optional().nullable(),
    paidDate: z.date().optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z.string().optional().nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z.string().optional().nullable(),
    accommodationType: z
      .lazy(() => AccommodationTypeSchema)
      .optional()
      .nullable(),
    bookingGroupId: z.number().optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentDescription: z.string().optional().nullable(),
    creditCardType: z.string().optional().nullable(),
    creditCardLastFourDigits: z.number().optional().nullable(),
    creditCardAuthorizationCode: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductUpdateManyMutationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyMutationInput> =
  z
    .object({
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    supplierId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    supplierName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    category: z
      .union([
        z.lazy(() => ProductCategorySchema),
        z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    stateTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accommodationType: z
      .union([
        z.lazy(() => AccommodationTypeSchema),
        z.lazy(
          () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
        )
      ])
      .optional()
      .nullable(),
    bookingGroupId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardLastFourDigits: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardAuthorizationCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductRoomCreateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateInput> =
  z
    .object({
      bookingProduct: z
        .lazy(() => BookingProductCreateNestedOneWithoutRoomsInputSchema)
        .optional(),
      category: z.lazy(() => RoomCategorySchema),
      adultsCount: z.number().int(),
      minorsCount: z.number().optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductRoomUncheckedCreateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    bookingProductId: z.number(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number().optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductRoomUpdateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateInput> =
  z
    .object({
      bookingProduct: z
        .lazy(() => BookingProductUpdateOneWithoutRoomsNestedInputSchema)
        .optional(),
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingProductId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductRoomCreateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    bookingProductId: z.number(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number().optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductRoomUpdateManyMutationInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateManyMutationInput> =
  z
    .object({
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingProductId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const IntFilterSchema: z.ZodType<PrismaClient.Prisma.IntFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
  })
  .strict()

export const StringFilterSchema: z.ZodType<PrismaClient.Prisma.StringFilter> = z
  .object({
    equals: z.string().optional(),
    in: z.string().array().optional(),
    notIn: z.string().array().optional(),
    lt: z.string().optional(),
    lte: z.string().optional(),
    gt: z.string().optional(),
    gte: z.string().optional(),
    contains: z.string().optional(),
    startsWith: z.string().optional(),
    endsWith: z.string().optional(),
    mode: z.lazy(() => QueryModeSchema).optional(),
    not: z
      .union([z.string(), z.lazy(() => NestedStringFilterSchema)])
      .optional()
  })
  .strict()

export const StringNullableFilterSchema: z.ZodType<PrismaClient.Prisma.StringNullableFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const JsonNullableFilterSchema: z.ZodType<PrismaClient.Prisma.JsonNullableFilter> =
  z
    .object({
      equals: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      path: z.string().array().optional(),
      string_contains: z.string().optional(),
      string_starts_with: z.string().optional(),
      string_ends_with: z.string().optional(),
      array_contains: InputJsonValue.optional().nullable(),
      array_starts_with: InputJsonValue.optional().nullable(),
      array_ends_with: InputJsonValue.optional().nullable(),
      lt: InputJsonValue.optional(),
      lte: InputJsonValue.optional(),
      gt: InputJsonValue.optional(),
      gte: InputJsonValue.optional(),
      not: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional()
    })
    .strict()

export const DateTimeNullableFilterSchema: z.ZodType<PrismaClient.Prisma.DateTimeNullableFilter> =
  z
    .object({
      equals: z.date().optional().nullable(),
      in: z.date().array().optional().nullable(),
      notIn: z.date().array().optional().nullable(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([z.date(), z.lazy(() => NestedDateTimeNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const DateTimeFilterSchema: z.ZodType<PrismaClient.Prisma.DateTimeFilter> =
  z
    .object({
      equals: z.date().optional(),
      in: z.date().array().optional(),
      notIn: z.date().array().optional(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([z.date(), z.lazy(() => NestedDateTimeFilterSchema)])
        .optional()
    })
    .strict()

export const BoolNullableFilterSchema: z.ZodType<PrismaClient.Prisma.BoolNullableFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const UserListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.UserListRelationFilter> =
  z
    .object({
      every: z.lazy(() => UserWhereInputSchema).optional(),
      some: z.lazy(() => UserWhereInputSchema).optional(),
      none: z.lazy(() => UserWhereInputSchema).optional()
    })
    .strict()

export const AccountListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.AccountListRelationFilter> =
  z
    .object({
      every: z.lazy(() => AccountWhereInputSchema).optional(),
      some: z.lazy(() => AccountWhereInputSchema).optional(),
      none: z.lazy(() => AccountWhereInputSchema).optional()
    })
    .strict()

export const BookingListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingWhereInputSchema).optional(),
      some: z.lazy(() => BookingWhereInputSchema).optional(),
      none: z.lazy(() => BookingWhereInputSchema).optional()
    })
    .strict()

export const BookingTravelerListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingTravelerWhereInputSchema).optional(),
      some: z.lazy(() => BookingTravelerWhereInputSchema).optional(),
      none: z.lazy(() => BookingTravelerWhereInputSchema).optional()
    })
    .strict()

export const BookingProductListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingProductListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingProductWhereInputSchema).optional(),
      some: z.lazy(() => BookingProductWhereInputSchema).optional(),
      none: z.lazy(() => BookingProductWhereInputSchema).optional()
    })
    .strict()

export const UserOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.TenantSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const IntWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.IntWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedIntFilterSchema).optional(),
      _max: z.lazy(() => NestedIntFilterSchema).optional()
    })
    .strict()

export const StringWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.StringWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedStringFilterSchema).optional(),
      _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const StringNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.StringNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.JsonNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      path: z.string().array().optional(),
      string_contains: z.string().optional(),
      string_starts_with: z.string().optional(),
      string_ends_with: z.string().optional(),
      array_contains: InputJsonValue.optional().nullable(),
      array_starts_with: InputJsonValue.optional().nullable(),
      array_ends_with: InputJsonValue.optional().nullable(),
      lt: InputJsonValue.optional(),
      lte: InputJsonValue.optional(),
      gt: InputJsonValue.optional(),
      gte: InputJsonValue.optional(),
      not: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
    })
    .strict()

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.DateTimeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.date().optional().nullable(),
      in: z.date().array().optional().nullable(),
      notIn: z.date().array().optional().nullable(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([
          z.date(),
          z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
    })
    .strict()

export const DateTimeWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.DateTimeWithAggregatesFilter> =
  z
    .object({
      equals: z.date().optional(),
      in: z.date().array().optional(),
      notIn: z.date().array().optional(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([
          z.date(),
          z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
    })
    .strict()

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.BoolNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([
          z.boolean(),
          z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
    })
    .strict()

export const IntNullableFilterSchema: z.ZodType<PrismaClient.Prisma.IntNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const TenantRelationFilterSchema: z.ZodType<PrismaClient.Prisma.TenantRelationFilter> =
  z
    .object({
      is: z.lazy(() => TenantWhereInputSchema).optional(),
      isNot: z.lazy(() => TenantWhereInputSchema).optional()
    })
    .strict()

export const AccountRelationFilterSchema: z.ZodType<PrismaClient.Prisma.AccountRelationFilter> =
  z
    .object({
      is: z
        .lazy(() => AccountWhereInputSchema)
        .optional()
        .nullable(),
      isNot: z
        .lazy(() => AccountWhereInputSchema)
        .optional()
        .nullable()
    })
    .strict()

export const UserCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.UserSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const IntNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.IntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
    })
    .strict()

export const EnumAccountCategoryFilterSchema: z.ZodType<PrismaClient.Prisma.EnumAccountCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => AccountCategorySchema).optional(),
      in: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => NestedEnumAccountCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const AccountCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.AccountSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumAccountCategoryWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumAccountCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => AccountCategorySchema).optional(),
      in: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => NestedEnumAccountCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumAccountCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumAccountCategoryFilterSchema).optional()
    })
    .strict()

export const EnumBookingStatusFilterSchema: z.ZodType<PrismaClient.Prisma.EnumBookingStatusFilter> =
  z
    .object({
      equals: z.lazy(() => BookingStatusSchema).optional(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => NestedEnumBookingStatusFilterSchema)
        ])
        .optional()
    })
    .strict()

export const DecimalNullableFilterSchema: z.ZodType<PrismaClient.Prisma.DecimalNullableFilter> =
  z
    .object({
      equals: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      in: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      lt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      lte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      not: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NestedDecimalNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumBookingStatusWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumBookingStatusWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => BookingStatusSchema).optional(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => NestedEnumBookingStatusWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumBookingStatusFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumBookingStatusFilterSchema).optional()
    })
    .strict()

export const DecimalNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.DecimalNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      in: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      lt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      lte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      not: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
    })
    .strict()

export const BookingRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingRelationFilter> =
  z
    .object({
      is: z.lazy(() => BookingWhereInputSchema).optional(),
      isNot: z.lazy(() => BookingWhereInputSchema).optional()
    })
    .strict()

export const BookingTravelerCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumProductCategoryFilterSchema: z.ZodType<PrismaClient.Prisma.EnumProductCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => ProductCategorySchema).optional(),
      in: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => NestedEnumProductCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const EnumAccommodationTypeNullableFilterSchema: z.ZodType<PrismaClient.Prisma.EnumAccommodationTypeNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomListRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingProductRoomWhereInputSchema).optional(),
      some: z.lazy(() => BookingProductRoomWhereInputSchema).optional(),
      none: z.lazy(() => BookingProductRoomWhereInputSchema).optional()
    })
    .strict()

export const BookingProductRoomOrderByRelationAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumProductCategoryWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumProductCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => ProductCategorySchema).optional(),
      in: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => NestedEnumProductCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumProductCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumProductCategoryFilterSchema).optional()
    })
    .strict()

export const EnumAccommodationTypeNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumAccommodationTypeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NestedEnumAccommodationTypeNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        .optional(),
      _max: z
        .lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        .optional()
    })
    .strict()

export const BookingProductRelationFilterSchema: z.ZodType<PrismaClient.Prisma.BookingProductRelationFilter> =
  z
    .object({
      is: z
        .lazy(() => BookingProductWhereInputSchema)
        .optional()
        .nullable(),
      isNot: z
        .lazy(() => BookingProductWhereInputSchema)
        .optional()
        .nullable()
    })
    .strict()

export const EnumRoomCategoryFilterSchema: z.ZodType<PrismaClient.Prisma.EnumRoomCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const IntNullableListFilterSchema: z.ZodType<PrismaClient.Prisma.IntNullableListFilter> =
  z
    .object({
      equals: z.number().array().optional().nullable(),
      has: z.number().optional().nullable(),
      hasEvery: z.number().array().optional(),
      hasSome: z.number().array().optional(),
      isEmpty: z.boolean().optional()
    })
    .strict()

export const BookingProductRoomCountOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomAvgOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomMaxOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomMinOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomSumOrderByAggregateInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumRoomCategoryWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.EnumRoomCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional()
    })
    .strict()

export const UserCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const StringFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.StringFieldUpdateOperationsInput> =
  z
    .object({
      set: z.string().optional()
    })
    .strict()

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableStringFieldUpdateOperationsInput> =
  z
    .object({
      set: z.string().optional().nullable()
    })
    .strict()

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableDateTimeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.date().optional().nullable()
    })
    .strict()

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.DateTimeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.date().optional()
    })
    .strict()

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableBoolFieldUpdateOperationsInput> =
  z
    .object({
      set: z.boolean().optional().nullable()
    })
    .strict()

export const UserUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const IntFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.IntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutUsersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutUsersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutAccountUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutAccountUsersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutAccountUsersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutAccountUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutAccountUsersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const TenantUpdateOneWithoutUsersNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneWithoutUsersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutUsersInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutUsersInputSchema).optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneWithoutAccountUsersNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneWithoutAccountUsersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutAccountUsersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutAccountUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutAccountUsersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutAccountUsersInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutAccountUsersInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutAccountUsersInputSchema)
        ])
        .optional()
    })
    .strict()

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableIntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional().nullable(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutAccountsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutAccountsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutChildAccountsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutChildAccountsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutChildAccountsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutChildAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutChildAccountsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedManyWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedManyWithoutParentInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutParentInputSchema),
          z.lazy(() => AccountCreateWithoutParentInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyParentInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountInputSchema),
          z.lazy(() => UserCreateWithoutAccountInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingCreateNestedManyWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedManyWithoutCustomerInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateWithoutCustomerInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyCustomerInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedCreateNestedManyWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateNestedManyWithoutParentInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutParentInputSchema),
          z.lazy(() => AccountCreateWithoutParentInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyParentInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountInputSchema),
          z.lazy(() => UserCreateWithoutAccountInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateNestedManyWithoutCustomerInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateWithoutCustomerInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyCustomerInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutAccountsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutAccountsInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutAccountsInputSchema).optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutAccountsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneWithoutChildAccountsNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneWithoutChildAccountsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutChildAccountsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutChildAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutChildAccountsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutChildAccountsInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutChildAccountsInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutChildAccountsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateManyWithoutParentNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateManyWithoutParentNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutParentInputSchema),
          z.lazy(() => AccountCreateWithoutParentInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutParentInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyParentInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutParentInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutParentInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountInputSchema),
          z.lazy(() => UserCreateWithoutAccountInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutAccountInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutAccountInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const EnumAccountCategoryFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.EnumAccountCategoryFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => AccountCategorySchema).optional()
    })
    .strict()

export const BookingUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithoutCustomerNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateWithoutCustomerInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyCustomerInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutParentNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateManyWithoutParentNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutParentInputSchema),
          z.lazy(() => AccountCreateWithoutParentInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutParentInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyParentInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutParentInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutParentInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountInputSchema),
          z.lazy(() => UserCreateWithoutAccountInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutAccountInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutAccountInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateManyWithoutCustomerNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateWithoutCustomerInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyCustomerInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutBookingsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutBookingsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutPurchasingInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutPurchasingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutPurchasingInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutPurchasingInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutPurchasingInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingTravelerCreateNestedManyWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutBookingsNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutBookingsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutBookingsInputSchema).optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutBookingsNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneRequiredWithoutBookingsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      upsert: z.lazy(() => AccountUpsertWithoutBookingsInputSchema).optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutPurchasingNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneRequiredWithoutPurchasingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutPurchasingInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutPurchasingInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutPurchasingInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutPurchasingInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutPurchasingInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutPurchasingInputSchema)
        ])
        .optional()
    })
    .strict()

export const EnumBookingStatusFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.EnumBookingStatusFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => BookingStatusSchema).optional()
    })
    .strict()

export const NullableDecimalFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableDecimalFieldUpdateOperationsInput> =
  z
    .object({
      set: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      increment: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      decrement: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      multiply: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      divide: z.instanceof(PrismaClient.Prisma.Decimal).optional()
    })
    .strict()

export const BookingTravelerUpdateManyWithoutBookingNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutBookingNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutBookingTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingCreateNestedOneWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedOneWithoutTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutBookingTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneRequiredWithoutBookingTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => TenantUpsertWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const BookingUpdateOneRequiredWithoutTravelersNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateOneRequiredWithoutTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutTravelersInputSchema)
        .optional(),
      upsert: z.lazy(() => BookingUpsertWithoutTravelersInputSchema).optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedUpdateWithoutTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneRequiredWithoutBookingTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateNestedOneWithoutBookingProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingCreateNestedOneWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateNestedOneWithoutProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutProductsInputSchema)
        .optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateNestedOneWithoutBookingProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateNestedManyWithoutBookingProductInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneWithoutBookingProductsNestedInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateOneWithoutBookingProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => TenantUpsertWithoutBookingProductsInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const BookingUpdateOneWithoutProductsNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateOneWithoutProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutProductsInputSchema)
        .optional(),
      upsert: z.lazy(() => BookingUpsertWithoutProductsInputSchema).optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedUpdateWithoutProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneWithoutBookingProductsNestedInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateOneWithoutBookingProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutBookingProductsInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const EnumProductCategoryFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.EnumProductCategoryFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => ProductCategorySchema).optional()
    })
    .strict()

export const NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.NullableEnumAccommodationTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateManyWithoutBookingProductNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedOneWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateNestedOneWithoutRoomsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingProductCreateOrConnectWithoutRoomsInputSchema)
        .optional(),
      connect: z.lazy(() => BookingProductWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingProductRoomCreateageOfMinorsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateageOfMinorsInput> =
  z
    .object({
      set: z.number().array()
    })
    .strict()

export const BookingProductUpdateOneWithoutRoomsNestedInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateOneWithoutRoomsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingProductCreateOrConnectWithoutRoomsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => BookingProductUpsertWithoutRoomsInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => BookingProductWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingProductUpdateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedUpdateWithoutRoomsInputSchema)
        ])
        .optional()
    })
    .strict()

export const EnumRoomCategoryFieldUpdateOperationsInputSchema: z.ZodType<PrismaClient.Prisma.EnumRoomCategoryFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => RoomCategorySchema).optional()
    })
    .strict()

export const BookingProductRoomUpdateageOfMinorsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateageOfMinorsInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional()
    })
    .strict()

export const NestedIntFilterSchema: z.ZodType<PrismaClient.Prisma.NestedIntFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
    })
    .strict()

export const NestedStringFilterSchema: z.ZodType<PrismaClient.Prisma.NestedStringFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringFilterSchema)])
        .optional()
    })
    .strict()

export const NestedStringNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedStringNullableFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedDateTimeNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDateTimeNullableFilter> =
  z
    .object({
      equals: z.date().optional().nullable(),
      in: z.date().array().optional().nullable(),
      notIn: z.date().array().optional().nullable(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([z.date(), z.lazy(() => NestedDateTimeNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedDateTimeFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDateTimeFilter> =
  z
    .object({
      equals: z.date().optional(),
      in: z.date().array().optional(),
      notIn: z.date().array().optional(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([z.date(), z.lazy(() => NestedDateTimeFilterSchema)])
        .optional()
    })
    .strict()

export const NestedBoolNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedBoolNullableFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedIntWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedIntWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedIntFilterSchema).optional(),
      _max: z.lazy(() => NestedIntFilterSchema).optional()
    })
    .strict()

export const NestedFloatFilterSchema: z.ZodType<PrismaClient.Prisma.NestedFloatFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedFloatFilterSchema)])
        .optional()
    })
    .strict()

export const NestedStringWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedStringWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedStringFilterSchema).optional(),
      _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedStringNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const NestedIntNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedIntNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedJsonNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedJsonNullableFilter> =
  z
    .object({
      equals: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      path: z.string().array().optional(),
      string_contains: z.string().optional(),
      string_starts_with: z.string().optional(),
      string_ends_with: z.string().optional(),
      array_contains: InputJsonValue.optional().nullable(),
      array_starts_with: InputJsonValue.optional().nullable(),
      array_ends_with: InputJsonValue.optional().nullable(),
      lt: InputJsonValue.optional(),
      lte: InputJsonValue.optional(),
      gt: InputJsonValue.optional(),
      gte: InputJsonValue.optional(),
      not: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional()
    })
    .strict()

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDateTimeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.date().optional().nullable(),
      in: z.date().array().optional().nullable(),
      notIn: z.date().array().optional().nullable(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([
          z.date(),
          z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
    })
    .strict()

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDateTimeWithAggregatesFilter> =
  z
    .object({
      equals: z.date().optional(),
      in: z.date().array().optional(),
      notIn: z.date().array().optional(),
      lt: z.date().optional(),
      lte: z.date().optional(),
      gt: z.date().optional(),
      gte: z.date().optional(),
      not: z
        .union([
          z.date(),
          z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
    })
    .strict()

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedBoolNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([
          z.boolean(),
          z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
    })
    .strict()

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedIntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
    })
    .strict()

export const NestedFloatNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedFloatNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedFloatNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedEnumAccountCategoryFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumAccountCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => AccountCategorySchema).optional(),
      in: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => NestedEnumAccountCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedEnumAccountCategoryWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumAccountCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => AccountCategorySchema).optional(),
      in: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => NestedEnumAccountCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumAccountCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumAccountCategoryFilterSchema).optional()
    })
    .strict()

export const NestedEnumBookingStatusFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumBookingStatusFilter> =
  z
    .object({
      equals: z.lazy(() => BookingStatusSchema).optional(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => NestedEnumBookingStatusFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedDecimalNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDecimalNullableFilter> =
  z
    .object({
      equals: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      in: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      lt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      lte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      not: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NestedDecimalNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedEnumBookingStatusWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumBookingStatusWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => BookingStatusSchema).optional(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => NestedEnumBookingStatusWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumBookingStatusFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumBookingStatusFilterSchema).optional()
    })
    .strict()

export const NestedDecimalNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedDecimalNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      in: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .array()
        .optional()
        .nullable(),
      lt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      lte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gt: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      gte: z.instanceof(PrismaClient.Prisma.Decimal).optional(),
      not: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
    })
    .strict()

export const NestedEnumProductCategoryFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumProductCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => ProductCategorySchema).optional(),
      in: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => NestedEnumProductCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedEnumAccommodationTypeNullableFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumAccommodationTypeNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedEnumProductCategoryWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumProductCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => ProductCategorySchema).optional(),
      in: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => NestedEnumProductCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumProductCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumProductCategoryFilterSchema).optional()
    })
    .strict()

export const NestedEnumAccommodationTypeNullableWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumAccommodationTypeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NestedEnumAccommodationTypeNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        .optional(),
      _max: z
        .lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        .optional()
    })
    .strict()

export const NestedEnumRoomCategoryFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumRoomCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedEnumRoomCategoryWithAggregatesFilterSchema: z.ZodType<PrismaClient.Prisma.NestedEnumRoomCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional()
    })
    .strict()

export const UserCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateWithoutTenantInput> =
  z
    .object({
      account: z
        .lazy(() => AccountCreateNestedOneWithoutAccountUsersInputSchema)
        .optional(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.date().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      accountId: z.number().optional().nullable(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.date().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.UserCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => UserCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const AccountCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutTenantInput> =
  z
    .object({
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.AccountCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => AccountCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutTenantInput> =
  z
    .object({
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z.lazy(
        () => AccountCreateNestedOneWithoutPurchasingInputSchema
      ),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      accountId: z.number(),
      customerId: z.number(),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingTravelerCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateWithoutTenantInput> =
  z
    .object({
      booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      bookingId: z.number(),
      accountId: z.number(),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTravelerCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTravelerCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutTenantInput> =
  z
    .object({
      booking: z
        .lazy(() => BookingCreateNestedOneWithoutProductsInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      bookingId: z.number(),
      accountId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyTenantInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const UserUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => UserUpdateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateManyMutationInputSchema),
        z.lazy(() => UserUncheckedUpdateManyWithoutUsersInputSchema)
      ])
    })
    .strict()

export const UserScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.UserScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => UserScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      accountId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      companyName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      jobTitle: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      department: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      managerName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fax: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      birthDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      isMaster: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => AccountUpdateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateManyMutationInputSchema),
        z.lazy(() => AccountUncheckedUpdateManyWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const AccountScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.AccountScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => AccountScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      parentId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      category: z
        .union([
          z.lazy(() => EnumAccountCategoryFilterSchema),
          z.lazy(() => AccountCategorySchema)
        ])
        .optional(),
      dobName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      taxId: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      ssn: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      brand: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fax: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      billingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      shippingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      bankName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      branch: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      bankAccount: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      notes: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      timeZone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      referralSource: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      domain: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      siteConfig: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateManyMutationInputSchema),
        z.lazy(() => BookingUncheckedUpdateManyWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const BookingScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      customerId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      customerName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      customerEmail: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      customerPhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      postalCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fromCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      travelDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adultsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      childrenCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      requestDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => EnumBookingStatusFilterSchema),
          z.lazy(() => BookingStatusSchema)
        ])
        .optional(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingTravelersInputSchema
        )
      ])
    })
    .strict()

export const BookingTravelerScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTravelerScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      bookingId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      passportExpireDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema
        )
      ])
    })
    .strict()

export const BookingProductScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      bookingId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      supplierId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      supplierName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      category: z
        .union([
          z.lazy(() => EnumProductCategoryFilterSchema),
          z.lazy(() => ProductCategorySchema)
        ])
        .optional(),
      description: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      startDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      endDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      fromLocation: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      paidDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z.instanceof(PrismaClient.Prisma.Decimal)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => EnumAccommodationTypeNullableFilterSchema),
          z.lazy(() => AccommodationTypeSchema)
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      creditCardType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutUsersInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutUsersInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutUsersInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutAccountUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutAccountUsersInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutAccountUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutAccountUsersInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutAccountUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutAccountUsersInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutAccountUsersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutAccountUsersInputSchema)
      ])
    })
    .strict()

export const TenantUpsertWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutUsersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutUsersInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutUsersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutUsersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutAccountUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutAccountUsersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutAccountUsersInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutAccountUsersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutAccountUsersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutAccountUsersInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutAccountUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutAccountUsersInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutAccountUsersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutAccountUsersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutAccountsInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutAccountsInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutAccountsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutChildAccountsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutChildAccountsInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutChildAccountsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutChildAccountsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutChildAccountsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutChildAccountsInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutChildAccountsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutChildAccountsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutParentInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutParentInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutParentInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutParentInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema)
      ])
    })
    .strict()

export const AccountCreateManyParentInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.AccountCreateManyParentInputEnvelope> =
  z
    .object({
      data: z.lazy(() => AccountCreateManyParentInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const UserCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutUsersInputSchema)
        .optional(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.date().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number().optional().nullable(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.date().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutAccountInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const UserCreateManyAccountInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.UserCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => UserCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutAccountInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      customer: z.lazy(
        () => AccountCreateNestedOneWithoutPurchasingInputSchema
      ),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      customerId: z.number(),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingCreateManyAccountInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingCreateWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutCustomerInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutCustomerInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutCustomerInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutCustomerInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema)
      ])
    })
    .strict()

export const BookingCreateManyCustomerInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingCreateManyCustomerInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingCreateManyCustomerInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingTravelerCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateWithoutAccountInput> =
  z
    .object({
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerUncheckedCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      bookingId: z.number(),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerCreateOrConnectWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTravelerCreateManyAccountInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTravelerCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingCreateNestedOneWithoutProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      bookingId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyAccountInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutAccountsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutAccountsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutAccountsInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutAccountsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutChildAccountsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutChildAccountsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutChildAccountsInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutChildAccountsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutChildAccountsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutChildAccountsInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutChildAccountsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutChildAccountsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutChildAccountsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutChildAccountsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithWhereUniqueWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithWhereUniqueWithoutParentInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => AccountUpdateWithoutParentInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutParentInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutParentInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithWhereUniqueWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithWhereUniqueWithoutParentInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateWithoutParentInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutParentInputSchema)
      ])
    })
    .strict()

export const AccountUpdateManyWithWhereWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateManyWithWhereWithoutParentInput> =
  z
    .object({
      where: z.lazy(() => AccountScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateManyMutationInputSchema),
        z.lazy(() => AccountUncheckedUpdateManyWithoutChildAccountsInputSchema)
      ])
    })
    .strict()

export const UserUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => UserUpdateWithoutAccountInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutAccountInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateWithoutAccountInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const UserUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => UserScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateManyMutationInputSchema),
        z.lazy(() => UserUncheckedUpdateManyWithoutAccountUsersInputSchema)
      ])
    })
    .strict()

export const BookingUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateManyMutationInputSchema),
        z.lazy(() => BookingUncheckedUpdateManyWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const BookingUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithWhereUniqueWithoutCustomerInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingUpdateWithoutCustomerInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutCustomerInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutCustomerInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithWhereUniqueWithoutCustomerInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateWithoutCustomerInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutCustomerInputSchema)
      ])
    })
    .strict()

export const BookingUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateManyWithWhereWithoutCustomerInput> =
  z
    .object({
      where: z.lazy(() => BookingScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateManyMutationInputSchema),
        z.lazy(() => BookingUncheckedUpdateManyWithoutPurchasingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingTravelersInputSchema
        )
      ])
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema
        )
      ])
    })
    .strict()

export const TenantCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutBookingsInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutBookingsInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutBookingsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutBookingsInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutBookingsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutBookingsInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutPurchasingInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutPurchasingInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutPurchasingInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutPurchasingInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutPurchasingInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutPurchasingInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutPurchasingInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutPurchasingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerCreateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateWithoutBookingInput> =
  z
    .object({
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerUncheckedCreateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedCreateWithoutBookingInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerCreateOrConnectWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateOrConnectWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerCreateManyBookingInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateManyBookingInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTravelerCreateManyBookingInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutBookingInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutBookingInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyBookingInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateManyBookingInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyBookingInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutBookingsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutBookingsInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutBookingsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutBookingsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutPurchasingInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutPurchasingInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutPurchasingInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutPurchasingInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutPurchasingInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutPurchasingInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutPurchasingInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutPurchasingInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutPurchasingInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutPurchasingInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpsertWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutBookingInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateManyWithWhereWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTravelersInputSchema
        )
      ])
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutBookingInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateManyWithWhereWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingProductUncheckedUpdateManyWithoutProductsInputSchema
        )
      ])
    })
    .strict()

export const TenantCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutBookingTravelersInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutBookingTravelersInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const BookingCreateWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutTravelersInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z.lazy(
        () => AccountCreateNestedOneWithoutPurchasingInputSchema
      ),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutTravelersInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      customerId: z.number(),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutTravelersInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutBookingTravelersInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutBookingTravelersInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const TenantUpsertWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutBookingTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutBookingTravelersInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUpsertWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithoutTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingUpdateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutTravelersInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneRequiredWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutTravelersInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutTravelersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutBookingTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutBookingTravelersInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingTravelersInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateWithoutBookingProductsInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantCreateOrConnectWithoutBookingProductsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const BookingCreateWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateWithoutProductsInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z.lazy(
        () => AccountCreateNestedOneWithoutPurchasingInputSchema
      ),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedCreateWithoutProductsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      customerId: z.number(),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateOrConnectWithoutProductsInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateWithoutBookingProductsInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateOrConnectWithoutBookingProductsInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const BookingProductRoomCreateWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateWithoutBookingProductInput> =
  z
    .object({
      category: z.lazy(() => RoomCategorySchema),
      adultsCount: z.number(),
      minorsCount: z.number().optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUncheckedCreateWithoutBookingProductInput> =
  z
    .object({
      id: z.number().optional(),
      category: z.lazy(() => RoomCategorySchema),
      adultsCount: z.number(),
      minorsCount: z.number().optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateOrConnectWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductRoomCreateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomCreateManyBookingProductInputEnvelopeSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomCreateManyBookingProductInputEnvelope> =
  z
    .object({
      data: z
        .lazy(() => BookingProductRoomCreateManyBookingProductInputSchema)
        .array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertWithoutBookingProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateWithoutBookingProductsInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.TenantUncheckedUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUpsertWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpsertWithoutProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingUpdateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutProductsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneRequiredWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutProductsInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutProductsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpsertWithoutBookingProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutBookingProductsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingProductsInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductRoomUpdateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema
        )
      ]),
      create: z.union([
        z.lazy(() => BookingProductRoomCreateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductRoomUpdateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateManyWithWhereWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductRoomUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingProductRoomUncheckedUpdateManyWithoutRoomsInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomScalarWhereInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      bookingProductId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductCreateWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateWithoutRoomsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingCreateNestedOneWithoutProductsInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedCreateWithoutRoomsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      bookingId: z.number(),
      accountId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateOrConnectWithoutRoomsInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
      ])
    })
    .strict()

export const BookingProductUpsertWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpsertWithoutRoomsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutRoomsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutRoomsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneWithoutProductsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutRoomsInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutRoomsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserCreateManyTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      accountId: z.number().optional().nullable(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.date().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const AccountCreateManyTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingCreateManyTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      accountId: z.number(),
      customerId: z.number(),
      ownerId: z.number(),
      customerName: z.string(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z.lazy(() => BookingStatusSchema).optional(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      totalCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.date().optional().nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerCreateManyTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      bookingId: z.number(),
      accountId: z.number(),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.date(),
      passportNumber: z.string(),
      passportIssueDate: z.date(),
      passportExpireDate: z.date(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductCreateManyTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      bookingId: z.number(),
      accountId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.date(),
      endDate: z.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      tenantMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agencyMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      agentMarkup: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      localTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      stateTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      federalTaxes: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      additionalFees: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discountPercent: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
      finalPrice: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      paymentDueDate: z.date().optional().nullable(),
      paidDate: z.date().optional().nullable(),
      paymentAmount: z
        .instanceof(PrismaClient.Prisma.Decimal)
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const UserUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithoutTenantInput> =
  z
    .object({
      account: z
        .lazy(() => AccountUpdateOneWithoutAccountUsersNestedInputSchema)
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUncheckedUpdateManyWithoutUsersInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const AccountUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutTenantInput> =
  z
    .object({
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutAccountsInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUncheckedUpdateManyWithoutAccountsInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    parentId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutTenantInput> =
  z
    .object({
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneRequiredWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutBookingsInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUncheckedUpdateManyWithoutBookingsInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingTravelerUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateWithoutTenantInput> =
  z
    .object({
      booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutBookingTravelersInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTravelerUncheckedUpdateManyWithoutBookingTravelersInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutTenantInput> =
  z
    .object({
      booking: z
        .lazy(() => BookingUpdateOneWithoutProductsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutTenantInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutBookingProductsInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    supplierId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    supplierName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    category: z
      .union([
        z.lazy(() => ProductCategorySchema),
        z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    stateTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accommodationType: z
      .union([
        z.lazy(() => AccommodationTypeSchema),
        z.lazy(
          () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
        )
      ])
      .optional()
      .nullable(),
    bookingGroupId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardLastFourDigits: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardAuthorizationCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const AccountCreateManyParentInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountCreateManyParentInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    ownerId: z.number().int(),
    name: z.string(),
    category: z.lazy(() => AccountCategorySchema),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    ssn: z.string().optional().nullable(),
    brand: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z.string().optional().nullable(),
    privacyPolicy: z.string().optional().nullable(),
    bankName: z.string().optional().nullable(),
    branch: z.string().optional().nullable(),
    bankAccount: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    timeZone: z.string().optional().nullable(),
    referralSource: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    siteConfig: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const UserCreateManyAccountInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserCreateManyAccountInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int().optional().nullable(),
    firstName: z.string(),
    lastName: z.string(),
    companyName: z.string().optional().nullable(),
    jobTitle: z.string().optional().nullable(),
    department: z.string().optional().nullable(),
    managerName: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z.string().optional().nullable(),
    birthDate: z.date().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isMaster: z.boolean().optional().nullable()
  })
  .strict()

export const BookingCreateManyAccountInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingCreateManyAccountInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    customerId: z.number(),
    ownerId: z.number().int(),
    customerName: z.string(),
    customerEmail: z.string().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().optional().nullable(),
    childrenCount: z.number().optional().nullable(),
    seniorsCount: z.number().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z.lazy(() => BookingStatusSchema).optional(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingCreateManyCustomerInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingCreateManyCustomerInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    ownerId: z.number().int(),
    customerName: z.string(),
    customerEmail: z.string().email().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z.lazy(() => BookingStatusSchema).optional(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    totalCost: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.date().optional().nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingTravelerCreateManyAccountInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerCreateManyAccountInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    ownerId: z.number().int(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductCreateManyAccountInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductCreateManyAccountInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    supplierId: z.number().optional().nullable(),
    supplierName: z.string().optional().nullable(),
    ownerId: z.number().int(),
    category: z.lazy(() => ProductCategorySchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    stateTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z.date().optional().nullable(),
    paidDate: z.date().optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z.string().optional().nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z.string().optional().nullable(),
    accommodationType: z
      .lazy(() => AccommodationTypeSchema)
      .optional()
      .nullable(),
    bookingGroupId: z.number().optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentDescription: z.string().optional().nullable(),
    creditCardType: z.string().optional().nullable(),
    creditCardLastFourDigits: z.number().optional().nullable(),
    creditCardAuthorizationCode: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const AccountUpdateWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountUpdateWithoutParentInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutParentInputSchema: z.ZodType<PrismaClient.Prisma.AccountUncheckedUpdateWithoutParentInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutChildAccountsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.AccountUncheckedUpdateManyWithoutChildAccountsInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const UserUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserUpdateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutUsersNestedInputSchema)
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.UserUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutAccountUsersInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.UserUncheckedUpdateManyWithoutAccountUsersInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneRequiredWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUpdateWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingUpdateWithoutCustomerInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<PrismaClient.Prisma.BookingUncheckedUpdateWithoutCustomerInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutPurchasingInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingUncheckedUpdateManyWithoutPurchasingInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => EnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingTravelerUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneWithoutProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutAccountInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingTravelerCreateManyBookingInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerCreateManyBookingInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    ownerId: z.number().int(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.date(),
    passportNumber: z.string(),
    passportIssueDate: z.date(),
    passportExpireDate: z.date(),
    email: z.string(),
    phone: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductCreateManyBookingInputSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductCreateManyBookingInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    supplierId: z.number().optional().nullable(),
    supplierName: z.string().optional().nullable(),
    ownerId: z.number().int(),
    category: z.lazy(() => ProductCategorySchema),
    description: z.string().optional().nullable(),
    startDate: z.date(),
    endDate: z.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    productCost: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    tenantMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agencyMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    agentMarkup: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    localTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    stateTaxes: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    federalTaxes: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    additionalFees: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discountPercent: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    discount: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    finalPrice: z.instanceof(PrismaClient.Prisma.Decimal).optional().nullable(),
    paymentDueDate: z.date().optional().nullable(),
    paidDate: z.date().optional().nullable(),
    paymentAmount: z
      .instanceof(PrismaClient.Prisma.Decimal)
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z.string().optional().nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z.string().optional().nullable(),
    accommodationType: z
      .lazy(() => AccommodationTypeSchema)
      .optional()
      .nullable(),
    bookingGroupId: z.number().optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentDescription: z.string().optional().nullable(),
    creditCardType: z.string().optional().nullable(),
    creditCardLastFourDigits: z.number().optional().nullable(),
    creditCardAuthorizationCode: z.string().optional().nullable(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingTravelerUpdateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUpdateWithoutBookingInput> =
  z
    .object({
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerUncheckedUpdateWithoutBookingInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutTravelersInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingTravelerUncheckedUpdateManyWithoutTravelersInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    passportExpireDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    email: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductUpdateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUpdateWithoutBookingInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutBookingInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductUncheckedUpdateWithoutBookingInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.instanceof(PrismaClient.Prisma.Decimal),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutProductsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductUncheckedUpdateManyWithoutProductsInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    supplierId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    supplierName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    category: z
      .union([
        z.lazy(() => ProductCategorySchema),
        z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    endDate: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    stateTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.instanceof(PrismaClient.Prisma.Decimal),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accommodationType: z
      .union([
        z.lazy(() => AccommodationTypeSchema),
        z.lazy(
          () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
        )
      ])
      .optional()
      .nullable(),
    bookingGroupId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardLastFourDigits: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardAuthorizationCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductRoomCreateManyBookingProductInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomCreateManyBookingProductInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.number().optional(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number().optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductRoomUpdateWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUpdateWithoutBookingProductInput> =
  z
    .object({
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomUncheckedUpdateWithoutBookingProductInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z
        .union([
          z.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateManyWithoutRoomsInputSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUncheckedUpdateManyWithoutRoomsInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z
      .union([
        z.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const TenantFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindFirstArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: TenantScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const TenantFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindFirstOrThrowArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: TenantScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const TenantFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindManyArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: TenantScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const TenantAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.TenantAggregateArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const TenantGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.TenantGroupByArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithAggregationInputSchema.array(),
          TenantOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: TenantScalarFieldEnumSchema.array(),
      having: TenantScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const TenantFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindUniqueArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const TenantFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.TenantFindUniqueOrThrowArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const UserFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindFirstArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: UserScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const UserFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindFirstOrThrowArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: UserScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const UserFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindManyArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: UserScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const UserAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.UserAggregateArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const UserGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.UserGroupByArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithAggregationInputSchema.array(),
          UserOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: UserScalarFieldEnumSchema.array(),
      having: UserScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const UserFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindUniqueArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereUniqueInputSchema
    })
    .strict()

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.UserFindUniqueOrThrowArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereUniqueInputSchema
    })
    .strict()

export const AccountFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindFirstArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindFirstOrThrowArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindManyArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.AccountAggregateArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const AccountGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.AccountGroupByArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithAggregationInputSchema.array(),
          AccountOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: AccountScalarFieldEnumSchema.array(),
      having: AccountScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const AccountFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindUniqueArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema
    })
    .strict()

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.AccountFindUniqueOrThrowArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema
    })
    .strict()

export const BookingFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindFirstArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindManyArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.BookingAggregateArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.BookingGroupByArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithAggregationInputSchema.array(),
          BookingOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingScalarFieldEnumSchema.array(),
      having: BookingScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindUniqueArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereUniqueInputSchema
    })
    .strict()

export const BookingFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereUniqueInputSchema
    })
    .strict()

export const BookingTravelerFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerFindFirstArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithRelationInputSchema.array(),
          BookingTravelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTravelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTravelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTravelerFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithRelationInputSchema.array(),
          BookingTravelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTravelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTravelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTravelerFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerFindManyArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithRelationInputSchema.array(),
          BookingTravelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTravelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTravelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTravelerAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerAggregateArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithRelationInputSchema.array(),
          BookingTravelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTravelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingTravelerGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerGroupByArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithAggregationInputSchema.array(),
          BookingTravelerOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingTravelerScalarFieldEnumSchema.array(),
      having: BookingTravelerScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingTravelerFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerFindUniqueArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereUniqueInputSchema
    })
    .strict()

export const BookingTravelerFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereUniqueInputSchema
    })
    .strict()

export const BookingProductFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindFirstArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindManyArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductAggregateArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductGroupByArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithAggregationInputSchema.array(),
          BookingProductOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingProductScalarFieldEnumSchema.array(),
      having: BookingProductScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindUniqueArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomFindFirstArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindFirstArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomFindFirstOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomFindManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindManyArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomAggregateArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomAggregateArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductRoomGroupByArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomGroupByArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithAggregationInputSchema.array(),
          BookingProductRoomOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingProductRoomScalarFieldEnumSchema.array(),
      having: BookingProductRoomScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductRoomFindUniqueArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindUniqueArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomFindUniqueOrThrowArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const TenantCreateArgsSchema: z.ZodType<PrismaClient.Prisma.TenantCreateArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      data: z.union([TenantCreateInputSchema, TenantUncheckedCreateInputSchema])
    })
    .strict()

export const TenantUpsertArgsSchema: z.ZodType<PrismaClient.Prisma.TenantUpsertArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema,
      create: z.union([
        TenantCreateInputSchema,
        TenantUncheckedCreateInputSchema
      ]),
      update: z.union([
        TenantUpdateInputSchema,
        TenantUncheckedUpdateInputSchema
      ])
    })
    .strict()

export const TenantCreateManyArgsSchema: z.ZodType<PrismaClient.Prisma.TenantCreateManyArgs> =
  z
    .object({
      data: TenantCreateManyInputSchema.array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.TenantDeleteArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const TenantUpdateArgsSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      data: z.union([
        TenantUpdateInputSchema,
        TenantUncheckedUpdateInputSchema
      ]),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const TenantUpdateManyArgsSchema: z.ZodType<PrismaClient.Prisma.TenantUpdateManyArgs> =
  z
    .object({
      data: z.union([
        TenantUpdateManyMutationInputSchema,
        TenantUncheckedUpdateManyInputSchema
      ]),
      where: TenantWhereInputSchema.optional()
    })
    .strict()

export const TenantDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.TenantDeleteManyArgs> =
  z
    .object({
      where: TenantWhereInputSchema.optional()
    })
    .strict()

export const UserCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserCreateArgs, 'data'> & {
    data:
      | z.infer<typeof UserCreateInputSchema>
      | z.infer<typeof UserUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    data: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema])
  })
  .strict()

export const UserUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof UserCreateInputSchema>
      | z.infer<typeof UserUncheckedCreateInputSchema>
    update:
      | z.infer<typeof UserUpdateInputSchema>
      | z.infer<typeof UserUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereUniqueInputSchema,
    create: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema]),
    update: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema])
  })
  .strict()

export const UserCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserCreateManyArgs, 'data'> & {
    data: z.infer<typeof UserCreateManyInputSchema>[]
  }
> = z
  .object({
    data: UserCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const UserDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.UserDeleteArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereUniqueInputSchema
    })
    .strict()

export const UserUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof UserUpdateInputSchema>
      | z.infer<typeof UserUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    data: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema]),
    where: UserWhereUniqueInputSchema
  })
  .strict()

export const UserUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.UserUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof UserUpdateManyMutationInputSchema>
      | z.infer<typeof UserUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      UserUpdateManyMutationInputSchema,
      UserUncheckedUpdateManyInputSchema
    ]),
    where: UserWhereInputSchema.optional()
  })
  .strict()

export const UserDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.UserDeleteManyArgs> =
  z
    .object({
      where: UserWhereInputSchema.optional()
    })
    .strict()

export const AccountCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountCreateArgs, 'data'> & {
    data:
      | z.infer<typeof AccountCreateInputSchema>
      | z.infer<typeof AccountUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    data: z.union([AccountCreateInputSchema, AccountUncheckedCreateInputSchema])
  })
  .strict()

export const AccountUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof AccountCreateInputSchema>
      | z.infer<typeof AccountUncheckedCreateInputSchema>
    update:
      | z.infer<typeof AccountUpdateInputSchema>
      | z.infer<typeof AccountUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    where: AccountWhereUniqueInputSchema,
    create: z.union([
      AccountCreateInputSchema,
      AccountUncheckedCreateInputSchema
    ]),
    update: z.union([
      AccountUpdateInputSchema,
      AccountUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const AccountCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountCreateManyArgs, 'data'> & {
    data: z.infer<typeof AccountCreateManyInputSchema>[]
  }
> = z
  .object({
    data: AccountCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const AccountDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.AccountDeleteArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema
    })
    .strict()

export const AccountUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof AccountUpdateInputSchema>
      | z.infer<typeof AccountUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    data: z.union([
      AccountUpdateInputSchema,
      AccountUncheckedUpdateInputSchema
    ]),
    where: AccountWhereUniqueInputSchema
  })
  .strict()

export const AccountUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.AccountUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof AccountUpdateManyMutationInputSchema>
      | z.infer<typeof AccountUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      AccountUpdateManyMutationInputSchema,
      AccountUncheckedUpdateManyInputSchema
    ]),
    where: AccountWhereInputSchema.optional()
  })
  .strict()

export const AccountDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.AccountDeleteManyArgs> =
  z
    .object({
      where: AccountWhereInputSchema.optional()
    })
    .strict()

export const BookingCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingCreateInputSchema>
      | z.infer<typeof BookingUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    data: z.union([BookingCreateInputSchema, BookingUncheckedCreateInputSchema])
  })
  .strict()

export const BookingUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingCreateInputSchema>
      | z.infer<typeof BookingUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingUpdateInputSchema>
      | z.infer<typeof BookingUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    where: BookingWhereUniqueInputSchema,
    create: z.union([
      BookingCreateInputSchema,
      BookingUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingUpdateInputSchema,
      BookingUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.BookingDeleteArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereUniqueInputSchema
    })
    .strict()

export const BookingUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingUpdateInputSchema>
      | z.infer<typeof BookingUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    data: z.union([
      BookingUpdateInputSchema,
      BookingUncheckedUpdateInputSchema
    ]),
    where: BookingWhereUniqueInputSchema
  })
  .strict()

export const BookingUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingUpdateManyMutationInputSchema>
      | z.infer<typeof BookingUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingUpdateManyMutationInputSchema,
      BookingUncheckedUpdateManyInputSchema
    ]),
    where: BookingWhereInputSchema.optional()
  })
  .strict()

export const BookingDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingDeleteManyArgs> =
  z
    .object({
      where: BookingWhereInputSchema.optional()
    })
    .strict()

export const BookingTravelerCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTravelerCreateInputSchema>
      | z.infer<typeof BookingTravelerUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingTravelerSelectSchema.optional(),
    include: BookingTravelerIncludeSchema.optional(),
    data: z.union([
      BookingTravelerCreateInputSchema,
      BookingTravelerUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingTravelerUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingTravelerCreateInputSchema>
      | z.infer<typeof BookingTravelerUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingTravelerUpdateInputSchema>
      | z.infer<typeof BookingTravelerUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingTravelerSelectSchema.optional(),
    include: BookingTravelerIncludeSchema.optional(),
    where: BookingTravelerWhereUniqueInputSchema,
    create: z.union([
      BookingTravelerCreateInputSchema,
      BookingTravelerUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingTravelerUpdateInputSchema,
      BookingTravelerUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingTravelerCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingTravelerCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingTravelerCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingTravelerDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerDeleteArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereUniqueInputSchema
    })
    .strict()

export const BookingTravelerUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTravelerUpdateInputSchema>
      | z.infer<typeof BookingTravelerUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingTravelerSelectSchema.optional(),
    include: BookingTravelerIncludeSchema.optional(),
    data: z.union([
      BookingTravelerUpdateInputSchema,
      BookingTravelerUncheckedUpdateInputSchema
    ]),
    where: BookingTravelerWhereUniqueInputSchema
  })
  .strict()

export const BookingTravelerUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingTravelerUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTravelerUpdateManyMutationInputSchema>
      | z.infer<typeof BookingTravelerUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingTravelerUpdateManyMutationInputSchema,
      BookingTravelerUncheckedUpdateManyInputSchema
    ]),
    where: BookingTravelerWhereInputSchema.optional()
  })
  .strict()

export const BookingTravelerDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingTravelerDeleteManyArgs> =
  z
    .object({
      where: BookingTravelerWhereInputSchema.optional()
    })
    .strict()

export const BookingProductCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductCreateInputSchema>
      | z.infer<typeof BookingProductUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    data: z.union([
      BookingProductCreateInputSchema,
      BookingProductUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingProductUpsertArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingProductCreateInputSchema>
      | z.infer<typeof BookingProductUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingProductUpdateInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    where: BookingProductWhereUniqueInputSchema,
    create: z.union([
      BookingProductCreateInputSchema,
      BookingProductUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingProductUpdateInputSchema,
      BookingProductUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingProductCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingProductCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingProductCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingProductDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductDeleteArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductUpdateInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    data: z.union([
      BookingProductUpdateInputSchema,
      BookingProductUncheckedUpdateInputSchema
    ]),
    where: BookingProductWhereUniqueInputSchema
  })
  .strict()

export const BookingProductUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductUpdateManyMutationInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingProductUpdateManyMutationInputSchema,
      BookingProductUncheckedUpdateManyInputSchema
    ]),
    where: BookingProductWhereInputSchema.optional()
  })
  .strict()

export const BookingProductDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductDeleteManyArgs> =
  z
    .object({
      where: BookingProductWhereInputSchema.optional()
    })
    .strict()

export const BookingProductRoomCreateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomCreateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    data: z.union([
      BookingProductRoomCreateInputSchema,
      BookingProductRoomUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingProductRoomUpsertArgsSchema: z.ZodType<
  Omit<
    PrismaClient.Prisma.BookingProductRoomUpsertArgs,
    'create' | 'update'
  > & {
    create:
      | z.infer<typeof BookingProductRoomCreateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingProductRoomUpdateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    where: BookingProductRoomWhereUniqueInputSchema,
    create: z.union([
      BookingProductRoomCreateInputSchema,
      BookingProductRoomUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingProductRoomUpdateInputSchema,
      BookingProductRoomUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingProductRoomCreateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingProductRoomCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingProductRoomCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingProductRoomDeleteArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomDeleteArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomUpdateArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomUpdateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    data: z.union([
      BookingProductRoomUpdateInputSchema,
      BookingProductRoomUncheckedUpdateInputSchema
    ]),
    where: BookingProductRoomWhereUniqueInputSchema
  })
  .strict()

export const BookingProductRoomUpdateManyArgsSchema: z.ZodType<
  Omit<PrismaClient.Prisma.BookingProductRoomUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomUpdateManyMutationInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingProductRoomUpdateManyMutationInputSchema,
      BookingProductRoomUncheckedUpdateManyInputSchema
    ]),
    where: BookingProductRoomWhereInputSchema.optional()
  })
  .strict()

export const BookingProductRoomDeleteManyArgsSchema: z.ZodType<PrismaClient.Prisma.BookingProductRoomDeleteManyArgs> =
  z
    .object({
      where: BookingProductRoomWhereInputSchema.optional()
    })
    .strict()
