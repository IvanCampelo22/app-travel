import { z } from 'zod'
import { Prisma } from '@prisma/client'

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput =
  | Prisma.JsonValue
  | null
  | 'JsonNull'
  | 'DbNull'
  | Prisma.NullTypes.DbNull
  | Prisma.NullTypes.JsonNull

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull
  if (v === 'JsonNull') return Prisma.JsonNull
  return v
}

export const JsonValue: z.ZodType<Prisma.JsonValue> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(JsonValue)),
  z.lazy(() => z.record(JsonValue))
])

export type JsonValueType = z.infer<typeof JsonValue>

export const NullableJsonValue = z
  .union([JsonValue, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v))

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>

export const InputJsonValue: z.ZodType<Prisma.InputJsonValue> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(InputJsonValue.nullable())),
  z.lazy(() => z.record(InputJsonValue.nullable()))
])

export type InputJsonValueType = z.infer<typeof InputJsonValue>

// DECIMAL
//------------------------------------------------------

export const DecimalJSLikeSchema = z.object({
  d: z.array(z.number()),
  e: z.number(),
  s: z.number()
})

export type DecimalJSLike = z.infer<typeof DecimalJSLikeSchema>

export const DecimalJSLikeListSchema = z
  .object({ d: z.array(z.number()), e: z.number(), s: z.number() })
  .array()

export const DECIMAL_STRING_REGEX = /^[0-9.,e+-bxffo_cp]+$|Infinity|NaN/

export const isValidDecimalInput = (
  v?: null | string | number | DecimalJSLike
) => {
  if (!v) return false
  return (
    (typeof v === 'object' && 'd' in v && 'e' in v && 's' in v) ||
    (typeof v === 'string' && DECIMAL_STRING_REGEX.test(v)) ||
    typeof v === 'number'
  )
}

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const AccountScalarFieldEnumSchema = z.enum([
  'id',
  'tenantId',
  'parentId',
  'ownerId',
  'name',
  'category',
  'dobName',
  'taxId',
  'ssn',
  'brand',
  'email',
  'phone',
  'mobilePhone',
  'fax',
  'billingAdresses',
  'shippingAdresses',
  'termsAndConditions',
  'privacyPolicy',
  'bankName',
  'branch',
  'bankAccount',
  'notes',
  'countryCode',
  'currencyCode',
  'locale',
  'timeZone',
  'referralSource',
  'domain',
  'siteConfig',
  'createdAt',
  'createdBy',
  'modifiedAt',
  'modifiedBy',
  'isActive'
])

export const BookingProductRoomScalarFieldEnumSchema = z.enum([
  'id',
  'bookingProductId',
  'category',
  'adultsCount',
  'minorsCount',
  'ageOfMinors',
  'createdAt',
  'createdBy',
  'modifiedAt',
  'modifiedBy',
  'isActive'
])

export const BookingProductScalarFieldEnumSchema = z.enum([
  'id',
  'tenantId',
  'bookingId',
  'accountId',
  'supplierId',
  'supplierName',
  'ownerId',
  'category',
  'description',
  'startDate',
  'endDate',
  'fromLocation',
  'toLocation',
  'termsAndConditions',
  'locatorCode',
  'productCost',
  'tenantMarkup',
  'agencyMarkup',
  'agentMarkup',
  'localTaxes',
  'stateTaxes',
  'federalTaxes',
  'additionalFees',
  'discountPercent',
  'discount',
  'finalPrice',
  'paymentDueDate',
  'paidDate',
  'paymentAmount',
  'voucherFilePath',
  'receiptFilePath',
  'invoiceFilePath',
  'status',
  'hotelName',
  'hotelStarRating',
  'hotelMealPlan',
  'accommodationType',
  'bookingGroupId',
  'paymentType',
  'paymentDescription',
  'creditCardType',
  'creditCardLastFourDigits',
  'creditCardAuthorizationCode',
  'createdAt',
  'createdBy',
  'modifiedAt',
  'modifiedBy',
  'isActive'
])

export const BookingScalarFieldEnumSchema = z.enum([
  'id',
  'tenantId',
  'accountId',
  'customerId',
  'ownerId',
  'customerName',
  'customerEmail',
  'customerPhone',
  'postalCode',
  'fromCity',
  'toCity',
  'travelDate',
  'travelPeriod',
  'adultsCount',
  'childrenCount',
  'seniorsCount',
  'requestDescription',
  'status',
  'locatorCode',
  'totalPrice',
  'totalCost',
  'paymentType',
  'paymentStatus',
  'paymentDateTime',
  'discountPercent',
  'discountAmount',
  'paymentAmount',
  'voucherFilePath',
  'receiptFilePath',
  'invoiceFilePath',
  'createdAt',
  'createdBy',
  'modifiedAt',
  'modifiedBy',
  'isActive'
])

export const BookingTravelerScalarFieldEnumSchema = z.enum([
  'id',
  'tenantId',
  'bookingId',
  'accountId',
  'ownerId',
  'firstName',
  'lastName',
  'birthDate',
  'passportNumber',
  'passportIssueDate',
  'passportExpireDate',
  'email',
  'phone',
  'createdAt',
  'createdBy',
  'modifiedAt',
  'modifiedBy',
  'isActive'
])

export const JsonNullValueFilterSchema = z.enum([
  'DbNull',
  'JsonNull',
  'AnyNull'
])

export const NullableJsonNullValueInputSchema = z
  .enum(['DbNull', 'JsonNull'])
  .transform((v) => transformJsonNull(v))

export const QueryModeSchema = z.enum(['default', 'insensitive'])

export const SortOrderSchema = z.enum(['asc', 'desc'])

export const TenantScalarFieldEnumSchema = z.enum([
  'id',
  'name',
  'dobName',
  'taxId',
  'brand',
  'contactPrefix',
  'contactFirstName',
  'contactMiddleName',
  'contactLastName',
  'contactSuffix',
  'jobTitle',
  'email',
  'phone',
  'mobilePhone',
  'fax',
  'billingAdresses',
  'shippingAdresses',
  'termsAndConditions',
  'privacyPolicy',
  'bankName',
  'branch',
  'bankAccount',
  'notes',
  'countryCode',
  'currencyCode',
  'locale',
  'timeZone',
  'referralSource',
  'domain',
  'siteConfig',
  'createdAt',
  'createdBy',
  'modifiedAt',
  'modifiedBy',
  'isActive',
  'isMaster'
])

export const TransactionIsolationLevelSchema = z.enum([
  'ReadUncommitted',
  'ReadCommitted',
  'RepeatableRead',
  'Serializable'
])

export const UserScalarFieldEnumSchema = z.enum([
  'id',
  'tenantId',
  'accountId',
  'externalId',
  'firstName',
  'lastName',
  'companyName',
  'jobTitle',
  'department',
  'managerName',
  'email',
  'phone',
  'mobilePhone',
  'fax',
  'adresses',
  'gender',
  'birthDate',
  'createdAt',
  'createdBy',
  'modifiedAt',
  'modifiedBy',
  'isActive',
  'isMaster'
])

export const AccountCategorySchema = z.enum([
  'Agency',
  'InternalAgent',
  'Customer',
  'Supplier',
  'Influencer'
])

export type AccountCategoryType = `${z.infer<typeof AccountCategorySchema>}`

export const BookingStatusSchema = z.enum([
  'WaitingService',
  'WaitingCustomer',
  'WaitingPayment',
  'Paid',
  'QuoteSend',
  'Canceled',
  'RefundRequested',
  'Refunded'
])

export type BookingStatusType = `${z.infer<typeof BookingStatusSchema>}`

export const ProductCategorySchema = z.enum(['Accommodation'])

export type ProductCategoryType = `${z.infer<typeof ProductCategorySchema>}`

export const AccommodationTypeSchema = z.enum(['Hotel', 'Resort'])

export type AccommodationTypeType = `${z.infer<typeof AccommodationTypeSchema>}`

export const RoomCategorySchema = z.enum([
  'SuiteMaster',
  'SuitePremium',
  'SuiteJunior'
])

export type RoomCategoryType = `${z.infer<typeof RoomCategorySchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

// TENANT
//------------------------------------------------------

export const TenantSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  dobName: z.string().nullable(),
  taxId: z.string().nullable(),
  brand: z.string().nullable(),
  contactPrefix: z.string().nullable(),
  contactFirstName: z.string().nullable(),
  contactMiddleName: z.string().nullable(),
  contactLastName: z.string().nullable(),
  contactSuffix: z.string().nullable(),
  jobTitle: z.string().nullable(),
  email: z.string().email(),
  phone: z.string().nullable(),
  mobilePhone: z.string().nullable(),
  fax: z.string().nullable(),
  billingAdresses: NullableJsonValue.optional(),
  shippingAdresses: NullableJsonValue.optional(),
  termsAndConditions: z.string().nullable(),
  privacyPolicy: z.string().nullable(),
  bankName: z.string().nullable(),
  branch: z.string().nullable(),
  bankAccount: z.string().nullable(),
  notes: z.string().nullable(),
  countryCode: z.string().nullable(),
  currencyCode: z.string().nullable(),
  locale: z.string().nullable(),
  timeZone: z.string().nullable(),
  referralSource: z.string().nullable(),
  domain: z.string().nullable(),
  siteConfig: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  modifiedAt: z.coerce.date(),
  modifiedBy: z.string().nullable(),
  isActive: z.boolean().nullable(),
  isMaster: z.boolean().nullable()
})

// USER
//------------------------------------------------------

export const UserSchema = z.object({
  // omitted: id: z.number(),
  tenantId: z.number().int().nullable(),
  accountId: z.number().int().nullable(),
  externalId: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  companyName: z.string().nullable(),
  jobTitle: z.string().nullable(),
  department: z.string().nullable(),
  managerName: z.string().nullable(),
  email: z.string().email(),
  phone: z.string().nullable(),
  mobilePhone: z.string().nullable(),
  fax: z.string().nullable(),
  adresses: NullableJsonValue.optional(),
  gender: z.string().nullable(),
  birthDate: z.coerce.date().nullable(),
  createdAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  modifiedAt: z.coerce.date().nullable(),
  modifiedBy: z.string().nullable(),
  isActive: z.boolean().nullable(),
  isMaster: z.boolean().nullable()
})

// ACCOUNT
//------------------------------------------------------

export const AccountSchema = z.object({
  category: AccountCategorySchema,
  // omitted: id: z.number(),
  tenantId: z.number().int(),
  parentId: z.number().int().nullable(),
  ownerId: z.number().int(),
  name: z.string(),
  dobName: z.string().nullable(),
  taxId: z.string().nullable(),
  ssn: z.string().nullable(),
  brand: z.string().nullable(),
  email: z.string().email(),
  phone: z.string().nullable(),
  mobilePhone: z.string().nullable(),
  fax: z.string().nullable(),
  billingAdresses: NullableJsonValue.optional(),
  shippingAdresses: NullableJsonValue.optional(),
  termsAndConditions: z.string().nullable(),
  privacyPolicy: z.string().nullable(),
  bankName: z.string().nullable(),
  branch: z.string().nullable(),
  bankAccount: z.string().nullable(),
  notes: z.string().nullable(),
  countryCode: z.string().nullable(),
  currencyCode: z.string().nullable(),
  locale: z.string().nullable(),
  timeZone: z.string().nullable(),
  referralSource: z.string().nullable(),
  domain: z.string().nullable(),
  siteConfig: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  modifiedAt: z.coerce.date(),
  modifiedBy: z.string().nullable(),
  isActive: z.boolean().nullable()
})

// BOOKING
//------------------------------------------------------

export const BookingSchema = z.object({
  status: BookingStatusSchema.nullable(),
  // omitted: id: z.number(),
  tenantId: z.number().int(),
  accountId: z.number().int(),
  customerId: z.number().int().nullable(),
  ownerId: z.number().int().nullable(),
  customerName: z.string().nullable(),
  customerEmail: z.string().email().nullable(),
  customerPhone: z.string().nullable(),
  postalCode: z.string().nullable(),
  fromCity: z.string().nullable(),
  toCity: z.string().nullable(),
  travelDate: z.coerce.date().nullable(),
  travelPeriod: z.string().nullable(),
  adultsCount: z.number().int().nullable(),
  childrenCount: z.number().int().nullable(),
  seniorsCount: z.number().int().nullable(),
  requestDescription: z.string().nullable(),
  locatorCode: z.string().nullable(),
  totalPrice: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "totalPrice" must be a Decimal',
      path: ['Models', 'Booking']
    })
    .nullable(),
  totalCost: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "totalCost" must be a Decimal',
      path: ['Models', 'Booking']
    })
    .nullable(),
  paymentType: z.string().nullable(),
  paymentStatus: z.string().nullable(),
  paymentDateTime: z.coerce.date().nullable(),
  discountPercent: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "discountPercent" must be a Decimal',
      path: ['Models', 'Booking']
    })
    .nullable(),
  discountAmount: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "discountAmount" must be a Decimal',
      path: ['Models', 'Booking']
    })
    .nullable(),
  paymentAmount: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "paymentAmount" must be a Decimal',
      path: ['Models', 'Booking']
    })
    .nullable(),
  voucherFilePath: z.string().nullable(),
  receiptFilePath: z.string().nullable(),
  invoiceFilePath: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  modifiedAt: z.coerce.date().nullable(),
  modifiedBy: z.string().nullable(),
  isActive: z.boolean().nullable()
})

// BOOKING TRAVELER
//------------------------------------------------------

export const BookingTravelerSchema = z.object({
  // omitted: id: z.number(),
  tenantId: z.number().int(),
  bookingId: z.number().int(),
  accountId: z.number().int(),
  ownerId: z.number().int(),
  firstName: z.string(),
  lastName: z.string(),
  birthDate: z.coerce.date(),
  passportNumber: z.string(),
  passportIssueDate: z.coerce.date(),
  passportExpireDate: z.coerce.date(),
  email: z.string().email(),
  phone: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  modifiedAt: z.coerce.date(),
  modifiedBy: z.string().nullable(),
  isActive: z.boolean().nullable()
})

// BOOKING PRODUCT
//------------------------------------------------------

export const BookingProductSchema = z.object({
  category: ProductCategorySchema,
  accommodationType: AccommodationTypeSchema.nullable(),
  // omitted: id: z.number(),
  tenantId: z.number().int(),
  bookingId: z.number().int(),
  accountId: z.number().int(),
  supplierId: z.number().int().nullable(),
  supplierName: z.string().nullable(),
  ownerId: z.number().int(),
  description: z.string().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  fromLocation: z.string().nullable(),
  toLocation: z.string(),
  termsAndConditions: z.string().nullable(),
  locatorCode: z.string().nullable(),
  productCost: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "productCost" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  tenantMarkup: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "tenantMarkup" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  agencyMarkup: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "agencyMarkup" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  agentMarkup: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "agentMarkup" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  localTaxes: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "localTaxes" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  stateTaxes: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "stateTaxes" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  federalTaxes: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "federalTaxes" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  additionalFees: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "additionalFees" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  discountPercent: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "discountPercent" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  discount: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "discount" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  finalPrice: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "finalPrice" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  paymentDueDate: z.coerce.date().nullable(),
  paidDate: z.coerce.date().nullable(),
  paymentAmount: z
    .union([z.number(), z.string(), DecimalJSLikeSchema])
    .refine((v) => isValidDecimalInput(v), {
      message: 'Field "paymentAmount" must be a Decimal',
      path: ['Models', 'BookingProduct']
    })
    .nullable(),
  voucherFilePath: z.string().nullable(),
  receiptFilePath: z.string().nullable(),
  invoiceFilePath: z.string().nullable(),
  status: z.string().nullable(),
  hotelName: z.string().nullable(),
  hotelStarRating: z.number().int().nullable(),
  hotelMealPlan: z.string().nullable(),
  bookingGroupId: z.number().int().nullable(),
  paymentType: z.string().nullable(),
  paymentDescription: z.string().nullable(),
  creditCardType: z.string().nullable(),
  creditCardLastFourDigits: z.number().int().nullable(),
  creditCardAuthorizationCode: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  modifiedAt: z.coerce.date(),
  modifiedBy: z.string().nullable(),
  isActive: z.boolean().nullable()
})

// BOOKING PRODUCT ROOM
//------------------------------------------------------

export const BookingProductRoomSchema = z.object({
  category: RoomCategorySchema,
  // omitted: id: z.number(),
  bookingProductId: z.number().int(),
  adultsCount: z.number().int(),
  minorsCount: z.number().int(),
  ageOfMinors: z.number().int().array(),
  createdAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  modifiedAt: z.coerce.date(),
  modifiedBy: z.string().nullable(),
  isActive: z.boolean().nullable()
})

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// TENANT
//------------------------------------------------------

export const TenantIncludeSchema: z.ZodType<Prisma.TenantInclude> = z
  .object({
    users: z
      .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
      .optional(),
    accounts: z
      .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
      .optional(),
    bookings: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    bookingTravelers: z
      .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
      .optional(),
    bookingProducts: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => TenantCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

export const TenantArgsSchema: z.ZodType<Prisma.TenantArgs> = z
  .object({
    select: z.lazy(() => TenantSelectSchema).optional(),
    include: z.lazy(() => TenantIncludeSchema).optional()
  })
  .strict()

export const TenantCountOutputTypeArgsSchema: z.ZodType<Prisma.TenantCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => TenantCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const TenantCountOutputTypeSelectSchema: z.ZodType<Prisma.TenantCountOutputTypeSelect> =
  z
    .object({
      users: z.boolean().optional(),
      accounts: z.boolean().optional(),
      bookings: z.boolean().optional(),
      bookingTravelers: z.boolean().optional(),
      bookingProducts: z.boolean().optional()
    })
    .strict()

export const TenantSelectSchema: z.ZodType<Prisma.TenantSelect> = z
  .object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    dobName: z.boolean().optional(),
    taxId: z.boolean().optional(),
    brand: z.boolean().optional(),
    contactPrefix: z.boolean().optional(),
    contactFirstName: z.boolean().optional(),
    contactMiddleName: z.boolean().optional(),
    contactLastName: z.boolean().optional(),
    contactSuffix: z.boolean().optional(),
    jobTitle: z.boolean().optional(),
    email: z.boolean().optional(),
    phone: z.boolean().optional(),
    mobilePhone: z.boolean().optional(),
    fax: z.boolean().optional(),
    billingAdresses: z.boolean().optional(),
    shippingAdresses: z.boolean().optional(),
    termsAndConditions: z.boolean().optional(),
    privacyPolicy: z.boolean().optional(),
    bankName: z.boolean().optional(),
    branch: z.boolean().optional(),
    bankAccount: z.boolean().optional(),
    notes: z.boolean().optional(),
    countryCode: z.boolean().optional(),
    currencyCode: z.boolean().optional(),
    locale: z.boolean().optional(),
    timeZone: z.boolean().optional(),
    referralSource: z.boolean().optional(),
    domain: z.boolean().optional(),
    siteConfig: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    createdBy: z.boolean().optional(),
    modifiedAt: z.boolean().optional(),
    modifiedBy: z.boolean().optional(),
    isActive: z.boolean().optional(),
    isMaster: z.boolean().optional(),
    users: z
      .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
      .optional(),
    accounts: z
      .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
      .optional(),
    bookings: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    bookingTravelers: z
      .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
      .optional(),
    bookingProducts: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => TenantCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z
  .object({
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    account: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional()
  })
  .strict()

export const UserArgsSchema: z.ZodType<Prisma.UserArgs> = z
  .object({
    select: z.lazy(() => UserSelectSchema).optional(),
    include: z.lazy(() => UserIncludeSchema).optional()
  })
  .strict()

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z
  .object({
    id: z.boolean().optional(),
    tenantId: z.boolean().optional(),
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    accountId: z.boolean().optional(),
    account: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional(),
    externalId: z.boolean().optional(),
    firstName: z.boolean().optional(),
    lastName: z.boolean().optional(),
    companyName: z.boolean().optional(),
    jobTitle: z.boolean().optional(),
    department: z.boolean().optional(),
    managerName: z.boolean().optional(),
    email: z.boolean().optional(),
    phone: z.boolean().optional(),
    mobilePhone: z.boolean().optional(),
    fax: z.boolean().optional(),
    adresses: z.boolean().optional(),
    gender: z.boolean().optional(),
    birthDate: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    createdBy: z.boolean().optional(),
    modifiedAt: z.boolean().optional(),
    modifiedBy: z.boolean().optional(),
    isActive: z.boolean().optional(),
    isMaster: z.boolean().optional()
  })
  .strict()

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z
  .object({
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    parent: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional(),
    childAccounts: z
      .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
      .optional(),
    accountUsers: z
      .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
      .optional(),
    bookings: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    purchasing: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    bookingTravelers: z
      .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
      .optional(),
    bookingProducts: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => AccountCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountArgs> = z
  .object({
    select: z.lazy(() => AccountSelectSchema).optional(),
    include: z.lazy(() => AccountIncludeSchema).optional()
  })
  .strict()

export const AccountCountOutputTypeArgsSchema: z.ZodType<Prisma.AccountCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => AccountCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const AccountCountOutputTypeSelectSchema: z.ZodType<Prisma.AccountCountOutputTypeSelect> =
  z
    .object({
      childAccounts: z.boolean().optional(),
      accountUsers: z.boolean().optional(),
      bookings: z.boolean().optional(),
      purchasing: z.boolean().optional(),
      bookingTravelers: z.boolean().optional(),
      bookingProducts: z.boolean().optional()
    })
    .strict()

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z
  .object({
    id: z.boolean().optional(),
    tenantId: z.boolean().optional(),
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    parentId: z.boolean().optional(),
    parent: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional(),
    ownerId: z.boolean().optional(),
    childAccounts: z
      .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
      .optional(),
    accountUsers: z
      .union([z.boolean(), z.lazy(() => UserFindManyArgsSchema)])
      .optional(),
    name: z.boolean().optional(),
    category: z.boolean().optional(),
    dobName: z.boolean().optional(),
    taxId: z.boolean().optional(),
    ssn: z.boolean().optional(),
    brand: z.boolean().optional(),
    email: z.boolean().optional(),
    phone: z.boolean().optional(),
    mobilePhone: z.boolean().optional(),
    fax: z.boolean().optional(),
    billingAdresses: z.boolean().optional(),
    shippingAdresses: z.boolean().optional(),
    termsAndConditions: z.boolean().optional(),
    privacyPolicy: z.boolean().optional(),
    bankName: z.boolean().optional(),
    branch: z.boolean().optional(),
    bankAccount: z.boolean().optional(),
    notes: z.boolean().optional(),
    countryCode: z.boolean().optional(),
    currencyCode: z.boolean().optional(),
    locale: z.boolean().optional(),
    timeZone: z.boolean().optional(),
    referralSource: z.boolean().optional(),
    domain: z.boolean().optional(),
    siteConfig: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    createdBy: z.boolean().optional(),
    modifiedAt: z.boolean().optional(),
    modifiedBy: z.boolean().optional(),
    isActive: z.boolean().optional(),
    bookings: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    purchasing: z
      .union([z.boolean(), z.lazy(() => BookingFindManyArgsSchema)])
      .optional(),
    bookingTravelers: z
      .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
      .optional(),
    bookingProducts: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => AccountCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

// BOOKING
//------------------------------------------------------

export const BookingIncludeSchema: z.ZodType<Prisma.BookingInclude> = z
  .object({
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    account: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional(),
    customer: z
      .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
      .optional(),
    travelers: z
      .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
      .optional(),
    products: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => BookingCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

export const BookingArgsSchema: z.ZodType<Prisma.BookingArgs> = z
  .object({
    select: z.lazy(() => BookingSelectSchema).optional(),
    include: z.lazy(() => BookingIncludeSchema).optional()
  })
  .strict()

export const BookingCountOutputTypeArgsSchema: z.ZodType<Prisma.BookingCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => BookingCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const BookingCountOutputTypeSelectSchema: z.ZodType<Prisma.BookingCountOutputTypeSelect> =
  z
    .object({
      travelers: z.boolean().optional(),
      products: z.boolean().optional()
    })
    .strict()

export const BookingSelectSchema: z.ZodType<Prisma.BookingSelect> = z
  .object({
    id: z.boolean().optional(),
    tenantId: z.boolean().optional(),
    tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
    accountId: z.boolean().optional(),
    account: z.union([z.boolean(), z.lazy(() => AccountArgsSchema)]).optional(),
    customerId: z.boolean().optional(),
    customer: z
      .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
      .optional(),
    ownerId: z.boolean().optional(),
    customerName: z.boolean().optional(),
    customerEmail: z.boolean().optional(),
    customerPhone: z.boolean().optional(),
    postalCode: z.boolean().optional(),
    fromCity: z.boolean().optional(),
    toCity: z.boolean().optional(),
    travelDate: z.boolean().optional(),
    travelPeriod: z.boolean().optional(),
    adultsCount: z.boolean().optional(),
    childrenCount: z.boolean().optional(),
    seniorsCount: z.boolean().optional(),
    requestDescription: z.boolean().optional(),
    status: z.boolean().optional(),
    locatorCode: z.boolean().optional(),
    totalPrice: z.boolean().optional(),
    totalCost: z.boolean().optional(),
    paymentType: z.boolean().optional(),
    paymentStatus: z.boolean().optional(),
    paymentDateTime: z.boolean().optional(),
    discountPercent: z.boolean().optional(),
    discountAmount: z.boolean().optional(),
    paymentAmount: z.boolean().optional(),
    voucherFilePath: z.boolean().optional(),
    receiptFilePath: z.boolean().optional(),
    invoiceFilePath: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    createdBy: z.boolean().optional(),
    modifiedAt: z.boolean().optional(),
    modifiedBy: z.boolean().optional(),
    isActive: z.boolean().optional(),
    travelers: z
      .union([z.boolean(), z.lazy(() => BookingTravelerFindManyArgsSchema)])
      .optional(),
    products: z
      .union([z.boolean(), z.lazy(() => BookingProductFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => BookingCountOutputTypeArgsSchema)])
      .optional()
  })
  .strict()

// BOOKING TRAVELER
//------------------------------------------------------

export const BookingTravelerIncludeSchema: z.ZodType<Prisma.BookingTravelerInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional()
    })
    .strict()

export const BookingTravelerArgsSchema: z.ZodType<Prisma.BookingTravelerArgs> =
  z
    .object({
      select: z.lazy(() => BookingTravelerSelectSchema).optional(),
      include: z.lazy(() => BookingTravelerIncludeSchema).optional()
    })
    .strict()

export const BookingTravelerSelectSchema: z.ZodType<Prisma.BookingTravelerSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      bookingId: z.boolean().optional(),
      booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      ownerId: z.boolean().optional(),
      firstName: z.boolean().optional(),
      lastName: z.boolean().optional(),
      birthDate: z.boolean().optional(),
      passportNumber: z.boolean().optional(),
      passportIssueDate: z.boolean().optional(),
      passportExpireDate: z.boolean().optional(),
      email: z.boolean().optional(),
      phone: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      createdBy: z.boolean().optional(),
      modifiedAt: z.boolean().optional(),
      modifiedBy: z.boolean().optional(),
      isActive: z.boolean().optional()
    })
    .strict()

// BOOKING PRODUCT
//------------------------------------------------------

export const BookingProductIncludeSchema: z.ZodType<Prisma.BookingProductInclude> =
  z
    .object({
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      rooms: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductRoomFindManyArgsSchema)
        ])
        .optional(),
      _count: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductCountOutputTypeArgsSchema)
        ])
        .optional()
    })
    .strict()

export const BookingProductArgsSchema: z.ZodType<Prisma.BookingProductArgs> = z
  .object({
    select: z.lazy(() => BookingProductSelectSchema).optional(),
    include: z.lazy(() => BookingProductIncludeSchema).optional()
  })
  .strict()

export const BookingProductCountOutputTypeArgsSchema: z.ZodType<Prisma.BookingProductCountOutputTypeArgs> =
  z
    .object({
      select: z.lazy(() => BookingProductCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const BookingProductCountOutputTypeSelectSchema: z.ZodType<Prisma.BookingProductCountOutputTypeSelect> =
  z
    .object({
      rooms: z.boolean().optional()
    })
    .strict()

export const BookingProductSelectSchema: z.ZodType<Prisma.BookingProductSelect> =
  z
    .object({
      id: z.boolean().optional(),
      tenantId: z.boolean().optional(),
      tenant: z.union([z.boolean(), z.lazy(() => TenantArgsSchema)]).optional(),
      bookingId: z.boolean().optional(),
      booking: z
        .union([z.boolean(), z.lazy(() => BookingArgsSchema)])
        .optional(),
      accountId: z.boolean().optional(),
      account: z
        .union([z.boolean(), z.lazy(() => AccountArgsSchema)])
        .optional(),
      supplierId: z.boolean().optional(),
      supplierName: z.boolean().optional(),
      ownerId: z.boolean().optional(),
      category: z.boolean().optional(),
      description: z.boolean().optional(),
      startDate: z.boolean().optional(),
      endDate: z.boolean().optional(),
      fromLocation: z.boolean().optional(),
      toLocation: z.boolean().optional(),
      termsAndConditions: z.boolean().optional(),
      locatorCode: z.boolean().optional(),
      productCost: z.boolean().optional(),
      tenantMarkup: z.boolean().optional(),
      agencyMarkup: z.boolean().optional(),
      agentMarkup: z.boolean().optional(),
      localTaxes: z.boolean().optional(),
      stateTaxes: z.boolean().optional(),
      federalTaxes: z.boolean().optional(),
      additionalFees: z.boolean().optional(),
      discountPercent: z.boolean().optional(),
      discount: z.boolean().optional(),
      finalPrice: z.boolean().optional(),
      paymentDueDate: z.boolean().optional(),
      paidDate: z.boolean().optional(),
      paymentAmount: z.boolean().optional(),
      voucherFilePath: z.boolean().optional(),
      receiptFilePath: z.boolean().optional(),
      invoiceFilePath: z.boolean().optional(),
      status: z.boolean().optional(),
      hotelName: z.boolean().optional(),
      hotelStarRating: z.boolean().optional(),
      hotelMealPlan: z.boolean().optional(),
      accommodationType: z.boolean().optional(),
      bookingGroupId: z.boolean().optional(),
      paymentType: z.boolean().optional(),
      paymentDescription: z.boolean().optional(),
      creditCardType: z.boolean().optional(),
      creditCardLastFourDigits: z.boolean().optional(),
      creditCardAuthorizationCode: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      createdBy: z.boolean().optional(),
      modifiedAt: z.boolean().optional(),
      modifiedBy: z.boolean().optional(),
      isActive: z.boolean().optional(),
      rooms: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductRoomFindManyArgsSchema)
        ])
        .optional(),
      _count: z
        .union([
          z.boolean(),
          z.lazy(() => BookingProductCountOutputTypeArgsSchema)
        ])
        .optional()
    })
    .strict()

// BOOKING PRODUCT ROOM
//------------------------------------------------------

export const BookingProductRoomIncludeSchema: z.ZodType<Prisma.BookingProductRoomInclude> =
  z
    .object({
      bookingProduct: z
        .union([z.boolean(), z.lazy(() => BookingProductArgsSchema)])
        .optional()
    })
    .strict()

export const BookingProductRoomArgsSchema: z.ZodType<Prisma.BookingProductRoomArgs> =
  z
    .object({
      select: z.lazy(() => BookingProductRoomSelectSchema).optional(),
      include: z.lazy(() => BookingProductRoomIncludeSchema).optional()
    })
    .strict()

export const BookingProductRoomSelectSchema: z.ZodType<Prisma.BookingProductRoomSelect> =
  z
    .object({
      id: z.boolean().optional(),
      bookingProductId: z.boolean().optional(),
      bookingProduct: z
        .union([z.boolean(), z.lazy(() => BookingProductArgsSchema)])
        .optional(),
      category: z.boolean().optional(),
      adultsCount: z.boolean().optional(),
      minorsCount: z.boolean().optional(),
      ageOfMinors: z.boolean().optional(),
      createdAt: z.boolean().optional(),
      createdBy: z.boolean().optional(),
      modifiedAt: z.boolean().optional(),
      modifiedBy: z.boolean().optional(),
      isActive: z.boolean().optional()
    })
    .strict()

/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const TenantWhereInputSchema: z.ZodType<Prisma.TenantWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => TenantWhereInputSchema),
        z.lazy(() => TenantWhereInputSchema).array()
      ])
      .optional(),
    OR: z
      .lazy(() => TenantWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => TenantWhereInputSchema),
        z.lazy(() => TenantWhereInputSchema).array()
      ])
      .optional(),
    id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    dobName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    taxId: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    brand: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    contactPrefix: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    contactFirstName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    contactMiddleName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    contactLastName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    contactSuffix: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    jobTitle: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    phone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    fax: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    billingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
    shippingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
    termsAndConditions: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    bankName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    branch: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    bankAccount: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    notes: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    countryCode: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    currencyCode: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    locale: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    timeZone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    referralSource: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    domain: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    siteConfig: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    createdAt: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    createdBy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
      .optional(),
    modifiedBy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    isActive: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable(),
    isMaster: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable(),
    users: z.lazy(() => UserListRelationFilterSchema).optional(),
    accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
    bookings: z.lazy(() => BookingListRelationFilterSchema).optional(),
    bookingTravelers: z
      .lazy(() => BookingTravelerListRelationFilterSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductListRelationFilterSchema)
      .optional()
  })
  .strict()

export const TenantOrderByWithRelationInputSchema: z.ZodType<Prisma.TenantOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional(),
      users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
      accounts: z
        .lazy(() => AccountOrderByRelationAggregateInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerOrderByRelationAggregateInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional()
    })
    .strict()

export const TenantWhereUniqueInputSchema: z.ZodType<Prisma.TenantWhereUniqueInput> =
  z
    .object({
      id: z.number().optional(),
      email: z.string().optional()
    })
    .strict()
    .refine((data) => !!data.id || !!data.email, {
      message: 'At least one field must be provided @ TenantWhereUniqueInput'
    })

export const TenantOrderByWithAggregationInputSchema: z.ZodType<Prisma.TenantOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => TenantCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => TenantAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => TenantMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => TenantMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => TenantSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const TenantScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TenantScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => TenantScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),
          z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      dobName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .lazy(() => JsonNullableWithAggregatesFilterSchema)
        .optional(),
      shippingAdresses: z
        .lazy(() => JsonNullableWithAggregatesFilterSchema)
        .optional(),
      termsAndConditions: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => UserWhereInputSchema),
        z.lazy(() => UserWhereInputSchema).array()
      ])
      .optional(),
    OR: z
      .lazy(() => UserWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => UserWhereInputSchema),
        z.lazy(() => UserWhereInputSchema).array()
      ])
      .optional(),
    id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    tenantId: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    tenant: z
      .union([
        z.lazy(() => TenantRelationFilterSchema),
        z.lazy(() => TenantWhereInputSchema)
      ])
      .optional()
      .nullable(),
    accountId: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    account: z
      .union([
        z.lazy(() => AccountRelationFilterSchema),
        z.lazy(() => AccountWhereInputSchema)
      ])
      .optional()
      .nullable(),
    externalId: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    firstName: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    lastName: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    companyName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    jobTitle: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    department: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    managerName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    phone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    fax: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    adresses: z.lazy(() => JsonNullableFilterSchema).optional(),
    gender: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    birthDate: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    createdAt: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    createdBy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    isActive: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable(),
    isMaster: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable()
  })
  .strict()

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      externalId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> =
  z
    .object({
      id: z.number().optional(),
      email: z.string().optional()
    })
    .strict()
    .refine((data) => !!data.id || !!data.email, {
      message: 'At least one field must be provided @ UserWhereUniqueInput'
    })

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      externalId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema),
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => UserScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema),
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      accountId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      externalId: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      companyName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
      gender: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => AccountWhereInputSchema),
        z.lazy(() => AccountWhereInputSchema).array()
      ])
      .optional(),
    OR: z
      .lazy(() => AccountWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => AccountWhereInputSchema),
        z.lazy(() => AccountWhereInputSchema).array()
      ])
      .optional(),
    id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    tenant: z
      .union([
        z.lazy(() => TenantRelationFilterSchema),
        z.lazy(() => TenantWhereInputSchema)
      ])
      .optional(),
    parentId: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    parent: z
      .union([
        z.lazy(() => AccountRelationFilterSchema),
        z.lazy(() => AccountWhereInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    childAccounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
    accountUsers: z.lazy(() => UserListRelationFilterSchema).optional(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    category: z
      .union([
        z.lazy(() => EnumAccountCategoryFilterSchema),
        z.lazy(() => AccountCategorySchema)
      ])
      .optional(),
    dobName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    taxId: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    ssn: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    brand: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    phone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    fax: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    billingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
    shippingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
    termsAndConditions: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    bankName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    branch: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    bankAccount: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    notes: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    countryCode: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    currencyCode: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    locale: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    timeZone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    referralSource: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    domain: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    siteConfig: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    createdAt: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    createdBy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
      .optional(),
    modifiedBy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    isActive: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable(),
    bookings: z.lazy(() => BookingListRelationFilterSchema).optional(),
    purchasing: z.lazy(() => BookingListRelationFilterSchema).optional(),
    bookingTravelers: z
      .lazy(() => BookingTravelerListRelationFilterSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductListRelationFilterSchema)
      .optional()
  })
  .strict()

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      parent: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      childAccounts: z
        .lazy(() => AccountOrderByRelationAggregateInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserOrderByRelationAggregateInputSchema)
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      bookings: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingOrderByRelationAggregateInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerOrderByRelationAggregateInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional()
    })
    .strict()

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string().optional()
    })
    .strict()
    .refine((data) => !!data.id || !!data.name, {
      message: 'At least one field must be provided @ AccountWhereUniqueInput'
    })

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => AccountScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      parentId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumAccountCategoryWithAggregatesFilterSchema),
          z.lazy(() => AccountCategorySchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .lazy(() => JsonNullableWithAggregatesFilterSchema)
        .optional(),
      shippingAdresses: z
        .lazy(() => JsonNullableWithAggregatesFilterSchema)
        .optional(),
      termsAndConditions: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingWhereInputSchema: z.ZodType<Prisma.BookingWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => BookingWhereInputSchema),
        z.lazy(() => BookingWhereInputSchema).array()
      ])
      .optional(),
    OR: z
      .lazy(() => BookingWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => BookingWhereInputSchema),
        z.lazy(() => BookingWhereInputSchema).array()
      ])
      .optional(),
    id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    tenant: z
      .union([
        z.lazy(() => TenantRelationFilterSchema),
        z.lazy(() => TenantWhereInputSchema)
      ])
      .optional(),
    accountId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    account: z
      .union([
        z.lazy(() => AccountRelationFilterSchema),
        z.lazy(() => AccountWhereInputSchema)
      ])
      .optional(),
    customerId: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    customer: z
      .union([
        z.lazy(() => AccountRelationFilterSchema),
        z.lazy(() => AccountWhereInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    customerName: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    customerEmail: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    customerPhone: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    postalCode: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    fromCity: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    toCity: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    travelDate: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    adultsCount: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    childrenCount: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    requestDescription: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => EnumBookingStatusNullableFilterSchema),
        z.lazy(() => BookingStatusSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z.lazy(() => DecimalNullableFilterSchema),
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          })
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z.lazy(() => DecimalNullableFilterSchema),
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          })
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z.lazy(() => DecimalNullableFilterSchema),
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          })
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z.lazy(() => DecimalNullableFilterSchema),
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          })
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z.lazy(() => DecimalNullableFilterSchema),
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          })
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    createdAt: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    createdBy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    isActive: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable(),
    travelers: z.lazy(() => BookingTravelerListRelationFilterSchema).optional(),
    products: z.lazy(() => BookingProductListRelationFilterSchema).optional()
  })
  .strict()

export const BookingOrderByWithRelationInputSchema: z.ZodType<Prisma.BookingOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      customer: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      travelers: z
        .lazy(() => BookingTravelerOrderByRelationAggregateInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductOrderByRelationAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingWhereUniqueInputSchema: z.ZodType<Prisma.BookingWhereUniqueInput> =
  z
    .object({
      id: z.number().optional()
    })
    .strict()

export const BookingOrderByWithAggregationInputSchema: z.ZodType<Prisma.BookingOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => BookingCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => BookingAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => BookingMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => BookingMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => BookingSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const BookingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BookingScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema),
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema),
          z.lazy(() => BookingScalarWhereWithAggregatesInputSchema).array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      customerId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => EnumBookingStatusNullableWithAggregatesFilterSchema),
          z.lazy(() => BookingStatusSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerWhereInputSchema: z.ZodType<Prisma.BookingTravelerWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTravelerWhereInputSchema),
          z.lazy(() => BookingTravelerWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTravelerWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTravelerWhereInputSchema),
          z.lazy(() => BookingTravelerWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional(),
      bookingId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      booking: z
        .union([
          z.lazy(() => BookingRelationFilterSchema),
          z.lazy(() => BookingWhereInputSchema)
        ])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      passportExpireDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerOrderByWithRelationInputSchema: z.ZodType<Prisma.BookingTravelerOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      booking: z.lazy(() => BookingOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerWhereUniqueInputSchema: z.ZodType<Prisma.BookingTravelerWhereUniqueInput> =
  z
    .object({
      id: z.number().optional()
    })
    .strict()

export const BookingTravelerOrderByWithAggregationInputSchema: z.ZodType<Prisma.BookingTravelerOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingTravelerCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingTravelerAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingTravelerMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingTravelerMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingTravelerSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingTravelerScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BookingTravelerScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingTravelerScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      bookingId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      ownerId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      email: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      phone: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductWhereInputSchema: z.ZodType<Prisma.BookingProductWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductWhereInputSchema),
          z.lazy(() => BookingProductWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductWhereInputSchema),
          z.lazy(() => BookingProductWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenant: z
        .union([
          z.lazy(() => TenantRelationFilterSchema),
          z.lazy(() => TenantWhereInputSchema)
        ])
        .optional()
        .nullable(),
      bookingId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      booking: z
        .union([
          z.lazy(() => BookingRelationFilterSchema),
          z.lazy(() => BookingWhereInputSchema)
        ])
        .optional()
        .nullable(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      account: z
        .union([
          z.lazy(() => AccountRelationFilterSchema),
          z.lazy(() => AccountWhereInputSchema)
        ])
        .optional()
        .nullable(),
      supplierId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      supplierName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      category: z
        .union([
          z.lazy(() => EnumProductCategoryFilterSchema),
          z.lazy(() => ProductCategorySchema)
        ])
        .optional(),
      description: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      startDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      endDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      fromLocation: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      paidDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => EnumAccommodationTypeNullableFilterSchema),
          z.lazy(() => AccommodationTypeSchema)
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      creditCardType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      rooms: z.lazy(() => BookingProductRoomListRelationFilterSchema).optional()
    })
    .strict()

export const BookingProductOrderByWithRelationInputSchema: z.ZodType<Prisma.BookingProductOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      booking: z.lazy(() => BookingOrderByWithRelationInputSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      rooms: z
        .lazy(() => BookingProductRoomOrderByRelationAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingProductWhereUniqueInputSchema: z.ZodType<Prisma.BookingProductWhereUniqueInput> =
  z
    .object({
      id: z.number().optional()
    })
    .strict()

export const BookingProductOrderByWithAggregationInputSchema: z.ZodType<Prisma.BookingProductOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingProductCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingProductAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingProductMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingProductMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingProductSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingProductScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BookingProductScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      tenantId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      bookingId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      supplierId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumProductCategoryWithAggregatesFilterSchema),
          z.lazy(() => ProductCategorySchema)
        ])
        .optional(),
      description: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      endDate: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      fromLocation: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableWithAggregatesFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => EnumAccommodationTypeNullableWithAggregatesFilterSchema),
          z.lazy(() => AccommodationTypeSchema)
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number()
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomWhereInputSchema: z.ZodType<Prisma.BookingProductRoomWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomWhereInputSchema),
          z.lazy(() => BookingProductRoomWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomWhereInputSchema),
          z.lazy(() => BookingProductRoomWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      bookingProductId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      bookingProduct: z
        .union([
          z.lazy(() => BookingProductRelationFilterSchema),
          z.lazy(() => BookingProductWhereInputSchema)
        ])
        .optional()
        .nullable(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomOrderByWithRelationInputSchema: z.ZodType<Prisma.BookingProductRoomOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      bookingProduct: z
        .lazy(() => BookingProductOrderByWithRelationInputSchema)
        .optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomWhereUniqueInputSchema: z.ZodType<Prisma.BookingProductRoomWhereUniqueInput> =
  z
    .object({
      id: z.number().optional()
    })
    .strict()

export const BookingProductRoomOrderByWithAggregationInputSchema: z.ZodType<Prisma.BookingProductRoomOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => BookingProductRoomCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => BookingProductRoomAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => BookingProductRoomMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => BookingProductRoomMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => BookingProductRoomSumOrderByAggregateInputSchema)
        .optional()
    })
    .strict()

export const BookingProductRoomScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BookingProductRoomScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => BookingProductRoomScalarWhereWithAggregatesInputSchema)
            .array()
        ])
        .optional(),
      id: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      bookingProductId: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryWithAggregatesFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      createdAt: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date()
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string()
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean()
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateInputSchema: z.ZodType<Prisma.TenantCreateInput> = z
  .object({
    name: z.string(),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    brand: z.string().optional().nullable(),
    contactPrefix: z.string().optional().nullable(),
    contactFirstName: z.string().optional().nullable(),
    contactMiddleName: z.string().optional().nullable(),
    contactLastName: z.string().optional().nullable(),
    contactSuffix: z.string().optional().nullable(),
    jobTitle: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z.string().optional().nullable(),
    privacyPolicy: z.string().optional().nullable(),
    bankName: z.string().optional().nullable(),
    branch: z.string().optional().nullable(),
    bankAccount: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    timeZone: z.string().optional().nullable(),
    referralSource: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    siteConfig: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isMaster: z.boolean().optional().nullable(),
    users: z
      .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    accounts: z
      .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
      .optional()
  })
  .strict()

export const TenantUncheckedCreateInputSchema: z.ZodType<Prisma.TenantUncheckedCreateInput> =
  z
    .object({
      id: z.number().int().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantUpdateInputSchema: z.ZodType<Prisma.TenantUpdateInput> = z
  .object({
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactPrefix: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactFirstName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactMiddleName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactLastName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    contactSuffix: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    users: z
      .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    accounts: z
      .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookings: z
      .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
      .optional()
  })
  .strict()

export const TenantUncheckedUpdateInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateManyInputSchema: z.ZodType<Prisma.TenantCreateManyInput> =
  z
    .object({
      id: z.number().int().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const TenantUpdateManyMutationInputSchema: z.ZodType<Prisma.TenantUpdateManyMutationInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const TenantUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z
  .object({
    tenant: z
      .lazy(() => TenantCreateNestedOneWithoutUsersInputSchema)
      .optional(),
    account: z
      .lazy(() => AccountCreateNestedOneWithoutAccountUsersInputSchema)
      .optional(),
    externalId: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    companyName: z.string().optional().nullable(),
    jobTitle: z.string().optional().nullable(),
    department: z.string().optional().nullable(),
    managerName: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z.string().optional().nullable(),
    birthDate: z.coerce.date().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isMaster: z.boolean().optional().nullable()
  })
  .strict()

export const UserUncheckedCreateInputSchema: z.ZodType<
  Omit<Prisma.UserUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int().optional().nullable(),
    accountId: z.number().int().optional().nullable(),
    externalId: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    companyName: z.string().optional().nullable(),
    jobTitle: z.string().optional().nullable(),
    department: z.string().optional().nullable(),
    managerName: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z.string().optional().nullable(),
    birthDate: z.coerce.date().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isMaster: z.boolean().optional().nullable()
  })
  .strict()

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z
  .object({
    tenant: z
      .lazy(() => TenantUpdateOneWithoutUsersNestedInputSchema)
      .optional(),
    account: z
      .lazy(() => AccountUpdateOneWithoutAccountUsersNestedInputSchema)
      .optional(),
    externalId: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const UserUncheckedUpdateInputSchema: z.ZodType<
  Omit<Prisma.UserUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    externalId: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const UserCreateManyInputSchema: z.ZodType<
  Omit<Prisma.UserCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int().optional().nullable(),
    accountId: z.number().int().optional().nullable(),
    externalId: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    companyName: z.string().optional().nullable(),
    jobTitle: z.string().optional().nullable(),
    department: z.string().optional().nullable(),
    managerName: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z.string().optional().nullable(),
    birthDate: z.coerce.date().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isMaster: z.boolean().optional().nullable()
  })
  .strict()

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> =
  z
    .object({
      externalId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<Prisma.UserUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    externalId: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z
  .object({
    tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
    parent: z
      .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
      .optional(),
    ownerId: z.number().int(),
    childAccounts: z
      .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
      .optional(),
    accountUsers: z
      .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    name: z.string(),
    category: z.lazy(() => AccountCategorySchema),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    ssn: z.string().optional().nullable(),
    brand: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z.string().optional().nullable(),
    privacyPolicy: z.string().optional().nullable(),
    bankName: z.string().optional().nullable(),
    branch: z.string().optional().nullable(),
    bankAccount: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    timeZone: z.string().optional().nullable(),
    referralSource: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    siteConfig: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    bookings: z
      .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    purchasing: z
      .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
      .optional()
  })
  .strict()

export const AccountUncheckedCreateInputSchema: z.ZodType<
  Omit<Prisma.AccountUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    parentId: z.number().int().optional().nullable(),
    ownerId: z.number().int(),
    childAccounts: z
      .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
      .optional(),
    accountUsers: z
      .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    name: z.string(),
    category: z.lazy(() => AccountCategorySchema),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    ssn: z.string().optional().nullable(),
    brand: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z.string().optional().nullable(),
    privacyPolicy: z.string().optional().nullable(),
    bankName: z.string().optional().nullable(),
    branch: z.string().optional().nullable(),
    bankAccount: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    timeZone: z.string().optional().nullable(),
    referralSource: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    siteConfig: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    bookings: z
      .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
      .optional(),
    purchasing: z
      .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
      )
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
      )
      .optional()
  })
  .strict()

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z
  .object({
    tenant: z
      .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
      .optional(),
    parent: z
      .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    childAccounts: z
      .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
      .optional(),
    accountUsers: z
      .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bookings: z
      .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    purchasing: z
      .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    bookingProducts: z
      .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
      .optional()
  })
  .strict()

export const AccountUncheckedUpdateInputSchema: z.ZodType<
  Omit<Prisma.AccountUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    parentId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    childAccounts: z
      .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
      .optional(),
    accountUsers: z
      .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bookings: z
      .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
      .optional(),
    purchasing: z
      .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
      .optional(),
    bookingTravelers: z
      .lazy(
        () => BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
      )
      .optional(),
    bookingProducts: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
      )
      .optional()
  })
  .strict()

export const AccountCreateManyInputSchema: z.ZodType<
  Omit<Prisma.AccountCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    parentId: z.number().int().optional().nullable(),
    ownerId: z.number().int(),
    name: z.string(),
    category: z.lazy(() => AccountCategorySchema),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    ssn: z.string().optional().nullable(),
    brand: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z.string().optional().nullable(),
    privacyPolicy: z.string().optional().nullable(),
    bankName: z.string().optional().nullable(),
    branch: z.string().optional().nullable(),
    bankAccount: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    timeZone: z.string().optional().nullable(),
    referralSource: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    siteConfig: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> =
  z
    .object({
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string().email(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<Prisma.AccountUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    parentId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingCreateInputSchema: z.ZodType<Prisma.BookingCreateInput> = z
  .object({
    tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
    account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
    customer: z
      .lazy(() => AccountCreateNestedOneWithoutPurchasingInputSchema)
      .optional(),
    ownerId: z.number().int().optional().nullable(),
    customerName: z.string().optional().nullable(),
    customerEmail: z.string().email().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.coerce.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    totalCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.coerce.date().optional().nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    travelers: z
      .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
      .optional(),
    products: z
      .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
      .optional()
  })
  .strict()

export const BookingUncheckedCreateInputSchema: z.ZodType<
  Omit<Prisma.BookingUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    customerId: z.number().int().optional().nullable(),
    ownerId: z.number().int().optional().nullable(),
    customerName: z.string().optional().nullable(),
    customerEmail: z.string().email().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.coerce.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    totalCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.coerce.date().optional().nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    travelers: z
      .lazy(
        () => BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
      )
      .optional(),
    products: z
      .lazy(
        () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
      )
      .optional()
  })
  .strict()

export const BookingUpdateInputSchema: z.ZodType<Prisma.BookingUpdateInput> = z
  .object({
    tenant: z
      .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
      .optional(),
    account: z
      .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
      .optional(),
    customer: z
      .lazy(() => AccountUpdateOneWithoutPurchasingNestedInputSchema)
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelers: z
      .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
      .optional(),
    products: z
      .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
      .optional()
  })
  .strict()

export const BookingUncheckedUpdateInputSchema: z.ZodType<
  Omit<Prisma.BookingUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelers: z
      .lazy(
        () => BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
      )
      .optional(),
    products: z
      .lazy(
        () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
      )
      .optional()
  })
  .strict()

export const BookingCreateManyInputSchema: z.ZodType<
  Omit<Prisma.BookingCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    customerId: z.number().int().optional().nullable(),
    ownerId: z.number().int().optional().nullable(),
    customerName: z.string().optional().nullable(),
    customerEmail: z.string().email().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.coerce.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    totalCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.coerce.date().optional().nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingUpdateManyMutationInputSchema: z.ZodType<Prisma.BookingUpdateManyMutationInput> =
  z
    .object({
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string().email(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<Prisma.BookingUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingTravelerCreateInputSchema: z.ZodType<Prisma.BookingTravelerCreateInput> =
  z
    .object({
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      ownerId: z.number().int(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.coerce.date(),
      passportNumber: z.string(),
      passportIssueDate: z.coerce.date(),
      passportExpireDate: z.coerce.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerUncheckedCreateInputSchema: z.ZodType<
  Omit<Prisma.BookingTravelerUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    accountId: z.number().int(),
    ownerId: z.number().int(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.coerce.date(),
    passportNumber: z.string(),
    passportIssueDate: z.coerce.date(),
    passportExpireDate: z.coerce.date(),
    email: z.string(),
    phone: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingTravelerUpdateInputSchema: z.ZodType<Prisma.BookingTravelerUpdateInput> =
  z
    .object({
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateInputSchema: z.ZodType<
  Omit<Prisma.BookingTravelerUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    passportExpireDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    email: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingTravelerCreateManyInputSchema: z.ZodType<
  Omit<Prisma.BookingTravelerCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    accountId: z.number().int(),
    ownerId: z.number().int(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.coerce.date(),
    passportNumber: z.string(),
    passportIssueDate: z.coerce.date(),
    passportExpireDate: z.coerce.date(),
    email: z.string(),
    phone: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingTravelerUpdateManyMutationInputSchema: z.ZodType<Prisma.BookingTravelerUpdateManyMutationInput> =
  z
    .object({
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<Prisma.BookingTravelerUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    passportExpireDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    email: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductCreateInputSchema: z.ZodType<Prisma.BookingProductCreateInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingCreateNestedOneWithoutProductsInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number().int(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateInputSchema: z.ZodType<
  Omit<Prisma.BookingProductUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    accountId: z.number().int(),
    supplierId: z.number().optional().nullable(),
    supplierName: z.string().optional().nullable(),
    ownerId: z.number().int(),
    category: z.lazy(() => ProductCategorySchema),
    description: z.string().optional().nullable(),
    startDate: z.coerce.date(),
    endDate: z.coerce.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    productCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    agentMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    localTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    stateTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    federalTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    additionalFees: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    finalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentDueDate: z.coerce.date().optional().nullable(),
    paidDate: z.coerce.date().optional().nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z.string().optional().nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z.string().optional().nullable(),
    accommodationType: z
      .lazy(() => AccommodationTypeSchema)
      .optional()
      .nullable(),
    bookingGroupId: z.number().optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentDescription: z.string().optional().nullable(),
    creditCardType: z.string().optional().nullable(),
    creditCardLastFourDigits: z.number().optional().nullable(),
    creditCardAuthorizationCode: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    rooms: z
      .lazy(
        () =>
          BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
      )
      .optional()
  })
  .strict()

export const BookingProductUpdateInputSchema: z.ZodType<Prisma.BookingProductUpdateInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneWithoutProductsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateInputSchema: z.ZodType<
  Omit<Prisma.BookingProductUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    supplierId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    supplierName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    category: z
      .union([
        z.lazy(() => ProductCategorySchema),
        z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    endDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    stateTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accommodationType: z
      .union([
        z.lazy(() => AccommodationTypeSchema),
        z.lazy(
          () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
        )
      ])
      .optional()
      .nullable(),
    bookingGroupId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardLastFourDigits: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardAuthorizationCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    rooms: z
      .lazy(
        () =>
          BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
      )
      .optional()
  })
  .strict()

export const BookingProductCreateManyInputSchema: z.ZodType<
  Omit<Prisma.BookingProductCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    accountId: z.number().int(),
    supplierId: z.number().optional().nullable(),
    supplierName: z.string().optional().nullable(),
    ownerId: z.number().int(),
    category: z.lazy(() => ProductCategorySchema),
    description: z.string().optional().nullable(),
    startDate: z.coerce.date(),
    endDate: z.coerce.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    productCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    agentMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    localTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    stateTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    federalTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    additionalFees: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    finalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentDueDate: z.coerce.date().optional().nullable(),
    paidDate: z.coerce.date().optional().nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z.string().optional().nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z.string().optional().nullable(),
    accommodationType: z
      .lazy(() => AccommodationTypeSchema)
      .optional()
      .nullable(),
    bookingGroupId: z.number().optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentDescription: z.string().optional().nullable(),
    creditCardType: z.string().optional().nullable(),
    creditCardLastFourDigits: z.number().optional().nullable(),
    creditCardAuthorizationCode: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductUpdateManyMutationInputSchema: z.ZodType<Prisma.BookingProductUpdateManyMutationInput> =
  z
    .object({
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<Prisma.BookingProductUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    supplierId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    supplierName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    category: z
      .union([
        z.lazy(() => ProductCategorySchema),
        z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    endDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    stateTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accommodationType: z
      .union([
        z.lazy(() => AccommodationTypeSchema),
        z.lazy(
          () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
        )
      ])
      .optional()
      .nullable(),
    bookingGroupId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardLastFourDigits: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardAuthorizationCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductRoomCreateInputSchema: z.ZodType<Prisma.BookingProductRoomCreateInput> =
  z
    .object({
      bookingProduct: z
        .lazy(() => BookingProductCreateNestedOneWithoutRoomsInputSchema)
        .optional(),
      category: z.lazy(() => RoomCategorySchema),
      adultsCount: z.number().int(),
      minorsCount: z.number().optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductRoomUncheckedCreateInputSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomUncheckedCreateInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    bookingProductId: z.number(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number().optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductRoomUpdateInputSchema: z.ZodType<Prisma.BookingProductRoomUpdateInput> =
  z
    .object({
      bookingProduct: z
        .lazy(() => BookingProductUpdateOneWithoutRoomsNestedInputSchema)
        .optional(),
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateInputSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomUncheckedUpdateInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingProductId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductRoomCreateManyInputSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomCreateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    bookingProductId: z.number(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number().optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductRoomUpdateManyMutationInputSchema: z.ZodType<Prisma.BookingProductRoomUpdateManyMutationInput> =
  z
    .object({
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateManyInputSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomUncheckedUpdateManyInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingProductId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
  })
  .strict()

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z
  .object({
    equals: z.string().optional(),
    in: z.string().array().optional(),
    notIn: z.string().array().optional(),
    lt: z.string().optional(),
    lte: z.string().optional(),
    gt: z.string().optional(),
    gte: z.string().optional(),
    contains: z.string().optional(),
    startsWith: z.string().optional(),
    endsWith: z.string().optional(),
    mode: z.lazy(() => QueryModeSchema).optional(),
    not: z
      .union([z.string(), z.lazy(() => NestedStringFilterSchema)])
      .optional()
  })
  .strict()

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z
  .object({
    equals: z
      .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
      .optional(),
    path: z.string().array().optional(),
    string_contains: z.string().optional(),
    string_starts_with: z.string().optional(),
    string_ends_with: z.string().optional(),
    array_contains: InputJsonValue.optional().nullable(),
    array_starts_with: InputJsonValue.optional().nullable(),
    array_ends_with: InputJsonValue.optional().nullable(),
    lt: InputJsonValue.optional(),
    lte: InputJsonValue.optional(),
    gt: InputJsonValue.optional(),
    gte: InputJsonValue.optional(),
    not: z
      .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
      .optional()
  })
  .strict()

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> =
  z
    .object({
      equals: z.coerce.date().optional().nullable(),
      in: z.coerce.date().array().optional().nullable(),
      notIn: z.coerce.date().array().optional().nullable(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z
  .object({
    equals: z.coerce.date().optional(),
    in: z.coerce.date().array().optional(),
    notIn: z.coerce.date().array().optional(),
    lt: z.coerce.date().optional(),
    lte: z.coerce.date().optional(),
    gt: z.coerce.date().optional(),
    gte: z.coerce.date().optional(),
    not: z
      .union([z.coerce.date(), z.lazy(() => NestedDateTimeFilterSchema)])
      .optional()
  })
  .strict()

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z
  .object({
    equals: z.boolean().optional().nullable(),
    not: z
      .union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)])
      .optional()
      .nullable()
  })
  .strict()

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> =
  z
    .object({
      every: z.lazy(() => UserWhereInputSchema).optional(),
      some: z.lazy(() => UserWhereInputSchema).optional(),
      none: z.lazy(() => UserWhereInputSchema).optional()
    })
    .strict()

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> =
  z
    .object({
      every: z.lazy(() => AccountWhereInputSchema).optional(),
      some: z.lazy(() => AccountWhereInputSchema).optional(),
      none: z.lazy(() => AccountWhereInputSchema).optional()
    })
    .strict()

export const BookingListRelationFilterSchema: z.ZodType<Prisma.BookingListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingWhereInputSchema).optional(),
      some: z.lazy(() => BookingWhereInputSchema).optional(),
      none: z.lazy(() => BookingWhereInputSchema).optional()
    })
    .strict()

export const BookingTravelerListRelationFilterSchema: z.ZodType<Prisma.BookingTravelerListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingTravelerWhereInputSchema).optional(),
      some: z.lazy(() => BookingTravelerWhereInputSchema).optional(),
      none: z.lazy(() => BookingTravelerWhereInputSchema).optional()
    })
    .strict()

export const BookingProductListRelationFilterSchema: z.ZodType<Prisma.BookingProductListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingProductWhereInputSchema).optional(),
      some: z.lazy(() => BookingProductWhereInputSchema).optional(),
      none: z.lazy(() => BookingProductWhereInputSchema).optional()
    })
    .strict()

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BookingOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BookingTravelerOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BookingProductOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantCountOrderByAggregateInputSchema: z.ZodType<Prisma.TenantCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TenantAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TenantMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantMinOrderByAggregateInputSchema: z.ZodType<Prisma.TenantMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      contactPrefix: z.lazy(() => SortOrderSchema).optional(),
      contactFirstName: z.lazy(() => SortOrderSchema).optional(),
      contactMiddleName: z.lazy(() => SortOrderSchema).optional(),
      contactLastName: z.lazy(() => SortOrderSchema).optional(),
      contactSuffix: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantSumOrderByAggregateInputSchema: z.ZodType<Prisma.TenantSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedIntFilterSchema).optional(),
      _max: z.lazy(() => NestedIntFilterSchema).optional()
    })
    .strict()

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedStringFilterSchema).optional(),
      _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      path: z.string().array().optional(),
      string_contains: z.string().optional(),
      string_starts_with: z.string().optional(),
      string_ends_with: z.string().optional(),
      array_contains: InputJsonValue.optional().nullable(),
      array_starts_with: InputJsonValue.optional().nullable(),
      array_ends_with: InputJsonValue.optional().nullable(),
      lt: InputJsonValue.optional(),
      lte: InputJsonValue.optional(),
      gt: InputJsonValue.optional(),
      gte: InputJsonValue.optional(),
      not: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
    })
    .strict()

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.coerce.date().optional().nullable(),
      in: z.coerce.date().array().optional().nullable(),
      notIn: z.coerce.date().array().optional().nullable(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
    })
    .strict()

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> =
  z
    .object({
      equals: z.coerce.date().optional(),
      in: z.coerce.date().array().optional(),
      notIn: z.coerce.date().array().optional(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
    })
    .strict()

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([
          z.boolean(),
          z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
    })
    .strict()

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z
  .object({
    equals: z.number().optional().nullable(),
    in: z.number().array().optional().nullable(),
    notIn: z.number().array().optional().nullable(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z
      .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
      .optional()
      .nullable()
  })
  .strict()

export const TenantRelationFilterSchema: z.ZodType<Prisma.TenantRelationFilter> =
  z
    .object({
      is: z.lazy(() => TenantWhereInputSchema).optional(),
      isNot: z.lazy(() => TenantWhereInputSchema).optional()
    })
    .strict()

export const AccountRelationFilterSchema: z.ZodType<Prisma.AccountRelationFilter> =
  z
    .object({
      is: z
        .lazy(() => AccountWhereInputSchema)
        .optional()
        .nullable(),
      isNot: z
        .lazy(() => AccountWhereInputSchema)
        .optional()
        .nullable()
    })
    .strict()

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      externalId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      adresses: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      externalId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      externalId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      companyName: z.lazy(() => SortOrderSchema).optional(),
      jobTitle: z.lazy(() => SortOrderSchema).optional(),
      department: z.lazy(() => SortOrderSchema).optional(),
      managerName: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      gender: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional(),
      isMaster: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UserSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
    })
    .strict()

export const EnumAccountCategoryFilterSchema: z.ZodType<Prisma.EnumAccountCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => AccountCategorySchema).optional(),
      in: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => NestedEnumAccountCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      billingAdresses: z.lazy(() => SortOrderSchema).optional(),
      shippingAdresses: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      dobName: z.lazy(() => SortOrderSchema).optional(),
      taxId: z.lazy(() => SortOrderSchema).optional(),
      ssn: z.lazy(() => SortOrderSchema).optional(),
      brand: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      mobilePhone: z.lazy(() => SortOrderSchema).optional(),
      fax: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      privacyPolicy: z.lazy(() => SortOrderSchema).optional(),
      bankName: z.lazy(() => SortOrderSchema).optional(),
      branch: z.lazy(() => SortOrderSchema).optional(),
      bankAccount: z.lazy(() => SortOrderSchema).optional(),
      notes: z.lazy(() => SortOrderSchema).optional(),
      countryCode: z.lazy(() => SortOrderSchema).optional(),
      currencyCode: z.lazy(() => SortOrderSchema).optional(),
      locale: z.lazy(() => SortOrderSchema).optional(),
      timeZone: z.lazy(() => SortOrderSchema).optional(),
      referralSource: z.lazy(() => SortOrderSchema).optional(),
      domain: z.lazy(() => SortOrderSchema).optional(),
      siteConfig: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const AccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccountSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      parentId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumAccountCategoryWithAggregatesFilterSchema: z.ZodType<Prisma.EnumAccountCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => AccountCategorySchema).optional(),
      in: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => NestedEnumAccountCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumAccountCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumAccountCategoryFilterSchema).optional()
    })
    .strict()

export const EnumBookingStatusNullableFilterSchema: z.ZodType<Prisma.EnumBookingStatusNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => NestedEnumBookingStatusNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const DecimalNullableFilterSchema: z.ZodType<Prisma.DecimalNullableFilter> =
  z
    .object({
      equals: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      in: z
        .union([
          z.number().array(),
          z.string().array(),
          DecimalJSLikeListSchema
        ])
        .refine(
          (v) =>
            Array.isArray(v) &&
            (v as any[]).every((v) => isValidDecimalInput(v)),
          { message: 'Must be a Decimal' }
        )
        .optional()
        .nullable(),
      notIn: z
        .union([
          z.number().array(),
          z.string().array(),
          DecimalJSLikeListSchema
        ])
        .refine(
          (v) =>
            Array.isArray(v) &&
            (v as any[]).every((v) => isValidDecimalInput(v)),
          { message: 'Must be a Decimal' }
        )
        .optional()
        .nullable(),
      lt: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      lte: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      gt: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      gte: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      not: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NestedDecimalNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingCountOrderByAggregateInputSchema: z.ZodType<Prisma.BookingCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BookingAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BookingMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingMinOrderByAggregateInputSchema: z.ZodType<Prisma.BookingMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      customerName: z.lazy(() => SortOrderSchema).optional(),
      customerEmail: z.lazy(() => SortOrderSchema).optional(),
      customerPhone: z.lazy(() => SortOrderSchema).optional(),
      postalCode: z.lazy(() => SortOrderSchema).optional(),
      fromCity: z.lazy(() => SortOrderSchema).optional(),
      toCity: z.lazy(() => SortOrderSchema).optional(),
      travelDate: z.lazy(() => SortOrderSchema).optional(),
      travelPeriod: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      requestDescription: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentStatus: z.lazy(() => SortOrderSchema).optional(),
      paymentDateTime: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingSumOrderByAggregateInputSchema: z.ZodType<Prisma.BookingSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      customerId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      childrenCount: z.lazy(() => SortOrderSchema).optional(),
      seniorsCount: z.lazy(() => SortOrderSchema).optional(),
      totalPrice: z.lazy(() => SortOrderSchema).optional(),
      totalCost: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discountAmount: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumBookingStatusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumBookingStatusNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NestedEnumBookingStatusNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumBookingStatusNullableFilterSchema)
        .optional(),
      _max: z.lazy(() => NestedEnumBookingStatusNullableFilterSchema).optional()
    })
    .strict()

export const DecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      in: z
        .union([
          z.number().array(),
          z.string().array(),
          DecimalJSLikeListSchema
        ])
        .refine(
          (v) =>
            Array.isArray(v) &&
            (v as any[]).every((v) => isValidDecimalInput(v)),
          { message: 'Must be a Decimal' }
        )
        .optional()
        .nullable(),
      notIn: z
        .union([
          z.number().array(),
          z.string().array(),
          DecimalJSLikeListSchema
        ])
        .refine(
          (v) =>
            Array.isArray(v) &&
            (v as any[]).every((v) => isValidDecimalInput(v)),
          { message: 'Must be a Decimal' }
        )
        .optional()
        .nullable(),
      lt: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      lte: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      gt: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      gte: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      not: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
    })
    .strict()

export const BookingRelationFilterSchema: z.ZodType<Prisma.BookingRelationFilter> =
  z
    .object({
      is: z.lazy(() => BookingWhereInputSchema).optional(),
      isNot: z.lazy(() => BookingWhereInputSchema).optional()
    })
    .strict()

export const BookingTravelerCountOrderByAggregateInputSchema: z.ZodType<Prisma.BookingTravelerCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BookingTravelerAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BookingTravelerMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerMinOrderByAggregateInputSchema: z.ZodType<Prisma.BookingTravelerMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      firstName: z.lazy(() => SortOrderSchema).optional(),
      lastName: z.lazy(() => SortOrderSchema).optional(),
      birthDate: z.lazy(() => SortOrderSchema).optional(),
      passportNumber: z.lazy(() => SortOrderSchema).optional(),
      passportIssueDate: z.lazy(() => SortOrderSchema).optional(),
      passportExpireDate: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      phone: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingTravelerSumOrderByAggregateInputSchema: z.ZodType<Prisma.BookingTravelerSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumProductCategoryFilterSchema: z.ZodType<Prisma.EnumProductCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => ProductCategorySchema).optional(),
      in: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => NestedEnumProductCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const EnumAccommodationTypeNullableFilterSchema: z.ZodType<Prisma.EnumAccommodationTypeNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomListRelationFilterSchema: z.ZodType<Prisma.BookingProductRoomListRelationFilter> =
  z
    .object({
      every: z.lazy(() => BookingProductRoomWhereInputSchema).optional(),
      some: z.lazy(() => BookingProductRoomWhereInputSchema).optional(),
      none: z.lazy(() => BookingProductRoomWhereInputSchema).optional()
    })
    .strict()

export const BookingProductRoomOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BookingProductRoomOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductCountOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductMinOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      supplierName: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      description: z.lazy(() => SortOrderSchema).optional(),
      startDate: z.lazy(() => SortOrderSchema).optional(),
      endDate: z.lazy(() => SortOrderSchema).optional(),
      fromLocation: z.lazy(() => SortOrderSchema).optional(),
      toLocation: z.lazy(() => SortOrderSchema).optional(),
      termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
      locatorCode: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentDueDate: z.lazy(() => SortOrderSchema).optional(),
      paidDate: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      voucherFilePath: z.lazy(() => SortOrderSchema).optional(),
      receiptFilePath: z.lazy(() => SortOrderSchema).optional(),
      invoiceFilePath: z.lazy(() => SortOrderSchema).optional(),
      status: z.lazy(() => SortOrderSchema).optional(),
      hotelName: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      hotelMealPlan: z.lazy(() => SortOrderSchema).optional(),
      accommodationType: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      paymentType: z.lazy(() => SortOrderSchema).optional(),
      paymentDescription: z.lazy(() => SortOrderSchema).optional(),
      creditCardType: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional(),
      creditCardAuthorizationCode: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductSumOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tenantId: z.lazy(() => SortOrderSchema).optional(),
      bookingId: z.lazy(() => SortOrderSchema).optional(),
      accountId: z.lazy(() => SortOrderSchema).optional(),
      supplierId: z.lazy(() => SortOrderSchema).optional(),
      ownerId: z.lazy(() => SortOrderSchema).optional(),
      productCost: z.lazy(() => SortOrderSchema).optional(),
      tenantMarkup: z.lazy(() => SortOrderSchema).optional(),
      agencyMarkup: z.lazy(() => SortOrderSchema).optional(),
      agentMarkup: z.lazy(() => SortOrderSchema).optional(),
      localTaxes: z.lazy(() => SortOrderSchema).optional(),
      stateTaxes: z.lazy(() => SortOrderSchema).optional(),
      federalTaxes: z.lazy(() => SortOrderSchema).optional(),
      additionalFees: z.lazy(() => SortOrderSchema).optional(),
      discountPercent: z.lazy(() => SortOrderSchema).optional(),
      discount: z.lazy(() => SortOrderSchema).optional(),
      finalPrice: z.lazy(() => SortOrderSchema).optional(),
      paymentAmount: z.lazy(() => SortOrderSchema).optional(),
      hotelStarRating: z.lazy(() => SortOrderSchema).optional(),
      bookingGroupId: z.lazy(() => SortOrderSchema).optional(),
      creditCardLastFourDigits: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumProductCategoryWithAggregatesFilterSchema: z.ZodType<Prisma.EnumProductCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => ProductCategorySchema).optional(),
      in: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => NestedEnumProductCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumProductCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumProductCategoryFilterSchema).optional()
    })
    .strict()

export const EnumAccommodationTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumAccommodationTypeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NestedEnumAccommodationTypeNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        .optional(),
      _max: z
        .lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        .optional()
    })
    .strict()

export const BookingProductRelationFilterSchema: z.ZodType<Prisma.BookingProductRelationFilter> =
  z
    .object({
      is: z
        .lazy(() => BookingProductWhereInputSchema)
        .optional()
        .nullable(),
      isNot: z
        .lazy(() => BookingProductWhereInputSchema)
        .optional()
        .nullable()
    })
    .strict()

export const EnumRoomCategoryFilterSchema: z.ZodType<Prisma.EnumRoomCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const IntNullableListFilterSchema: z.ZodType<Prisma.IntNullableListFilter> =
  z
    .object({
      equals: z.number().array().optional().nullable(),
      has: z.number().optional().nullable(),
      hasEvery: z.number().array().optional(),
      hasSome: z.number().array().optional(),
      isEmpty: z.boolean().optional()
    })
    .strict()

export const BookingProductRoomCountOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductRoomCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductRoomAvgOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductRoomMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomMinOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductRoomMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      category: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      createdAt: z.lazy(() => SortOrderSchema).optional(),
      createdBy: z.lazy(() => SortOrderSchema).optional(),
      modifiedAt: z.lazy(() => SortOrderSchema).optional(),
      modifiedBy: z.lazy(() => SortOrderSchema).optional(),
      isActive: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BookingProductRoomSumOrderByAggregateInputSchema: z.ZodType<Prisma.BookingProductRoomSumOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      bookingProductId: z.lazy(() => SortOrderSchema).optional(),
      adultsCount: z.lazy(() => SortOrderSchema).optional(),
      minorsCount: z.lazy(() => SortOrderSchema).optional(),
      ageOfMinors: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumRoomCategoryWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRoomCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional()
    })
    .strict()

export const UserCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.BookingCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.BookingUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductUncheckedCreateNestedManyWithoutTenantInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> =
  z
    .object({
      set: z.string().optional()
    })
    .strict()

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> =
  z
    .object({
      set: z.string().optional().nullable()
    })
    .strict()

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.coerce.date().optional().nullable()
    })
    .strict()

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.coerce.date().optional()
    })
    .strict()

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> =
  z
    .object({
      set: z.boolean().optional().nullable()
    })
    .strict()

export const UserUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.BookingUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.BookingTravelerUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.BookingProductUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutTenantInputSchema),
          z.lazy(() => UserCreateWithoutTenantInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutTenantInputSchema),
          z.lazy(() => AccountCreateWithoutTenantInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.BookingUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTenantInputSchema),
          z.lazy(() => BookingCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutTenantInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.BookingProductUncheckedUpdateManyWithoutTenantNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
          z.lazy(() => BookingProductCreateWithoutTenantInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutTenantInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyTenantInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutTenantInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutUsersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutUsersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutAccountUsersInputSchema: z.ZodType<Prisma.AccountCreateNestedOneWithoutAccountUsersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutAccountUsersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutAccountUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutAccountUsersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const TenantUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneWithoutUsersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutUsersInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutUsersInputSchema).optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutUsersInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneWithoutAccountUsersNestedInputSchema: z.ZodType<Prisma.AccountUpdateOneWithoutAccountUsersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutAccountUsersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutAccountUsersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutAccountUsersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutAccountUsersInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutAccountUsersInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutAccountUsersInputSchema)
        ])
        .optional()
    })
    .strict()

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional().nullable(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutAccountsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutAccountsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutChildAccountsInputSchema: z.ZodType<Prisma.AccountCreateNestedOneWithoutChildAccountsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutChildAccountsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutChildAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutChildAccountsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutParentInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutParentInputSchema),
          z.lazy(() => AccountCreateWithoutParentInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyParentInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountInputSchema),
          z.lazy(() => UserCreateWithoutAccountInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.BookingCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.BookingCreateNestedManyWithoutCustomerInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateWithoutCustomerInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyCustomerInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutParentInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutParentInputSchema),
          z.lazy(() => AccountCreateWithoutParentInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyParentInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountInputSchema),
          z.lazy(() => UserCreateWithoutAccountInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.BookingUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.BookingUncheckedCreateNestedManyWithoutCustomerInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateWithoutCustomerInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema).array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyCustomerInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductUncheckedCreateNestedManyWithoutAccountInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutAccountsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutAccountsInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutAccountsInputSchema).optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutAccountsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutAccountsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneWithoutChildAccountsNestedInputSchema: z.ZodType<Prisma.AccountUpdateOneWithoutChildAccountsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutChildAccountsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutChildAccountsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutChildAccountsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutChildAccountsInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutChildAccountsInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutChildAccountsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutParentNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutParentInputSchema),
          z.lazy(() => AccountCreateWithoutParentInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutParentInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyParentInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutParentInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutParentInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountInputSchema),
          z.lazy(() => UserCreateWithoutAccountInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutAccountInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutAccountInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const EnumAccountCategoryFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumAccountCategoryFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => AccountCategorySchema).optional()
    })
    .strict()

export const BookingUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.BookingUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.BookingUpdateManyWithoutCustomerNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateWithoutCustomerInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyCustomerInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.BookingTravelerUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.BookingProductUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutParentNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutParentInputSchema),
          z.lazy(() => AccountCreateWithoutParentInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutParentInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutParentInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyParentInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutParentInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutParentInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutParentInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountInputSchema),
          z.lazy(() => UserCreateWithoutAccountInputSchema).array(),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => UserUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => UserUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => UserCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => UserWhereUniqueInputSchema),
          z.lazy(() => UserWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => UserUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => UserUpdateManyWithWhereWithoutAccountInputSchema),
          z.lazy(() => UserUpdateManyWithWhereWithoutAccountInputSchema).array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.BookingUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutAccountInputSchema),
          z.lazy(() => BookingCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutAccountInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.BookingUncheckedUpdateManyWithoutCustomerNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateWithoutCustomerInputSchema).array(),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema).array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema),
          z.lazy(() => BookingCreateOrConnectWithoutCustomerInputSchema).array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => BookingUpsertWithWhereUniqueWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpsertWithWhereUniqueWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingCreateManyCustomerInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingWhereUniqueInputSchema),
          z.lazy(() => BookingWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithWhereUniqueWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpdateWithWhereUniqueWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => BookingUpdateManyWithWhereWithoutCustomerInputSchema),
          z
            .lazy(() => BookingUpdateManyWithWhereWithoutCustomerInputSchema)
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.BookingProductUncheckedUpdateManyWithoutAccountNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
          z.lazy(() => BookingProductCreateWithoutAccountInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutAccountInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyAccountInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutAccountInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutBookingsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingsInputSchema: z.ZodType<Prisma.AccountCreateNestedOneWithoutBookingsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutPurchasingInputSchema: z.ZodType<Prisma.AccountCreateNestedOneWithoutPurchasingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutPurchasingInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutPurchasingInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutPurchasingInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingTravelerCreateNestedManyWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedManyWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductUncheckedCreateNestedManyWithoutBookingInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutBookingsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutBookingsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      upsert: z.lazy(() => TenantUpsertWithoutBookingsInputSchema).optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutBookingsNestedInputSchema: z.ZodType<Prisma.AccountUpdateOneRequiredWithoutBookingsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingsInputSchema)
        .optional(),
      upsert: z.lazy(() => AccountUpsertWithoutBookingsInputSchema).optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingsInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneWithoutPurchasingNestedInputSchema: z.ZodType<Prisma.AccountUpdateOneWithoutPurchasingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutPurchasingInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutPurchasingInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutPurchasingInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutPurchasingInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutPurchasingInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutPurchasingInputSchema)
        ])
        .optional()
    })
    .strict()

export const NullableEnumBookingStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumBookingStatusFieldUpdateOperationsInput> =
  z
    .object({
      set: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable()
    })
    .strict()

export const NullableDecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDecimalFieldUpdateOperationsInput> =
  z
    .object({
      set: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      increment: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      decrement: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      multiply: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      divide: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
    })
    .strict()

export const BookingTravelerUpdateManyWithoutBookingNestedInputSchema: z.ZodType<Prisma.BookingTravelerUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUpdateManyWithoutBookingNestedInputSchema: z.ZodType<Prisma.BookingProductUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
          z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingTravelerCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingTravelerCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingTravelerWhereUniqueInputSchema),
          z.lazy(() => BookingTravelerWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () =>
                BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema: z.ZodType<Prisma.BookingProductUncheckedUpdateManyWithoutBookingNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
          z.lazy(() => BookingProductCreateWithoutBookingInputSchema).array(),
          z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema),
          z
            .lazy(() => BookingProductCreateOrConnectWithoutBookingInputSchema)
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(() => BookingProductCreateManyBookingInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductWhereUniqueInputSchema),
          z.lazy(() => BookingProductWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
          ),
          z
            .lazy(
              () => BookingProductUpdateManyWithWhereWithoutBookingInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingTravelersInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutBookingTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingCreateNestedOneWithoutTravelersInputSchema: z.ZodType<Prisma.BookingCreateNestedOneWithoutTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingTravelersInputSchema: z.ZodType<Prisma.AccountCreateNestedOneWithoutBookingTravelersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutBookingTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => TenantUpsertWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingTravelersInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const BookingUpdateOneRequiredWithoutTravelersNestedInputSchema: z.ZodType<Prisma.BookingUpdateOneRequiredWithoutTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutTravelersInputSchema)
        .optional(),
      upsert: z.lazy(() => BookingUpsertWithoutTravelersInputSchema).optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithoutTravelersInputSchema),
          z.lazy(() => BookingUncheckedUpdateWithoutTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema: z.ZodType<Prisma.AccountUpdateOneRequiredWithoutBookingTravelersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingTravelersInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutBookingTravelersInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingTravelersInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingTravelersInputSchema)
        ])
        .optional()
    })
    .strict()

export const TenantCreateNestedOneWithoutBookingProductsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutBookingProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.BookingCreateNestedOneWithoutProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutProductsInputSchema)
        .optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional()
    })
    .strict()

export const AccountCreateNestedOneWithoutBookingProductsInputSchema: z.ZodType<Prisma.AccountCreateNestedOneWithoutBookingProductsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomCreateNestedManyWithoutBookingProductInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const TenantUpdateOneWithoutBookingProductsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneWithoutBookingProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => TenantCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => TenantUpsertWithoutBookingProductsInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => TenantUpdateWithoutBookingProductsInputSchema),
          z.lazy(() => TenantUncheckedUpdateWithoutBookingProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const BookingUpdateOneWithoutProductsNestedInputSchema: z.ZodType<Prisma.BookingUpdateOneWithoutProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingCreateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingCreateOrConnectWithoutProductsInputSchema)
        .optional(),
      upsert: z.lazy(() => BookingUpsertWithoutProductsInputSchema).optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => BookingWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingUpdateWithoutProductsInputSchema),
          z.lazy(() => BookingUncheckedUpdateWithoutProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const AccountUpdateOneWithoutBookingProductsNestedInputSchema: z.ZodType<Prisma.AccountUpdateOneWithoutBookingProductsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => AccountCreateOrConnectWithoutBookingProductsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => AccountUpsertWithoutBookingProductsInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithoutBookingProductsInputSchema),
          z.lazy(() => AccountUncheckedUpdateWithoutBookingProductsInputSchema)
        ])
        .optional()
    })
    .strict()

export const EnumProductCategoryFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumProductCategoryFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => ProductCategorySchema).optional()
    })
    .strict()

export const NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumAccommodationTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema: z.ZodType<Prisma.BookingProductRoomUpdateManyWithoutBookingProductNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema: z.ZodType<Prisma.BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(
            () => BookingProductRoomCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () => BookingProductRoomCreateWithoutBookingProductInputSchema
            )
            .array(),
          z.lazy(
            () =>
              BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      createMany: z
        .lazy(
          () => BookingProductRoomCreateManyBookingProductInputEnvelopeSchema
        )
        .optional(),
      set: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
          z.lazy(() => BookingProductRoomWhereUniqueInputSchema).array()
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () =>
              BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
          ),
          z
            .lazy(
              () =>
                BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema
            )
            .array()
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional()
    })
    .strict()

export const BookingProductCreateNestedOneWithoutRoomsInputSchema: z.ZodType<Prisma.BookingProductCreateNestedOneWithoutRoomsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingProductCreateOrConnectWithoutRoomsInputSchema)
        .optional(),
      connect: z.lazy(() => BookingProductWhereUniqueInputSchema).optional()
    })
    .strict()

export const BookingProductRoomCreateageOfMinorsInputSchema: z.ZodType<Prisma.BookingProductRoomCreateageOfMinorsInput> =
  z
    .object({
      set: z.number().array()
    })
    .strict()

export const BookingProductUpdateOneWithoutRoomsNestedInputSchema: z.ZodType<Prisma.BookingProductUpdateOneWithoutRoomsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => BookingProductCreateOrConnectWithoutRoomsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => BookingProductUpsertWithoutRoomsInputSchema)
        .optional(),
      disconnect: z.boolean().optional(),
      delete: z.boolean().optional(),
      connect: z.lazy(() => BookingProductWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => BookingProductUpdateWithoutRoomsInputSchema),
          z.lazy(() => BookingProductUncheckedUpdateWithoutRoomsInputSchema)
        ])
        .optional()
    })
    .strict()

export const EnumRoomCategoryFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRoomCategoryFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => RoomCategorySchema).optional()
    })
    .strict()

export const BookingProductRoomUpdateageOfMinorsInputSchema: z.ZodType<Prisma.BookingProductRoomUpdateageOfMinorsInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional()
    })
    .strict()

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
  })
  .strict()

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z
  .object({
    equals: z.string().optional(),
    in: z.string().array().optional(),
    notIn: z.string().array().optional(),
    lt: z.string().optional(),
    lte: z.string().optional(),
    gt: z.string().optional(),
    gte: z.string().optional(),
    contains: z.string().optional(),
    startsWith: z.string().optional(),
    endsWith: z.string().optional(),
    not: z
      .union([z.string(), z.lazy(() => NestedStringFilterSchema)])
      .optional()
  })
  .strict()

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> =
  z
    .object({
      equals: z.coerce.date().optional().nullable(),
      in: z.coerce.date().array().optional().nullable(),
      notIn: z.coerce.date().array().optional().nullable(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> =
  z
    .object({
      equals: z.coerce.date().optional(),
      in: z.coerce.date().array().optional(),
      notIn: z.coerce.date().array().optional(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([z.coerce.date(), z.lazy(() => NestedDateTimeFilterSchema)])
        .optional()
    })
    .strict()

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedIntFilterSchema).optional(),
      _max: z.lazy(() => NestedIntFilterSchema).optional()
    })
    .strict()

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z.union([z.number(), z.lazy(() => NestedFloatFilterSchema)]).optional()
  })
  .strict()

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedStringFilterSchema).optional(),
      _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> =
  z
    .object({
      equals: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional(),
      path: z.string().array().optional(),
      string_contains: z.string().optional(),
      string_starts_with: z.string().optional(),
      string_ends_with: z.string().optional(),
      array_contains: InputJsonValue.optional().nullable(),
      array_starts_with: InputJsonValue.optional().nullable(),
      array_ends_with: InputJsonValue.optional().nullable(),
      lt: InputJsonValue.optional(),
      lte: InputJsonValue.optional(),
      gt: InputJsonValue.optional(),
      gte: InputJsonValue.optional(),
      not: z
        .union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)])
        .optional()
    })
    .strict()

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.coerce.date().optional().nullable(),
      in: z.coerce.date().array().optional().nullable(),
      notIn: z.coerce.date().array().optional().nullable(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
    })
    .strict()

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> =
  z
    .object({
      equals: z.coerce.date().optional(),
      in: z.coerce.date().array().optional(),
      notIn: z.coerce.date().array().optional(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
    })
    .strict()

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([
          z.boolean(),
          z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
    })
    .strict()

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
    })
    .strict()

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedFloatNullableFilterSchema)])
        .optional()
        .nullable()
    })
    .strict()

export const NestedEnumAccountCategoryFilterSchema: z.ZodType<Prisma.NestedEnumAccountCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => AccountCategorySchema).optional(),
      in: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => NestedEnumAccountCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedEnumAccountCategoryWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumAccountCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => AccountCategorySchema).optional(),
      in: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => AccountCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => NestedEnumAccountCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumAccountCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumAccountCategoryFilterSchema).optional()
    })
    .strict()

export const NestedEnumBookingStatusNullableFilterSchema: z.ZodType<Prisma.NestedEnumBookingStatusNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(() => NestedEnumBookingStatusNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedDecimalNullableFilterSchema: z.ZodType<Prisma.NestedDecimalNullableFilter> =
  z
    .object({
      equals: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      in: z
        .union([
          z.number().array(),
          z.string().array(),
          DecimalJSLikeListSchema
        ])
        .refine(
          (v) =>
            Array.isArray(v) &&
            (v as any[]).every((v) => isValidDecimalInput(v)),
          { message: 'Must be a Decimal' }
        )
        .optional()
        .nullable(),
      notIn: z
        .union([
          z.number().array(),
          z.string().array(),
          DecimalJSLikeListSchema
        ])
        .refine(
          (v) =>
            Array.isArray(v) &&
            (v as any[]).every((v) => isValidDecimalInput(v)),
          { message: 'Must be a Decimal' }
        )
        .optional()
        .nullable(),
      lt: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      lte: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      gt: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      gte: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      not: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NestedDecimalNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedEnumBookingStatusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumBookingStatusNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => BookingStatusSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NestedEnumBookingStatusNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumBookingStatusNullableFilterSchema)
        .optional(),
      _max: z.lazy(() => NestedEnumBookingStatusNullableFilterSchema).optional()
    })
    .strict()

export const NestedDecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      in: z
        .union([
          z.number().array(),
          z.string().array(),
          DecimalJSLikeListSchema
        ])
        .refine(
          (v) =>
            Array.isArray(v) &&
            (v as any[]).every((v) => isValidDecimalInput(v)),
          { message: 'Must be a Decimal' }
        )
        .optional()
        .nullable(),
      notIn: z
        .union([
          z.number().array(),
          z.string().array(),
          DecimalJSLikeListSchema
        ])
        .refine(
          (v) =>
            Array.isArray(v) &&
            (v as any[]).every((v) => isValidDecimalInput(v)),
          { message: 'Must be a Decimal' }
        )
        .optional()
        .nullable(),
      lt: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      lte: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      gt: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      gte: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional(),
      not: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema)
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
    })
    .strict()

export const NestedEnumProductCategoryFilterSchema: z.ZodType<Prisma.NestedEnumProductCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => ProductCategorySchema).optional(),
      in: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => NestedEnumProductCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedEnumAccommodationTypeNullableFilterSchema: z.ZodType<Prisma.NestedEnumAccommodationTypeNullableFilter> =
  z
    .object({
      equals: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const NestedEnumProductCategoryWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumProductCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => ProductCategorySchema).optional(),
      in: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ProductCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => NestedEnumProductCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumProductCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumProductCategoryFilterSchema).optional()
    })
    .strict()

export const NestedEnumAccommodationTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumAccommodationTypeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      in: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      notIn: z
        .lazy(() => AccommodationTypeSchema)
        .array()
        .optional()
        .nullable(),
      not: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NestedEnumAccommodationTypeNullableWithAggregatesFilterSchema
          )
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z
        .lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        .optional(),
      _max: z
        .lazy(() => NestedEnumAccommodationTypeNullableFilterSchema)
        .optional()
    })
    .strict()

export const NestedEnumRoomCategoryFilterSchema: z.ZodType<Prisma.NestedEnumRoomCategoryFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryFilterSchema)
        ])
        .optional()
    })
    .strict()

export const NestedEnumRoomCategoryWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRoomCategoryWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => RoomCategorySchema).optional(),
      in: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => RoomCategorySchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => NestedEnumRoomCategoryWithAggregatesFilterSchema)
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumRoomCategoryFilterSchema).optional()
    })
    .strict()

export const UserCreateWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateWithoutTenantInput> =
  z
    .object({
      account: z
        .lazy(() => AccountCreateNestedOneWithoutAccountUsersInputSchema)
        .optional(),
      externalId: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.coerce.date().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      accountId: z.number().optional().nullable(),
      externalId: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.coerce.date().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => UserCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const AccountCreateWithoutTenantInputSchema: z.ZodType<Prisma.AccountCreateWithoutTenantInput> =
  z
    .object({
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => AccountCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingCreateWithoutTenantInputSchema: z.ZodType<Prisma.BookingCreateWithoutTenantInput> =
  z
    .object({
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z
        .lazy(() => AccountCreateNestedOneWithoutPurchasingInputSchema)
        .optional(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.BookingUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      accountId: z.number(),
      customerId: z.number().optional().nullable(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.BookingCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.BookingCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingTravelerCreateWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerCreateWithoutTenantInput> =
  z
    .object({
      booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.coerce.date(),
      passportNumber: z.string(),
      passportIssueDate: z.coerce.date(),
      passportExpireDate: z.coerce.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      bookingId: z.number(),
      accountId: z.number(),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.coerce.date(),
      passportNumber: z.string(),
      passportIssueDate: z.coerce.date(),
      passportExpireDate: z.coerce.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTravelerCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.BookingTravelerCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTravelerCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductCreateWithoutTenantInput> =
  z
    .object({
      booking: z
        .lazy(() => BookingCreateNestedOneWithoutProductsInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductUncheckedCreateWithoutTenantInput> =
  z
    .object({
      id: z.number().optional(),
      bookingId: z.number(),
      accountId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductCreateOrConnectWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.BookingProductCreateManyTenantInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyTenantInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const UserUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => UserUpdateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateWithoutTenantInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const UserUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => UserScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateManyMutationInputSchema),
        z.lazy(() => UserUncheckedUpdateManyWithoutUsersInputSchema)
      ])
    })
    .strict()

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => UserScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserScalarWhereInputSchema),
          z.lazy(() => UserScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      accountId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      externalId: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      companyName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      jobTitle: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      department: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      managerName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fax: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      gender: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      birthDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      isMaster: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const AccountUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => AccountUpdateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateWithoutTenantInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const AccountUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => AccountScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateManyMutationInputSchema),
        z.lazy(() => AccountUncheckedUpdateManyWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => AccountScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      parentId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      category: z
        .union([
          z.lazy(() => EnumAccountCategoryFilterSchema),
          z.lazy(() => AccountCategorySchema)
        ])
        .optional(),
      dobName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      taxId: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      ssn: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      brand: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fax: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      billingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      shippingAdresses: z.lazy(() => JsonNullableFilterSchema).optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      bankName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      branch: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      bankAccount: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      notes: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      countryCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      currencyCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locale: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      timeZone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      referralSource: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      domain: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      siteConfig: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.BookingUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.BookingUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.BookingUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateManyMutationInputSchema),
        z.lazy(() => BookingUncheckedUpdateManyWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const BookingScalarWhereInputSchema: z.ZodType<Prisma.BookingScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingScalarWhereInputSchema),
          z.lazy(() => BookingScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      customerId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      customerName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      customerEmail: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      customerPhone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      postalCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      fromCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toCity: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      travelDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      adultsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      childrenCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      requestDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => EnumBookingStatusNullableFilterSchema),
          z.lazy(() => BookingStatusSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutTenantInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingTravelersInputSchema
        )
      ])
    })
    .strict()

export const BookingTravelerScalarWhereInputSchema: z.ZodType<Prisma.BookingTravelerScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingTravelerScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingTravelerScalarWhereInputSchema),
          z.lazy(() => BookingTravelerScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      bookingId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      firstName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      lastName: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      birthDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      passportNumber: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      passportIssueDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      passportExpireDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      phone: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductUpsertWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutTenantInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductUpdateWithWhereUniqueWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutTenantInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutTenantInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductUpdateManyWithWhereWithoutTenantInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema
        )
      ])
    })
    .strict()

export const BookingProductScalarWhereInputSchema: z.ZodType<Prisma.BookingProductScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductScalarWhereInputSchema),
          z.lazy(() => BookingProductScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      tenantId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      bookingId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      accountId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      supplierId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      supplierName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      ownerId: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      category: z
        .union([
          z.lazy(() => EnumProductCategoryFilterSchema),
          z.lazy(() => ProductCategorySchema)
        ])
        .optional(),
      description: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      startDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      endDate: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      fromLocation: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      toLocation: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      termsAndConditions: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      locatorCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      paidDate: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z.lazy(() => DecimalNullableFilterSchema),
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            })
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      status: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelName: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => EnumAccommodationTypeNullableFilterSchema),
          z.lazy(() => AccommodationTypeSchema)
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      paymentType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      creditCardType: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const TenantCreateWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateWithoutUsersInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutUsersInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutUsersInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutAccountUsersInputSchema: z.ZodType<Prisma.AccountCreateWithoutAccountUsersInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutAccountUsersInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutAccountUsersInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutAccountUsersInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutAccountUsersInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutAccountUsersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutAccountUsersInputSchema)
      ])
    })
    .strict()

export const TenantUpsertWithoutUsersInputSchema: z.ZodType<Prisma.TenantUpsertWithoutUsersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutUsersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUpdateWithoutUsersInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutUsersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutAccountUsersInputSchema: z.ZodType<Prisma.AccountUpsertWithoutAccountUsersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutAccountUsersInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutAccountUsersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutAccountUsersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutAccountUsersInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutAccountUsersInputSchema: z.ZodType<Prisma.AccountUpdateWithoutAccountUsersInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutAccountUsersInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutAccountUsersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TenantCreateWithoutAccountsInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutAccountsInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutAccountsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutChildAccountsInputSchema: z.ZodType<Prisma.AccountCreateWithoutChildAccountsInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutChildAccountsInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutChildAccountsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutChildAccountsInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutChildAccountsInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutChildAccountsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutChildAccountsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutParentInputSchema: z.ZodType<Prisma.AccountCreateWithoutParentInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutParentInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutParentInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutParentInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutParentInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutParentInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema)
      ])
    })
    .strict()

export const AccountCreateManyParentInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyParentInputEnvelope> =
  z
    .object({
      data: z.lazy(() => AccountCreateManyParentInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const UserCreateWithoutAccountInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutUsersInputSchema)
        .optional(),
      externalId: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.coerce.date().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserUncheckedCreateWithoutAccountInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number().optional().nullable(),
      externalId: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.coerce.date().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const UserCreateOrConnectWithoutAccountInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutAccountInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const UserCreateManyAccountInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => UserCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingCreateWithoutAccountInputSchema: z.ZodType<Prisma.BookingCreateWithoutAccountInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      customer: z
        .lazy(() => AccountCreateNestedOneWithoutPurchasingInputSchema)
        .optional(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutAccountInputSchema: z.ZodType<Prisma.BookingUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      customerId: z.number().optional().nullable(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutAccountInputSchema: z.ZodType<Prisma.BookingCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingCreateManyAccountInputEnvelopeSchema: z.ZodType<Prisma.BookingCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingCreateWithoutCustomerInputSchema: z.ZodType<Prisma.BookingCreateWithoutCustomerInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.BookingUncheckedCreateWithoutCustomerInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.BookingCreateOrConnectWithoutCustomerInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutCustomerInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema)
      ])
    })
    .strict()

export const BookingCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.BookingCreateManyCustomerInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingCreateManyCustomerInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingTravelerCreateWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerCreateWithoutAccountInput> =
  z
    .object({
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      booking: z.lazy(() => BookingCreateNestedOneWithoutTravelersInputSchema),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.coerce.date(),
      passportNumber: z.string(),
      passportIssueDate: z.coerce.date(),
      passportExpireDate: z.coerce.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerUncheckedCreateWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      bookingId: z.number(),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.coerce.date(),
      passportNumber: z.string(),
      passportIssueDate: z.coerce.date(),
      passportExpireDate: z.coerce.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerCreateOrConnectWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTravelerCreateManyAccountInputEnvelopeSchema: z.ZodType<Prisma.BookingTravelerCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTravelerCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductCreateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingCreateNestedOneWithoutProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductUncheckedCreateWithoutAccountInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      bookingId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductCreateOrConnectWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyAccountInputEnvelopeSchema: z.ZodType<Prisma.BookingProductCreateManyAccountInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyAccountInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutAccountsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutAccountsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutAccountsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutAccountsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutAccountsInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutAccountsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutChildAccountsInputSchema: z.ZodType<Prisma.AccountUpsertWithoutChildAccountsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutChildAccountsInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutChildAccountsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutChildAccountsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutChildAccountsInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutChildAccountsInputSchema: z.ZodType<Prisma.AccountUpdateWithoutChildAccountsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutChildAccountsInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutChildAccountsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutParentInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => AccountUpdateWithoutParentInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutParentInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutParentInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutParentInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutParentInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateWithoutParentInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutParentInputSchema)
      ])
    })
    .strict()

export const AccountUpdateManyWithWhereWithoutParentInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutParentInput> =
  z
    .object({
      where: z.lazy(() => AccountScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateManyMutationInputSchema),
        z.lazy(() => AccountUncheckedUpdateManyWithoutChildAccountsInputSchema)
      ])
    })
    .strict()

export const UserUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => UserUpdateWithoutAccountInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutAccountInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const UserUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateWithoutAccountInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const UserUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => UserScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => UserUpdateManyMutationInputSchema),
        z.lazy(() => UserUncheckedUpdateManyWithoutAccountUsersInputSchema)
      ])
    })
    .strict()

export const BookingUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.BookingUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.BookingUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<Prisma.BookingUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateManyMutationInputSchema),
        z.lazy(() => BookingUncheckedUpdateManyWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const BookingUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.BookingUpsertWithWhereUniqueWithoutCustomerInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingUpdateWithoutCustomerInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutCustomerInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutCustomerInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutCustomerInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.BookingUpdateWithWhereUniqueWithoutCustomerInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateWithoutCustomerInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutCustomerInputSchema)
      ])
    })
    .strict()

export const BookingUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.BookingUpdateManyWithWhereWithoutCustomerInput> =
  z
    .object({
      where: z.lazy(() => BookingScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingUpdateManyMutationInputSchema),
        z.lazy(() => BookingUncheckedUpdateManyWithoutPurchasingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutAccountInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingTravelersInputSchema
        )
      ])
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductUpsertWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutAccountInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductUpdateWithWhereUniqueWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutAccountInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutAccountInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductUpdateManyWithWhereWithoutAccountInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () =>
            BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema
        )
      ])
    })
    .strict()

export const TenantCreateWithoutBookingsInputSchema: z.ZodType<Prisma.TenantCreateWithoutBookingsInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutBookingsInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutBookingsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingsInputSchema: z.ZodType<Prisma.AccountCreateWithoutBookingsInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingsInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutBookingsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingsInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutBookingsInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutPurchasingInputSchema: z.ZodType<Prisma.AccountCreateWithoutPurchasingInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutPurchasingInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutPurchasingInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutPurchasingInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutPurchasingInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutPurchasingInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutPurchasingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerCreateWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerCreateWithoutBookingInput> =
  z
    .object({
      tenant: z.lazy(
        () => TenantCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      account: z.lazy(
        () => AccountCreateNestedOneWithoutBookingTravelersInputSchema
      ),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.coerce.date(),
      passportNumber: z.string(),
      passportIssueDate: z.coerce.date(),
      passportExpireDate: z.coerce.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerUncheckedCreateWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedCreateWithoutBookingInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.coerce.date(),
      passportNumber: z.string(),
      passportIssueDate: z.coerce.date(),
      passportExpireDate: z.coerce.date(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerCreateOrConnectWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerCreateOrConnectWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerCreateManyBookingInputEnvelopeSchema: z.ZodType<Prisma.BookingTravelerCreateManyBookingInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingTravelerCreateManyBookingInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BookingProductCreateWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductCreateWithoutBookingInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductUncheckedCreateWithoutBookingInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedCreateNestedManyWithoutBookingProductInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductCreateOrConnectWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductCreateManyBookingInputEnvelopeSchema: z.ZodType<Prisma.BookingProductCreateManyBookingInputEnvelope> =
  z
    .object({
      data: z.lazy(() => BookingProductCreateManyBookingInputSchema).array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutBookingsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutBookingsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutBookingsInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutBookingsInputSchema: z.ZodType<Prisma.AccountUpsertWithoutBookingsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingsInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingsInputSchema: z.ZodType<Prisma.AccountUpdateWithoutBookingsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingsInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutBookingsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutPurchasingInputSchema: z.ZodType<Prisma.AccountUpsertWithoutPurchasingInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutPurchasingInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutPurchasingInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutPurchasingInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutPurchasingInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutPurchasingInputSchema: z.ZodType<Prisma.AccountUpdateWithoutPurchasingInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutPurchasingInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutPurchasingInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingTravelerUpsertWithWhereUniqueWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerUpsertWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutBookingInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingTravelerCreateWithoutBookingInputSchema),
        z.lazy(() => BookingTravelerUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateWithWhereUniqueWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerUpdateWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingTravelerUncheckedUpdateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingTravelerUpdateManyWithWhereWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerUpdateManyWithWhereWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingTravelerScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingTravelerUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTravelersInputSchema
        )
      ])
    })
    .strict()

export const BookingProductUpsertWithWhereUniqueWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductUpsertWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutBookingInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithWhereUniqueWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductUpdateWithWhereUniqueWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateWithoutBookingInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutBookingInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateManyWithWhereWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductUpdateManyWithWhereWithoutBookingInput> =
  z
    .object({
      where: z.lazy(() => BookingProductScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingProductUncheckedUpdateManyWithoutProductsInputSchema
        )
      ])
    })
    .strict()

export const TenantCreateWithoutBookingTravelersInputSchema: z.ZodType<Prisma.TenantCreateWithoutBookingTravelersInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingTravelersInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingTravelersInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutBookingTravelersInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const BookingCreateWithoutTravelersInputSchema: z.ZodType<Prisma.BookingCreateWithoutTravelersInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z
        .lazy(() => AccountCreateNestedOneWithoutPurchasingInputSchema)
        .optional(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      products: z
        .lazy(() => BookingProductCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutTravelersInputSchema: z.ZodType<Prisma.BookingUncheckedCreateWithoutTravelersInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      customerId: z.number().optional().nullable(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      products: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutTravelersInputSchema: z.ZodType<Prisma.BookingCreateOrConnectWithoutTravelersInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingTravelersInputSchema: z.ZodType<Prisma.AccountCreateWithoutBookingTravelersInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingTravelersInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutBookingTravelersInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingTravelersInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutBookingTravelersInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const TenantUpsertWithoutBookingTravelersInputSchema: z.ZodType<Prisma.TenantUpsertWithoutBookingTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingTravelersInputSchema: z.ZodType<Prisma.TenantUpdateWithoutBookingTravelersInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingTravelersInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUpsertWithoutTravelersInputSchema: z.ZodType<Prisma.BookingUpsertWithoutTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingUpdateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutTravelersInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutTravelersInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithoutTravelersInputSchema: z.ZodType<Prisma.BookingUpdateWithoutTravelersInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutTravelersInputSchema: z.ZodType<Prisma.BookingUncheckedUpdateWithoutTravelersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutBookingTravelersInputSchema: z.ZodType<Prisma.AccountUpsertWithoutBookingTravelersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingTravelersInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingTravelersInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingTravelersInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingTravelersInputSchema: z.ZodType<Prisma.AccountUpdateWithoutBookingTravelersInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingTravelersInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutBookingTravelersInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateWithoutBookingProductsInputSchema: z.ZodType<Prisma.TenantCreateWithoutBookingProductsInput> =
  z
    .object({
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutTenantInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedCreateWithoutBookingProductsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.number().optional(),
      name: z.string(),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      contactPrefix: z.string().optional().nullable(),
      contactFirstName: z.string().optional().nullable(),
      contactMiddleName: z.string().optional().nullable(),
      contactLastName: z.string().optional().nullable(),
      contactSuffix: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable(),
      users: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutTenantInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedCreateNestedManyWithoutTenantInputSchema
        )
        .optional()
    })
    .strict()

export const TenantCreateOrConnectWithoutBookingProductsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutBookingProductsInput> =
  z
    .object({
      where: z.lazy(() => TenantWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const BookingCreateWithoutProductsInputSchema: z.ZodType<Prisma.BookingCreateWithoutProductsInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutBookingsInputSchema),
      account: z.lazy(() => AccountCreateNestedOneWithoutBookingsInputSchema),
      customer: z
        .lazy(() => AccountCreateNestedOneWithoutPurchasingInputSchema)
        .optional(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutBookingInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.BookingUncheckedCreateWithoutProductsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      accountId: z.number(),
      customerId: z.number().optional().nullable(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutBookingInputSchema
        )
        .optional()
    })
    .strict()

export const BookingCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.BookingCreateOrConnectWithoutProductsInput> =
  z
    .object({
      where: z.lazy(() => BookingWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingCreateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
      ])
    })
    .strict()

export const AccountCreateWithoutBookingProductsInputSchema: z.ZodType<Prisma.AccountCreateWithoutBookingProductsInput> =
  z
    .object({
      tenant: z.lazy(() => TenantCreateNestedOneWithoutAccountsInputSchema),
      parent: z
        .lazy(() => AccountCreateNestedOneWithoutChildAccountsInputSchema)
        .optional(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerCreateNestedManyWithoutAccountInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedCreateWithoutBookingProductsInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutBookingProductsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      childAccounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutParentInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      bookings: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutAccountInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedCreateNestedManyWithoutCustomerInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedCreateNestedManyWithoutAccountInputSchema
        )
        .optional()
    })
    .strict()

export const AccountCreateOrConnectWithoutBookingProductsInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutBookingProductsInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const BookingProductRoomCreateWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomCreateWithoutBookingProductInput> =
  z
    .object({
      category: z.lazy(() => RoomCategorySchema),
      adultsCount: z.number(),
      minorsCount: z.number().optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomUncheckedCreateWithoutBookingProductInput> =
  z
    .object({
      id: z.number().optional(),
      category: z.lazy(() => RoomCategorySchema),
      adultsCount: z.number(),
      minorsCount: z.number().optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductRoomCreateOrConnectWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomCreateOrConnectWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductRoomCreateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomCreateManyBookingProductInputEnvelopeSchema: z.ZodType<Prisma.BookingProductRoomCreateManyBookingProductInputEnvelope> =
  z
    .object({
      data: z
        .lazy(() => BookingProductRoomCreateManyBookingProductInputSchema)
        .array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantUpsertWithoutBookingProductsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutBookingProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => TenantUpdateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedUpdateWithoutBookingProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => TenantCreateWithoutBookingProductsInputSchema),
        z.lazy(() => TenantUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const TenantUpdateWithoutBookingProductsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutBookingProductsInput> =
  z
    .object({
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutTenantNestedInputSchema)
        .optional()
    })
    .strict()

export const TenantUncheckedUpdateWithoutBookingProductsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactPrefix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactFirstName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactMiddleName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactLastName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      contactSuffix: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      users: z
        .lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutTenantNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () => BookingTravelerUncheckedUpdateManyWithoutTenantNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUpsertWithoutProductsInputSchema: z.ZodType<Prisma.BookingUpsertWithoutProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingUpdateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedUpdateWithoutProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingCreateWithoutProductsInputSchema),
        z.lazy(() => BookingUncheckedCreateWithoutProductsInputSchema)
      ])
    })
    .strict()

export const BookingUpdateWithoutProductsInputSchema: z.ZodType<Prisma.BookingUpdateWithoutProductsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.BookingUncheckedUpdateWithoutProductsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUpsertWithoutBookingProductsInputSchema: z.ZodType<Prisma.AccountUpsertWithoutBookingProductsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => AccountUpdateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutBookingProductsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutBookingProductsInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutBookingProductsInputSchema)
      ])
    })
    .strict()

export const AccountUpdateWithoutBookingProductsInputSchema: z.ZodType<Prisma.AccountUpdateWithoutBookingProductsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutBookingProductsInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutBookingProductsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomUpsertWithWhereUniqueWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => BookingProductRoomUpdateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema
        )
      ]),
      create: z.union([
        z.lazy(() => BookingProductRoomCreateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedCreateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomUpdateWithWhereUniqueWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => BookingProductRoomUpdateWithoutBookingProductInputSchema),
        z.lazy(
          () =>
            BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomUpdateManyWithWhereWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomUpdateManyWithWhereWithoutBookingProductInput> =
  z
    .object({
      where: z.lazy(() => BookingProductRoomScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => BookingProductRoomUpdateManyMutationInputSchema),
        z.lazy(
          () => BookingProductRoomUncheckedUpdateManyWithoutRoomsInputSchema
        )
      ])
    })
    .strict()

export const BookingProductRoomScalarWhereInputSchema: z.ZodType<Prisma.BookingProductRoomScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional(),
      OR: z
        .lazy(() => BookingProductRoomScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => BookingProductRoomScalarWhereInputSchema),
          z.lazy(() => BookingProductRoomScalarWhereInputSchema).array()
        ])
        .optional(),
      id: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      bookingProductId: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      category: z
        .union([
          z.lazy(() => EnumRoomCategoryFilterSchema),
          z.lazy(() => RoomCategorySchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      minorsCount: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      ageOfMinors: z.lazy(() => IntNullableListFilterSchema).optional(),
      createdAt: z
        .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
        .optional()
        .nullable(),
      createdBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
      modifiedBy: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      isActive: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductCreateWithoutRoomsInputSchema: z.ZodType<Prisma.BookingProductCreateWithoutRoomsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingCreateNestedOneWithoutProductsInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountCreateNestedOneWithoutBookingProductsInputSchema)
        .optional(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductUncheckedCreateWithoutRoomsInputSchema: z.ZodType<Prisma.BookingProductUncheckedCreateWithoutRoomsInput> =
  z
    .object({
      id: z.number().optional(),
      tenantId: z.number(),
      bookingId: z.number(),
      accountId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductCreateOrConnectWithoutRoomsInputSchema: z.ZodType<Prisma.BookingProductCreateOrConnectWithoutRoomsInput> =
  z
    .object({
      where: z.lazy(() => BookingProductWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
      ])
    })
    .strict()

export const BookingProductUpsertWithoutRoomsInputSchema: z.ZodType<Prisma.BookingProductUpsertWithoutRoomsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => BookingProductUpdateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedUpdateWithoutRoomsInputSchema)
      ]),
      create: z.union([
        z.lazy(() => BookingProductCreateWithoutRoomsInputSchema),
        z.lazy(() => BookingProductUncheckedCreateWithoutRoomsInputSchema)
      ])
    })
    .strict()

export const BookingProductUpdateWithoutRoomsInputSchema: z.ZodType<Prisma.BookingProductUpdateWithoutRoomsInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneWithoutProductsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutRoomsInputSchema: z.ZodType<Prisma.BookingProductUncheckedUpdateWithoutRoomsInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserCreateManyTenantInputSchema: z.ZodType<Prisma.UserCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      accountId: z.number().optional().nullable(),
      externalId: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      companyName: z.string().optional().nullable(),
      jobTitle: z.string().optional().nullable(),
      department: z.string().optional().nullable(),
      managerName: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z.string().optional().nullable(),
      birthDate: z.coerce.date().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isMaster: z.boolean().optional().nullable()
    })
    .strict()

export const AccountCreateManyTenantInputSchema: z.ZodType<Prisma.AccountCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      parentId: z.number().optional().nullable(),
      ownerId: z.number(),
      name: z.string(),
      category: z.lazy(() => AccountCategorySchema),
      dobName: z.string().optional().nullable(),
      taxId: z.string().optional().nullable(),
      ssn: z.string().optional().nullable(),
      brand: z.string().optional().nullable(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      mobilePhone: z.string().optional().nullable(),
      fax: z.string().optional().nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z.string().optional().nullable(),
      privacyPolicy: z.string().optional().nullable(),
      bankName: z.string().optional().nullable(),
      branch: z.string().optional().nullable(),
      bankAccount: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      countryCode: z.string().optional().nullable(),
      currencyCode: z.string().optional().nullable(),
      locale: z.string().optional().nullable(),
      timeZone: z.string().optional().nullable(),
      referralSource: z.string().optional().nullable(),
      domain: z.string().optional().nullable(),
      siteConfig: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingCreateManyTenantInputSchema: z.ZodType<Prisma.BookingCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      accountId: z.number(),
      customerId: z.number().optional().nullable(),
      ownerId: z.number().optional().nullable(),
      customerName: z.string().optional().nullable(),
      customerEmail: z.string().optional().nullable(),
      customerPhone: z.string().optional().nullable(),
      postalCode: z.string().optional().nullable(),
      fromCity: z.string().optional().nullable(),
      toCity: z.string().optional().nullable(),
      travelDate: z.coerce.date().optional().nullable(),
      travelPeriod: z.string().optional().nullable(),
      adultsCount: z.number().optional().nullable(),
      childrenCount: z.number().optional().nullable(),
      seniorsCount: z.number().optional().nullable(),
      requestDescription: z.string().optional().nullable(),
      status: z
        .lazy(() => BookingStatusSchema)
        .optional()
        .nullable(),
      locatorCode: z.string().optional().nullable(),
      totalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      totalCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentType: z.string().optional().nullable(),
      paymentStatus: z.string().optional().nullable(),
      paymentDateTime: z.coerce.date().optional().nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional().nullable(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingTravelerCreateManyTenantInputSchema: z.ZodType<Prisma.BookingTravelerCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      bookingId: z.number(),
      accountId: z.number(),
      ownerId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      birthDate: z.coerce.date(),
      passportNumber: z.string(),
      passportIssueDate: z.coerce.date(),
      passportExpireDate: z.coerce.date(),
      email: z.string().email(),
      phone: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const BookingProductCreateManyTenantInputSchema: z.ZodType<Prisma.BookingProductCreateManyTenantInput> =
  z
    .object({
      id: z.number().int().optional(),
      bookingId: z.number(),
      accountId: z.number(),
      supplierId: z.number().optional().nullable(),
      supplierName: z.string().optional().nullable(),
      ownerId: z.number(),
      category: z.lazy(() => ProductCategorySchema),
      description: z.string().optional().nullable(),
      startDate: z.coerce.date(),
      endDate: z.coerce.date(),
      fromLocation: z.string().optional().nullable(),
      toLocation: z.string(),
      termsAndConditions: z.string().optional().nullable(),
      locatorCode: z.string().optional().nullable(),
      productCost: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      agentMarkup: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      localTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      stateTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      federalTaxes: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      additionalFees: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discountPercent: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      discount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      finalPrice: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      paymentDueDate: z.coerce.date().optional().nullable(),
      paidDate: z.coerce.date().optional().nullable(),
      paymentAmount: z
        .union([z.number(), z.string(), DecimalJSLikeSchema])
        .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
        .optional()
        .nullable(),
      voucherFilePath: z.string().optional().nullable(),
      receiptFilePath: z.string().optional().nullable(),
      invoiceFilePath: z.string().optional().nullable(),
      status: z.string().optional().nullable(),
      hotelName: z.string().optional().nullable(),
      hotelStarRating: z.number().optional().nullable(),
      hotelMealPlan: z.string().optional().nullable(),
      accommodationType: z
        .lazy(() => AccommodationTypeSchema)
        .optional()
        .nullable(),
      bookingGroupId: z.number().optional().nullable(),
      paymentType: z.string().optional().nullable(),
      paymentDescription: z.string().optional().nullable(),
      creditCardType: z.string().optional().nullable(),
      creditCardLastFourDigits: z.number().optional().nullable(),
      creditCardAuthorizationCode: z.string().optional().nullable(),
      createdAt: z.coerce.date().optional().nullable(),
      createdBy: z.string().optional().nullable(),
      modifiedAt: z.coerce.date().optional(),
      modifiedBy: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable()
    })
    .strict()

export const UserUpdateWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateWithoutTenantInput> =
  z
    .object({
      account: z
        .lazy(() => AccountUpdateOneWithoutAccountUsersNestedInputSchema)
        .optional(),
      externalId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      externalId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<
  Omit<Prisma.UserUncheckedUpdateManyWithoutUsersInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    externalId: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const AccountUpdateWithoutTenantInputSchema: z.ZodType<Prisma.AccountUpdateWithoutTenantInput> =
  z
    .object({
      parent: z
        .lazy(() => AccountUpdateOneWithoutChildAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      parentId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutAccountsInputSchema: z.ZodType<
  Omit<Prisma.AccountUncheckedUpdateManyWithoutAccountsInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    parentId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingUpdateWithoutTenantInputSchema: z.ZodType<Prisma.BookingUpdateWithoutTenantInput> =
  z
    .object({
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.BookingUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutBookingsInputSchema: z.ZodType<
  Omit<Prisma.BookingUncheckedUpdateManyWithoutBookingsInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    customerId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingTravelerUpdateWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerUpdateWithoutTenantInput> =
  z
    .object({
      booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutBookingTravelersInputSchema: z.ZodType<
  Omit<
    Prisma.BookingTravelerUncheckedUpdateManyWithoutBookingTravelersInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    passportExpireDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    email: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductUpdateWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductUpdateWithoutTenantInput> =
  z
    .object({
      booking: z
        .lazy(() => BookingUpdateOneWithoutProductsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.BookingProductUncheckedUpdateWithoutTenantInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutBookingProductsInputSchema: z.ZodType<
  Omit<
    Prisma.BookingProductUncheckedUpdateManyWithoutBookingProductsInput,
    'id'
  >
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    bookingId: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    supplierId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    supplierName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    category: z
      .union([
        z.lazy(() => ProductCategorySchema),
        z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    endDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    stateTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accommodationType: z
      .union([
        z.lazy(() => AccommodationTypeSchema),
        z.lazy(
          () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
        )
      ])
      .optional()
      .nullable(),
    bookingGroupId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardLastFourDigits: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardAuthorizationCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const AccountCreateManyParentInputSchema: z.ZodType<
  Omit<Prisma.AccountCreateManyParentInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    ownerId: z.number().int(),
    name: z.string(),
    category: z.lazy(() => AccountCategorySchema),
    dobName: z.string().optional().nullable(),
    taxId: z.string().optional().nullable(),
    ssn: z.string().optional().nullable(),
    brand: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z.string().optional().nullable(),
    privacyPolicy: z.string().optional().nullable(),
    bankName: z.string().optional().nullable(),
    branch: z.string().optional().nullable(),
    bankAccount: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    countryCode: z.string().optional().nullable(),
    currencyCode: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    timeZone: z.string().optional().nullable(),
    referralSource: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    siteConfig: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const UserCreateManyAccountInputSchema: z.ZodType<
  Omit<Prisma.UserCreateManyAccountInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int().optional().nullable(),
    externalId: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    companyName: z.string().optional().nullable(),
    jobTitle: z.string().optional().nullable(),
    department: z.string().optional().nullable(),
    managerName: z.string().optional().nullable(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    mobilePhone: z.string().optional().nullable(),
    fax: z.string().optional().nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z.string().optional().nullable(),
    birthDate: z.coerce.date().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isMaster: z.boolean().optional().nullable()
  })
  .strict()

export const BookingCreateManyAccountInputSchema: z.ZodType<
  Omit<Prisma.BookingCreateManyAccountInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    customerId: z.number().optional().nullable(),
    ownerId: z.number().int().optional().nullable(),
    customerName: z.string().optional().nullable(),
    customerEmail: z.string().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.coerce.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().optional().nullable(),
    childrenCount: z.number().optional().nullable(),
    seniorsCount: z.number().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    totalCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.coerce.date().optional().nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingCreateManyCustomerInputSchema: z.ZodType<
  Omit<Prisma.BookingCreateManyCustomerInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    ownerId: z.number().int().optional().nullable(),
    customerName: z.string().optional().nullable(),
    customerEmail: z.string().email().optional().nullable(),
    customerPhone: z.string().optional().nullable(),
    postalCode: z.string().optional().nullable(),
    fromCity: z.string().optional().nullable(),
    toCity: z.string().optional().nullable(),
    travelDate: z.coerce.date().optional().nullable(),
    travelPeriod: z.string().optional().nullable(),
    adultsCount: z.number().int().optional().nullable(),
    childrenCount: z.number().int().optional().nullable(),
    seniorsCount: z.number().int().optional().nullable(),
    requestDescription: z.string().optional().nullable(),
    status: z
      .lazy(() => BookingStatusSchema)
      .optional()
      .nullable(),
    locatorCode: z.string().optional().nullable(),
    totalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    totalCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentType: z.string().optional().nullable(),
    paymentStatus: z.string().optional().nullable(),
    paymentDateTime: z.coerce.date().optional().nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional().nullable(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingTravelerCreateManyAccountInputSchema: z.ZodType<
  Omit<Prisma.BookingTravelerCreateManyAccountInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    ownerId: z.number().int(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.coerce.date(),
    passportNumber: z.string(),
    passportIssueDate: z.coerce.date(),
    passportExpireDate: z.coerce.date(),
    email: z.string().email(),
    phone: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductCreateManyAccountInputSchema: z.ZodType<
  Omit<Prisma.BookingProductCreateManyAccountInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    bookingId: z.number(),
    supplierId: z.number().optional().nullable(),
    supplierName: z.string().optional().nullable(),
    ownerId: z.number().int(),
    category: z.lazy(() => ProductCategorySchema),
    description: z.string().optional().nullable(),
    startDate: z.coerce.date(),
    endDate: z.coerce.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    productCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    agentMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    localTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    stateTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    federalTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    additionalFees: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    finalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentDueDate: z.coerce.date().optional().nullable(),
    paidDate: z.coerce.date().optional().nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z.string().optional().nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z.string().optional().nullable(),
    accommodationType: z
      .lazy(() => AccommodationTypeSchema)
      .optional()
      .nullable(),
    bookingGroupId: z.number().optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentDescription: z.string().optional().nullable(),
    creditCardType: z.string().optional().nullable(),
    creditCardLastFourDigits: z.number().optional().nullable(),
    creditCardAuthorizationCode: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const AccountUpdateWithoutParentInputSchema: z.ZodType<Prisma.AccountUpdateWithoutParentInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutAccountsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      bookingProducts: z
        .lazy(() => BookingProductUpdateManyWithoutAccountNestedInputSchema)
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateWithoutParentInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutParentInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      childAccounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutParentNestedInputSchema)
        .optional(),
      accountUsers: z
        .lazy(() => UserUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      category: z
        .union([
          z.lazy(() => AccountCategorySchema),
          z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      dobName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      taxId: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ssn: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      brand: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      billingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      shippingAdresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      privacyPolicy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      branch: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bankAccount: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      notes: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      countryCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      currencyCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locale: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      timeZone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      referralSource: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      domain: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      siteConfig: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      bookings: z
        .lazy(() => BookingUncheckedUpdateManyWithoutAccountNestedInputSchema)
        .optional(),
      purchasing: z
        .lazy(() => BookingUncheckedUpdateManyWithoutCustomerNestedInputSchema)
        .optional(),
      bookingTravelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional(),
      bookingProducts: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutAccountNestedInputSchema
        )
        .optional()
    })
    .strict()

export const AccountUncheckedUpdateManyWithoutChildAccountsInputSchema: z.ZodType<
  Omit<Prisma.AccountUncheckedUpdateManyWithoutChildAccountsInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    category: z
      .union([
        z.lazy(() => AccountCategorySchema),
        z.lazy(() => EnumAccountCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    dobName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    taxId: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ssn: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    brand: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    billingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    shippingAdresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    privacyPolicy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    branch: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    bankAccount: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    notes: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    countryCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    currencyCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locale: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    timeZone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    referralSource: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    domain: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    siteConfig: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const UserUpdateWithoutAccountInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutUsersNestedInputSchema)
        .optional(),
      externalId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateWithoutAccountInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      externalId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      companyName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      jobTitle: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      department: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      managerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      mobilePhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fax: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adresses: z
        .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
        .optional(),
      gender: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isMaster: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const UserUncheckedUpdateManyWithoutAccountUsersInputSchema: z.ZodType<
  Omit<Prisma.UserUncheckedUpdateManyWithoutAccountUsersInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    externalId: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    companyName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    jobTitle: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    department: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    managerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string().email(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    mobilePhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fax: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adresses: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue])
      .optional(),
    gender: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isMaster: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingUpdateWithoutAccountInputSchema: z.ZodType<Prisma.BookingUpdateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      customer: z
        .lazy(() => AccountUpdateOneWithoutPurchasingNestedInputSchema)
        .optional(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutAccountInputSchema: z.ZodType<Prisma.BookingUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      customerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.BookingUpdateWithoutCustomerInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneRequiredWithoutBookingsNestedInputSchema)
        .optional(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(() => BookingTravelerUpdateManyWithoutBookingNestedInputSchema)
        .optional(),
      products: z
        .lazy(() => BookingProductUpdateManyWithoutBookingNestedInputSchema)
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.BookingUncheckedUpdateWithoutCustomerInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerEmail: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      customerPhone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      postalCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      fromCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toCity: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelPeriod: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      adultsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      childrenCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      seniorsCount: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      requestDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.lazy(() => BookingStatusSchema),
          z.lazy(
            () => NullableEnumBookingStatusFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      totalCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentStatus: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDateTime: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      travelers: z
        .lazy(
          () =>
            BookingTravelerUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional(),
      products: z
        .lazy(
          () => BookingProductUncheckedUpdateManyWithoutBookingNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingUncheckedUpdateManyWithoutPurchasingInputSchema: z.ZodType<
  Omit<Prisma.BookingUncheckedUpdateManyWithoutPurchasingInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerEmail: z
      .union([
        z.string().email(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    customerPhone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    postalCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    fromCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toCity: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    travelPeriod: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    childrenCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    seniorsCount: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    requestDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.lazy(() => BookingStatusSchema),
        z.lazy(() => NullableEnumBookingStatusFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    totalCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentStatus: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDateTime: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingTravelerUpdateWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerUpdateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneRequiredWithoutTravelersNestedInputSchema)
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateWithoutAccountInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductUpdateWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductUpdateWithoutAccountInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      booking: z
        .lazy(() => BookingUpdateOneWithoutProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutAccountInputSchema: z.ZodType<Prisma.BookingProductUncheckedUpdateWithoutAccountInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      bookingId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingTravelerCreateManyBookingInputSchema: z.ZodType<
  Omit<Prisma.BookingTravelerCreateManyBookingInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    ownerId: z.number().int(),
    firstName: z.string(),
    lastName: z.string(),
    birthDate: z.coerce.date(),
    passportNumber: z.string(),
    passportIssueDate: z.coerce.date(),
    passportExpireDate: z.coerce.date(),
    email: z.string(),
    phone: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductCreateManyBookingInputSchema: z.ZodType<
  Omit<Prisma.BookingProductCreateManyBookingInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    tenantId: z.number().int(),
    accountId: z.number().int(),
    supplierId: z.number().optional().nullable(),
    supplierName: z.string().optional().nullable(),
    ownerId: z.number().int(),
    category: z.lazy(() => ProductCategorySchema),
    description: z.string().optional().nullable(),
    startDate: z.coerce.date(),
    endDate: z.coerce.date(),
    fromLocation: z.string().optional().nullable(),
    toLocation: z.string(),
    termsAndConditions: z.string().optional().nullable(),
    locatorCode: z.string().optional().nullable(),
    productCost: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    agentMarkup: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    localTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    stateTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    federalTaxes: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    additionalFees: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discountPercent: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    discount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    finalPrice: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    paymentDueDate: z.coerce.date().optional().nullable(),
    paidDate: z.coerce.date().optional().nullable(),
    paymentAmount: z
      .union([z.number(), z.string(), DecimalJSLikeSchema])
      .refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
      .optional()
      .nullable(),
    voucherFilePath: z.string().optional().nullable(),
    receiptFilePath: z.string().optional().nullable(),
    invoiceFilePath: z.string().optional().nullable(),
    status: z.string().optional().nullable(),
    hotelName: z.string().optional().nullable(),
    hotelStarRating: z.number().optional().nullable(),
    hotelMealPlan: z.string().optional().nullable(),
    accommodationType: z
      .lazy(() => AccommodationTypeSchema)
      .optional()
      .nullable(),
    bookingGroupId: z.number().optional().nullable(),
    paymentType: z.string().optional().nullable(),
    paymentDescription: z.string().optional().nullable(),
    creditCardType: z.string().optional().nullable(),
    creditCardLastFourDigits: z.number().optional().nullable(),
    creditCardAuthorizationCode: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingTravelerUpdateWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerUpdateWithoutBookingInput> =
  z
    .object({
      tenant: z
        .lazy(
          () => TenantUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      account: z
        .lazy(
          () => AccountUpdateOneRequiredWithoutBookingTravelersNestedInputSchema
        )
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateWithoutBookingInputSchema: z.ZodType<Prisma.BookingTravelerUncheckedUpdateWithoutBookingInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      firstName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      lastName: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      birthDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportNumber: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportIssueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      passportExpireDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      email: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      phone: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingTravelerUncheckedUpdateManyWithoutTravelersInputSchema: z.ZodType<
  Omit<Prisma.BookingTravelerUncheckedUpdateManyWithoutTravelersInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    firstName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    lastName: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    birthDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    passportNumber: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    passportIssueDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    passportExpireDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    email: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    phone: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductUpdateWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductUpdateWithoutBookingInput> =
  z
    .object({
      tenant: z
        .lazy(() => TenantUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      account: z
        .lazy(() => AccountUpdateOneWithoutBookingProductsNestedInputSchema)
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateWithoutBookingInputSchema: z.ZodType<Prisma.BookingProductUncheckedUpdateWithoutBookingInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      tenantId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      accountId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      supplierId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      supplierName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      ownerId: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => ProductCategorySchema),
          z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      description: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      startDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      endDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      fromLocation: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      toLocation: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      termsAndConditions: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      locatorCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      productCost: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      tenantMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agencyMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      agentMarkup: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      localTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      stateTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      federalTaxes: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      additionalFees: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discountPercent: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      discount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      finalPrice: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDueDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paidDate: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentAmount: z
        .union([
          z
            .union([z.number(), z.string(), DecimalJSLikeSchema])
            .refine((v) => isValidDecimalInput(v), {
              message: 'Must be a Decimal'
            }),
          z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      voucherFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      receiptFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      invoiceFilePath: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      status: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelName: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelStarRating: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      hotelMealPlan: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      accommodationType: z
        .union([
          z.lazy(() => AccommodationTypeSchema),
          z.lazy(
            () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
          )
        ])
        .optional()
        .nullable(),
      bookingGroupId: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      paymentDescription: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardType: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardLastFourDigits: z
        .union([
          z.number(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      creditCardAuthorizationCode: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      rooms: z
        .lazy(
          () =>
            BookingProductRoomUncheckedUpdateManyWithoutBookingProductNestedInputSchema
        )
        .optional()
    })
    .strict()

export const BookingProductUncheckedUpdateManyWithoutProductsInputSchema: z.ZodType<
  Omit<Prisma.BookingProductUncheckedUpdateManyWithoutProductsInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    tenantId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    accountId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    supplierId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    supplierName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    ownerId: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    category: z
      .union([
        z.lazy(() => ProductCategorySchema),
        z.lazy(() => EnumProductCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    description: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    startDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    endDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    fromLocation: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    toLocation: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    termsAndConditions: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    locatorCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    productCost: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    tenantMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agencyMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    agentMarkup: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    localTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    stateTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    federalTaxes: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    additionalFees: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discountPercent: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    discount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    finalPrice: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDueDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paidDate: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentAmount: z
      .union([
        z
          .union([z.number(), z.string(), DecimalJSLikeSchema])
          .refine((v) => isValidDecimalInput(v), {
            message: 'Must be a Decimal'
          }),
        z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    voucherFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    receiptFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    invoiceFilePath: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    status: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelName: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelStarRating: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    hotelMealPlan: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    accommodationType: z
      .union([
        z.lazy(() => AccommodationTypeSchema),
        z.lazy(
          () => NullableEnumAccommodationTypeFieldUpdateOperationsInputSchema
        )
      ])
      .optional()
      .nullable(),
    bookingGroupId: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    paymentDescription: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardType: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardLastFourDigits: z
      .union([
        z.number(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    creditCardAuthorizationCode: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

export const BookingProductRoomCreateManyBookingProductInputSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomCreateManyBookingProductInput, 'id'>
> = z
  .object({
    // omitted: id: z.number().optional(),
    category: z.lazy(() => RoomCategorySchema),
    adultsCount: z.number().int(),
    minorsCount: z.number().optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomCreateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z.coerce.date().optional().nullable(),
    createdBy: z.string().optional().nullable(),
    modifiedAt: z.coerce.date().optional(),
    modifiedBy: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable()
  })
  .strict()

export const BookingProductRoomUpdateWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomUpdateWithoutBookingProductInput> =
  z
    .object({
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateWithoutBookingProductInputSchema: z.ZodType<Prisma.BookingProductRoomUncheckedUpdateWithoutBookingProductInput> =
  z
    .object({
      id: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      category: z
        .union([
          z.lazy(() => RoomCategorySchema),
          z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      adultsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      minorsCount: z
        .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
        .optional(),
      ageOfMinors: z
        .union([
          z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
          z.number().array()
        ])
        .optional(),
      createdAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      createdBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      modifiedAt: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
        ])
        .optional(),
      modifiedBy: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable(),
      isActive: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
        ])
        .optional()
        .nullable()
    })
    .strict()

export const BookingProductRoomUncheckedUpdateManyWithoutRoomsInputSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomUncheckedUpdateManyWithoutRoomsInput, 'id'>
> = z
  .object({
    // omitted: id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
    category: z
      .union([
        z.lazy(() => RoomCategorySchema),
        z.lazy(() => EnumRoomCategoryFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    adultsCount: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    minorsCount: z
      .union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)])
      .optional(),
    ageOfMinors: z
      .union([
        z.lazy(() => BookingProductRoomUpdateageOfMinorsInputSchema),
        z.number().array()
      ])
      .optional(),
    createdAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    createdBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    modifiedAt: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)
      ])
      .optional(),
    modifiedBy: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable(),
    isActive: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)
      ])
      .optional()
      .nullable()
  })
  .strict()

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const TenantFindFirstArgsSchema: z.ZodType<Prisma.TenantFindFirstArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: TenantScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const TenantFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TenantFindFirstOrThrowArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: TenantScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const TenantFindManyArgsSchema: z.ZodType<Prisma.TenantFindManyArgs> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    where: TenantWhereInputSchema.optional(),
    orderBy: z
      .union([
        TenantOrderByWithRelationInputSchema.array(),
        TenantOrderByWithRelationInputSchema
      ])
      .optional(),
    cursor: TenantWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: TenantScalarFieldEnumSchema.array().optional()
  })
  .strict()

export const TenantAggregateArgsSchema: z.ZodType<Prisma.TenantAggregateArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereInputSchema.optional(),
      orderBy: z
        .union([
          TenantOrderByWithRelationInputSchema.array(),
          TenantOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: TenantWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const TenantGroupByArgsSchema: z.ZodType<Prisma.TenantGroupByArgs> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    where: TenantWhereInputSchema.optional(),
    orderBy: z
      .union([
        TenantOrderByWithAggregationInputSchema.array(),
        TenantOrderByWithAggregationInputSchema
      ])
      .optional(),
    by: TenantScalarFieldEnumSchema.array(),
    having: TenantScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional()
  })
  .strict()

export const TenantFindUniqueArgsSchema: z.ZodType<Prisma.TenantFindUniqueArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const TenantFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TenantFindUniqueOrThrowArgs> =
  z
    .object({
      select: TenantSelectSchema.optional(),
      include: TenantIncludeSchema.optional(),
      where: TenantWhereUniqueInputSchema
    })
    .strict()

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereInputSchema.optional(),
    orderBy: z
      .union([
        UserOrderByWithRelationInputSchema.array(),
        UserOrderByWithRelationInputSchema
      ])
      .optional(),
    cursor: UserWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: UserScalarFieldEnumSchema.array().optional()
  })
  .strict()

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: UserScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereInputSchema.optional(),
    orderBy: z
      .union([
        UserOrderByWithRelationInputSchema.array(),
        UserOrderByWithRelationInputSchema
      ])
      .optional(),
    cursor: UserWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: UserScalarFieldEnumSchema.array().optional()
  })
  .strict()

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereInputSchema.optional(),
    orderBy: z
      .union([
        UserOrderByWithRelationInputSchema.array(),
        UserOrderByWithRelationInputSchema
      ])
      .optional(),
    cursor: UserWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional()
  })
  .strict()

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereInputSchema.optional(),
    orderBy: z
      .union([
        UserOrderByWithAggregationInputSchema.array(),
        UserOrderByWithAggregationInputSchema
      ])
      .optional(),
    by: UserScalarFieldEnumSchema.array(),
    having: UserScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional()
  })
  .strict()

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereUniqueInputSchema
  })
  .strict()

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereUniqueInputSchema
    })
    .strict()

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: AccountScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    where: AccountWhereInputSchema.optional(),
    orderBy: z
      .union([
        AccountOrderByWithAggregationInputSchema.array(),
        AccountOrderByWithAggregationInputSchema
      ])
      .optional(),
    by: AccountScalarFieldEnumSchema.array(),
    having: AccountScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional()
  })
  .strict()

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema
    })
    .strict()

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema
    })
    .strict()

export const BookingFindFirstArgsSchema: z.ZodType<Prisma.BookingFindFirstArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BookingFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingFindManyArgsSchema: z.ZodType<Prisma.BookingFindManyArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingAggregateArgsSchema: z.ZodType<Prisma.BookingAggregateArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingOrderByWithRelationInputSchema.array(),
          BookingOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingGroupByArgsSchema: z.ZodType<Prisma.BookingGroupByArgs> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    where: BookingWhereInputSchema.optional(),
    orderBy: z
      .union([
        BookingOrderByWithAggregationInputSchema.array(),
        BookingOrderByWithAggregationInputSchema
      ])
      .optional(),
    by: BookingScalarFieldEnumSchema.array(),
    having: BookingScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional()
  })
  .strict()

export const BookingFindUniqueArgsSchema: z.ZodType<Prisma.BookingFindUniqueArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereUniqueInputSchema
    })
    .strict()

export const BookingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BookingFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingSelectSchema.optional(),
      include: BookingIncludeSchema.optional(),
      where: BookingWhereUniqueInputSchema
    })
    .strict()

export const BookingTravelerFindFirstArgsSchema: z.ZodType<Prisma.BookingTravelerFindFirstArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithRelationInputSchema.array(),
          BookingTravelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTravelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTravelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTravelerFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BookingTravelerFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithRelationInputSchema.array(),
          BookingTravelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTravelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTravelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTravelerFindManyArgsSchema: z.ZodType<Prisma.BookingTravelerFindManyArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithRelationInputSchema.array(),
          BookingTravelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTravelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingTravelerScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingTravelerAggregateArgsSchema: z.ZodType<Prisma.BookingTravelerAggregateArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithRelationInputSchema.array(),
          BookingTravelerOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingTravelerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingTravelerGroupByArgsSchema: z.ZodType<Prisma.BookingTravelerGroupByArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingTravelerOrderByWithAggregationInputSchema.array(),
          BookingTravelerOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingTravelerScalarFieldEnumSchema.array(),
      having: BookingTravelerScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingTravelerFindUniqueArgsSchema: z.ZodType<Prisma.BookingTravelerFindUniqueArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereUniqueInputSchema
    })
    .strict()

export const BookingTravelerFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BookingTravelerFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereUniqueInputSchema
    })
    .strict()

export const BookingProductFindFirstArgsSchema: z.ZodType<Prisma.BookingProductFindFirstArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BookingProductFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductFindManyArgsSchema: z.ZodType<Prisma.BookingProductFindManyArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductAggregateArgsSchema: z.ZodType<Prisma.BookingProductAggregateArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithRelationInputSchema.array(),
          BookingProductOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductGroupByArgsSchema: z.ZodType<Prisma.BookingProductGroupByArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductOrderByWithAggregationInputSchema.array(),
          BookingProductOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingProductScalarFieldEnumSchema.array(),
      having: BookingProductScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductFindUniqueArgsSchema: z.ZodType<Prisma.BookingProductFindUniqueArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BookingProductFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomFindFirstArgsSchema: z.ZodType<Prisma.BookingProductRoomFindFirstArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BookingProductRoomFindFirstOrThrowArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomFindManyArgsSchema: z.ZodType<Prisma.BookingProductRoomFindManyArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: BookingProductRoomScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const BookingProductRoomAggregateArgsSchema: z.ZodType<Prisma.BookingProductRoomAggregateArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithRelationInputSchema.array(),
          BookingProductRoomOrderByWithRelationInputSchema
        ])
        .optional(),
      cursor: BookingProductRoomWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductRoomGroupByArgsSchema: z.ZodType<Prisma.BookingProductRoomGroupByArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereInputSchema.optional(),
      orderBy: z
        .union([
          BookingProductRoomOrderByWithAggregationInputSchema.array(),
          BookingProductRoomOrderByWithAggregationInputSchema
        ])
        .optional(),
      by: BookingProductRoomScalarFieldEnumSchema.array(),
      having: BookingProductRoomScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional()
    })
    .strict()

export const BookingProductRoomFindUniqueArgsSchema: z.ZodType<Prisma.BookingProductRoomFindUniqueArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BookingProductRoomFindUniqueOrThrowArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const TenantCreateArgsSchema: z.ZodType<Prisma.TenantCreateArgs> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    data: z.union([TenantCreateInputSchema, TenantUncheckedCreateInputSchema])
  })
  .strict()

export const TenantUpsertArgsSchema: z.ZodType<Prisma.TenantUpsertArgs> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    where: TenantWhereUniqueInputSchema,
    create: z.union([
      TenantCreateInputSchema,
      TenantUncheckedCreateInputSchema
    ]),
    update: z.union([TenantUpdateInputSchema, TenantUncheckedUpdateInputSchema])
  })
  .strict()

export const TenantCreateManyArgsSchema: z.ZodType<Prisma.TenantCreateManyArgs> =
  z
    .object({
      data: TenantCreateManyInputSchema.array(),
      skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantDeleteArgsSchema: z.ZodType<Prisma.TenantDeleteArgs> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    where: TenantWhereUniqueInputSchema
  })
  .strict()

export const TenantUpdateArgsSchema: z.ZodType<Prisma.TenantUpdateArgs> = z
  .object({
    select: TenantSelectSchema.optional(),
    include: TenantIncludeSchema.optional(),
    data: z.union([TenantUpdateInputSchema, TenantUncheckedUpdateInputSchema]),
    where: TenantWhereUniqueInputSchema
  })
  .strict()

export const TenantUpdateManyArgsSchema: z.ZodType<Prisma.TenantUpdateManyArgs> =
  z
    .object({
      data: z.union([
        TenantUpdateManyMutationInputSchema,
        TenantUncheckedUpdateManyInputSchema
      ]),
      where: TenantWhereInputSchema.optional()
    })
    .strict()

export const TenantDeleteManyArgsSchema: z.ZodType<Prisma.TenantDeleteManyArgs> =
  z
    .object({
      where: TenantWhereInputSchema.optional()
    })
    .strict()

export const UserCreateArgsSchema: z.ZodType<
  Omit<Prisma.UserCreateArgs, 'data'> & {
    data:
      | z.infer<typeof UserCreateInputSchema>
      | z.infer<typeof UserUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    data: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema])
  })
  .strict()

export const UserUpsertArgsSchema: z.ZodType<
  Omit<Prisma.UserUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof UserCreateInputSchema>
      | z.infer<typeof UserUncheckedCreateInputSchema>
    update:
      | z.infer<typeof UserUpdateInputSchema>
      | z.infer<typeof UserUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereUniqueInputSchema,
    create: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema]),
    update: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema])
  })
  .strict()

export const UserCreateManyArgsSchema: z.ZodType<
  Omit<Prisma.UserCreateManyArgs, 'data'> & {
    data: z.infer<typeof UserCreateManyInputSchema>[]
  }
> = z
  .object({
    data: UserCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereUniqueInputSchema
  })
  .strict()

export const UserUpdateArgsSchema: z.ZodType<
  Omit<Prisma.UserUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof UserUpdateInputSchema>
      | z.infer<typeof UserUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    data: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema]),
    where: UserWhereUniqueInputSchema
  })
  .strict()

export const UserUpdateManyArgsSchema: z.ZodType<
  Omit<Prisma.UserUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof UserUpdateManyMutationInputSchema>
      | z.infer<typeof UserUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      UserUpdateManyMutationInputSchema,
      UserUncheckedUpdateManyInputSchema
    ]),
    where: UserWhereInputSchema.optional()
  })
  .strict()

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z
  .object({
    where: UserWhereInputSchema.optional()
  })
  .strict()

export const AccountCreateArgsSchema: z.ZodType<
  Omit<Prisma.AccountCreateArgs, 'data'> & {
    data:
      | z.infer<typeof AccountCreateInputSchema>
      | z.infer<typeof AccountUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    data: z.union([AccountCreateInputSchema, AccountUncheckedCreateInputSchema])
  })
  .strict()

export const AccountUpsertArgsSchema: z.ZodType<
  Omit<Prisma.AccountUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof AccountCreateInputSchema>
      | z.infer<typeof AccountUncheckedCreateInputSchema>
    update:
      | z.infer<typeof AccountUpdateInputSchema>
      | z.infer<typeof AccountUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    where: AccountWhereUniqueInputSchema,
    create: z.union([
      AccountCreateInputSchema,
      AccountUncheckedCreateInputSchema
    ]),
    update: z.union([
      AccountUpdateInputSchema,
      AccountUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const AccountCreateManyArgsSchema: z.ZodType<
  Omit<Prisma.AccountCreateManyArgs, 'data'> & {
    data: z.infer<typeof AccountCreateManyInputSchema>[]
  }
> = z
  .object({
    data: AccountCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    where: AccountWhereUniqueInputSchema
  })
  .strict()

export const AccountUpdateArgsSchema: z.ZodType<
  Omit<Prisma.AccountUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof AccountUpdateInputSchema>
      | z.infer<typeof AccountUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    data: z.union([
      AccountUpdateInputSchema,
      AccountUncheckedUpdateInputSchema
    ]),
    where: AccountWhereUniqueInputSchema
  })
  .strict()

export const AccountUpdateManyArgsSchema: z.ZodType<
  Omit<Prisma.AccountUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof AccountUpdateManyMutationInputSchema>
      | z.infer<typeof AccountUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      AccountUpdateManyMutationInputSchema,
      AccountUncheckedUpdateManyInputSchema
    ]),
    where: AccountWhereInputSchema.optional()
  })
  .strict()

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> =
  z
    .object({
      where: AccountWhereInputSchema.optional()
    })
    .strict()

export const BookingCreateArgsSchema: z.ZodType<
  Omit<Prisma.BookingCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingCreateInputSchema>
      | z.infer<typeof BookingUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    data: z.union([BookingCreateInputSchema, BookingUncheckedCreateInputSchema])
  })
  .strict()

export const BookingUpsertArgsSchema: z.ZodType<
  Omit<Prisma.BookingUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingCreateInputSchema>
      | z.infer<typeof BookingUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingUpdateInputSchema>
      | z.infer<typeof BookingUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    where: BookingWhereUniqueInputSchema,
    create: z.union([
      BookingCreateInputSchema,
      BookingUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingUpdateInputSchema,
      BookingUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingCreateManyArgsSchema: z.ZodType<
  Omit<Prisma.BookingCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingDeleteArgsSchema: z.ZodType<Prisma.BookingDeleteArgs> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    where: BookingWhereUniqueInputSchema
  })
  .strict()

export const BookingUpdateArgsSchema: z.ZodType<
  Omit<Prisma.BookingUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingUpdateInputSchema>
      | z.infer<typeof BookingUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingSelectSchema.optional(),
    include: BookingIncludeSchema.optional(),
    data: z.union([
      BookingUpdateInputSchema,
      BookingUncheckedUpdateInputSchema
    ]),
    where: BookingWhereUniqueInputSchema
  })
  .strict()

export const BookingUpdateManyArgsSchema: z.ZodType<
  Omit<Prisma.BookingUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingUpdateManyMutationInputSchema>
      | z.infer<typeof BookingUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingUpdateManyMutationInputSchema,
      BookingUncheckedUpdateManyInputSchema
    ]),
    where: BookingWhereInputSchema.optional()
  })
  .strict()

export const BookingDeleteManyArgsSchema: z.ZodType<Prisma.BookingDeleteManyArgs> =
  z
    .object({
      where: BookingWhereInputSchema.optional()
    })
    .strict()

export const BookingTravelerCreateArgsSchema: z.ZodType<
  Omit<Prisma.BookingTravelerCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTravelerCreateInputSchema>
      | z.infer<typeof BookingTravelerUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingTravelerSelectSchema.optional(),
    include: BookingTravelerIncludeSchema.optional(),
    data: z.union([
      BookingTravelerCreateInputSchema,
      BookingTravelerUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingTravelerUpsertArgsSchema: z.ZodType<
  Omit<Prisma.BookingTravelerUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingTravelerCreateInputSchema>
      | z.infer<typeof BookingTravelerUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingTravelerUpdateInputSchema>
      | z.infer<typeof BookingTravelerUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingTravelerSelectSchema.optional(),
    include: BookingTravelerIncludeSchema.optional(),
    where: BookingTravelerWhereUniqueInputSchema,
    create: z.union([
      BookingTravelerCreateInputSchema,
      BookingTravelerUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingTravelerUpdateInputSchema,
      BookingTravelerUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingTravelerCreateManyArgsSchema: z.ZodType<
  Omit<Prisma.BookingTravelerCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingTravelerCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingTravelerCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingTravelerDeleteArgsSchema: z.ZodType<Prisma.BookingTravelerDeleteArgs> =
  z
    .object({
      select: BookingTravelerSelectSchema.optional(),
      include: BookingTravelerIncludeSchema.optional(),
      where: BookingTravelerWhereUniqueInputSchema
    })
    .strict()

export const BookingTravelerUpdateArgsSchema: z.ZodType<
  Omit<Prisma.BookingTravelerUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTravelerUpdateInputSchema>
      | z.infer<typeof BookingTravelerUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingTravelerSelectSchema.optional(),
    include: BookingTravelerIncludeSchema.optional(),
    data: z.union([
      BookingTravelerUpdateInputSchema,
      BookingTravelerUncheckedUpdateInputSchema
    ]),
    where: BookingTravelerWhereUniqueInputSchema
  })
  .strict()

export const BookingTravelerUpdateManyArgsSchema: z.ZodType<
  Omit<Prisma.BookingTravelerUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingTravelerUpdateManyMutationInputSchema>
      | z.infer<typeof BookingTravelerUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingTravelerUpdateManyMutationInputSchema,
      BookingTravelerUncheckedUpdateManyInputSchema
    ]),
    where: BookingTravelerWhereInputSchema.optional()
  })
  .strict()

export const BookingTravelerDeleteManyArgsSchema: z.ZodType<Prisma.BookingTravelerDeleteManyArgs> =
  z
    .object({
      where: BookingTravelerWhereInputSchema.optional()
    })
    .strict()

export const BookingProductCreateArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductCreateInputSchema>
      | z.infer<typeof BookingProductUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    data: z.union([
      BookingProductCreateInputSchema,
      BookingProductUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingProductUpsertArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingProductCreateInputSchema>
      | z.infer<typeof BookingProductUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingProductUpdateInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    where: BookingProductWhereUniqueInputSchema,
    create: z.union([
      BookingProductCreateInputSchema,
      BookingProductUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingProductUpdateInputSchema,
      BookingProductUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingProductCreateManyArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingProductCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingProductCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingProductDeleteArgsSchema: z.ZodType<Prisma.BookingProductDeleteArgs> =
  z
    .object({
      select: BookingProductSelectSchema.optional(),
      include: BookingProductIncludeSchema.optional(),
      where: BookingProductWhereUniqueInputSchema
    })
    .strict()

export const BookingProductUpdateArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductUpdateInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductSelectSchema.optional(),
    include: BookingProductIncludeSchema.optional(),
    data: z.union([
      BookingProductUpdateInputSchema,
      BookingProductUncheckedUpdateInputSchema
    ]),
    where: BookingProductWhereUniqueInputSchema
  })
  .strict()

export const BookingProductUpdateManyArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductUpdateManyMutationInputSchema>
      | z.infer<typeof BookingProductUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingProductUpdateManyMutationInputSchema,
      BookingProductUncheckedUpdateManyInputSchema
    ]),
    where: BookingProductWhereInputSchema.optional()
  })
  .strict()

export const BookingProductDeleteManyArgsSchema: z.ZodType<Prisma.BookingProductDeleteManyArgs> =
  z
    .object({
      where: BookingProductWhereInputSchema.optional()
    })
    .strict()

export const BookingProductRoomCreateArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomCreateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomCreateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedCreateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    data: z.union([
      BookingProductRoomCreateInputSchema,
      BookingProductRoomUncheckedCreateInputSchema
    ])
  })
  .strict()

export const BookingProductRoomUpsertArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomUpsertArgs, 'create' | 'update'> & {
    create:
      | z.infer<typeof BookingProductRoomCreateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedCreateInputSchema>
    update:
      | z.infer<typeof BookingProductRoomUpdateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    where: BookingProductRoomWhereUniqueInputSchema,
    create: z.union([
      BookingProductRoomCreateInputSchema,
      BookingProductRoomUncheckedCreateInputSchema
    ]),
    update: z.union([
      BookingProductRoomUpdateInputSchema,
      BookingProductRoomUncheckedUpdateInputSchema
    ])
  })
  .strict()

export const BookingProductRoomCreateManyArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomCreateManyArgs, 'data'> & {
    data: z.infer<typeof BookingProductRoomCreateManyInputSchema>[]
  }
> = z
  .object({
    data: BookingProductRoomCreateManyInputSchema.array(),
    skipDuplicates: z.boolean().optional()
  })
  .strict()

export const BookingProductRoomDeleteArgsSchema: z.ZodType<Prisma.BookingProductRoomDeleteArgs> =
  z
    .object({
      select: BookingProductRoomSelectSchema.optional(),
      include: BookingProductRoomIncludeSchema.optional(),
      where: BookingProductRoomWhereUniqueInputSchema
    })
    .strict()

export const BookingProductRoomUpdateArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomUpdateArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomUpdateInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateInputSchema>
  }
> = z
  .object({
    select: BookingProductRoomSelectSchema.optional(),
    include: BookingProductRoomIncludeSchema.optional(),
    data: z.union([
      BookingProductRoomUpdateInputSchema,
      BookingProductRoomUncheckedUpdateInputSchema
    ]),
    where: BookingProductRoomWhereUniqueInputSchema
  })
  .strict()

export const BookingProductRoomUpdateManyArgsSchema: z.ZodType<
  Omit<Prisma.BookingProductRoomUpdateManyArgs, 'data'> & {
    data:
      | z.infer<typeof BookingProductRoomUpdateManyMutationInputSchema>
      | z.infer<typeof BookingProductRoomUncheckedUpdateManyInputSchema>
  }
> = z
  .object({
    data: z.union([
      BookingProductRoomUpdateManyMutationInputSchema,
      BookingProductRoomUncheckedUpdateManyInputSchema
    ]),
    where: BookingProductRoomWhereInputSchema.optional()
  })
  .strict()

export const BookingProductRoomDeleteManyArgsSchema: z.ZodType<Prisma.BookingProductRoomDeleteManyArgs> =
  z
    .object({
      where: BookingProductRoomWhereInputSchema.optional()
    })
    .strict()
